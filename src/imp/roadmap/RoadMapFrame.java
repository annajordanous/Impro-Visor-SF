/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AltRoadMapFrame.java
 *
 * Created on Jul 6, 2011, 12:32:17 PM
 */

package imp.roadmap;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.tree.*;
import java.util.Iterator;
import imp.brickdictionary.*;
import java.io.IOException;
import imp.cykparser.*;
import imp.data.ChordPart;
import imp.data.Score;
import imp.gui.Notate;
import imp.util.ErrorLog;


/**
 *
 * @author August Toman-Yih
 */

public class RoadMapFrame extends javax.swing.JFrame {
    
    /**
     * Communication with leadsheet and score is done through Notate frame.
     */
    
    private Notate notate = null;
    
    /**
     * auxNotate is a separate notate window for converting the roadmap
     * to a leadsheet.
     */
    
    private Notate auxNotate = null;;
    
    private Image buffer;
    private Image bufferRoadMap;
    
    private PreviewPanel previewPanel;
    
    private RoadMapPanel roadMapPanel;
    
    private BrickLibrary brickLibrary;
    
    private CYKParser cykParser;
    
    private ArrayList<GraphicBrick> draggedBricks = new ArrayList();
    
    private ArrayList<Block> clipboard = new ArrayList();
    
    private Object[] durationChoices = {1920,1440,960,480,240,120};
    
    private int bufferWidth  = 1024;
    private int bufferHeight = 200;
    
    private int RMbufferWidth  = 2048;
    private int RMbufferHeight = 1920;
   
    private DefaultTreeModel libraryTreeModel;
    
    private RoadMapSettings settings = new RoadMapSettings();
    
    private LinkedList<RoadMapSnapShot> roadMapHistory = new LinkedList();
    private LinkedList<RoadMapSnapShot> roadMapFuture = new LinkedList();

    /** Creates new form AltRoadMapFrame */
    public RoadMapFrame(Notate notate) {
        
        this.notate = notate;
        
        previewPanel = new PreviewPanel(this);
        roadMapPanel = new RoadMapPanel(this);
        
        try {
            brickLibrary = BrickLibrary.processDictionary();
        } catch (IOException e) {
            ErrorLog.log(ErrorLog.FATAL, "Error opening brick dictionary");
            System.exit(-1);
        } catch (DictionaryException de) {
            ErrorLog.log(ErrorLog.FATAL, "Error processing brick dictionary");
            System.exit(-1);
        }
        
        initLibraryTree();
                
        initComponents();
        
        initBuffer();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addBrickDialog = new javax.swing.JDialog();
        dialogNameLabel = new javax.swing.JLabel();
        dialogKeyLabel = new javax.swing.JLabel();
        dialogNameField = new javax.swing.JTextField();
        dialogKeySpinner = new javax.swing.JSpinner();
        dialogAcceptButton = new javax.swing.JButton();
        optionsDialog = new javax.swing.JDialog();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        deleteButton = new javax.swing.JButton();
        flattenButton = new javax.swing.JButton();
        breakButton = new javax.swing.JButton();
        scaleLabel = new javax.swing.JLabel();
        scaleComboBox = new javax.swing.JComboBox();
        newBrickButton = new javax.swing.JButton();
        selectAllBricksButton = new javax.swing.JButton();
        analyzeButton = new javax.swing.JButton();
        sendToNotateButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        roadMapScrollPane = new javax.swing.JScrollPane(roadMapPanel);
        libraryTabbedPane = new javax.swing.JTabbedPane();
        libraryScrollPane = new javax.swing.JScrollPane();
        libraryTree = new javax.swing.JTree();
        chordPanel = new javax.swing.JPanel();
        chordField = new javax.swing.JTextField();
        addChordButton = new javax.swing.JButton();
        keySpinner = new javax.swing.JSpinner();
        durationComboBox = new javax.swing.JComboBox(durationChoices);
        previewScrollPane = new javax.swing.JScrollPane(previewPanel);
        roadmapMenuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem helpMenuItem = new javax.swing.JMenuItem();

        addBrickDialog.setTitle("Add New Brick"); // NOI18N
        addBrickDialog.setMinimumSize(new java.awt.Dimension(200, 110));
        addBrickDialog.setName("addBrickDialog"); // NOI18N
        addBrickDialog.setResizable(false);
        addBrickDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        dialogNameLabel.setText("Name:"); // NOI18N
        dialogNameLabel.setName("dialogNameLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        addBrickDialog.getContentPane().add(dialogNameLabel, gridBagConstraints);

        dialogKeyLabel.setText("Key:"); // NOI18N
        dialogKeyLabel.setName("dialogKeyLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        addBrickDialog.getContentPane().add(dialogKeyLabel, gridBagConstraints);

        dialogNameField.setText("BrickName"); // NOI18N
        dialogNameField.setName("dialogNameField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 3);
        addBrickDialog.getContentPane().add(dialogNameField, gridBagConstraints);

        dialogKeySpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"}));
        dialogKeySpinner.setName("dialogKeySpinner"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        addBrickDialog.getContentPane().add(dialogKeySpinner, gridBagConstraints);

        dialogAcceptButton.setText("Accept"); // NOI18N
        dialogAcceptButton.setName("dialogAcceptButton"); // NOI18N
        dialogAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogAccepted(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        addBrickDialog.getContentPane().add(dialogAcceptButton, gridBagConstraints);

        optionsDialog.setTitle("Settings"); // NOI18N
        optionsDialog.setName("optionsDialog"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N
        jTabbedPane1.addTab("tab1", jPanel1); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N
        jTabbedPane1.addTab("tab2", jPanel2); // NOI18N

        optionsDialog.getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        setTitle("Road Map\n"); // NOI18N
        setMinimumSize(new java.awt.Dimension(830, 600));
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setMaximumSize(new java.awt.Dimension(100, 60));
        toolBar.setMinimumSize(new java.awt.Dimension(500, 50));
        toolBar.setName("toolBar"); // NOI18N
        toolBar.setPreferredSize(new java.awt.Dimension(500, 50));

        deleteButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        deleteButton.setText("Delete"); // NOI18N
        deleteButton.setToolTipText("Delete the selected bricks and chords."); // NOI18N
        deleteButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setMaximumSize(new java.awt.Dimension(70, 30));
        deleteButton.setMinimumSize(new java.awt.Dimension(70, 30));
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.setPreferredSize(new java.awt.Dimension(70, 30));
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonPressed(evt);
            }
        });
        toolBar.add(deleteButton);

        flattenButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        flattenButton.setText("Flatten"); // NOI18N
        flattenButton.setToolTipText("Flatten selected bricks into their constituent chords."); // NOI18N
        flattenButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        flattenButton.setFocusable(false);
        flattenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flattenButton.setMaximumSize(new java.awt.Dimension(70, 30));
        flattenButton.setMinimumSize(new java.awt.Dimension(70, 30));
        flattenButton.setName("flattenButton"); // NOI18N
        flattenButton.setPreferredSize(new java.awt.Dimension(70, 30));
        flattenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flattenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenButtonPressed(evt);
            }
        });
        toolBar.add(flattenButton);

        breakButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        breakButton.setText("Break"); // NOI18N
        breakButton.setToolTipText("Break this brick into constitutent parts."); // NOI18N
        breakButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        breakButton.setFocusable(false);
        breakButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        breakButton.setMaximumSize(new java.awt.Dimension(70, 30));
        breakButton.setMinimumSize(new java.awt.Dimension(70, 30));
        breakButton.setName("breakButton"); // NOI18N
        breakButton.setPreferredSize(new java.awt.Dimension(70, 30));
        breakButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        breakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakButtonPressed(evt);
            }
        });
        toolBar.add(breakButton);

        scaleLabel.setName("scaleLabel"); // NOI18N
        toolBar.add(scaleLabel);

        scaleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "/5", "/4", "/3", "/2", "x1", "x2", "x3", "x4", "x5" }));
        scaleComboBox.setSelectedIndex(4);
        scaleComboBox.setToolTipText("Scale the length of the brick or chord by a factor."); // NOI18N
        scaleComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scale Duration", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 9))); // NOI18N
        scaleComboBox.setMaximumSize(new java.awt.Dimension(100, 45));
        scaleComboBox.setMinimumSize(new java.awt.Dimension(60, 30));
        scaleComboBox.setName("scaleComboBox"); // NOI18N
        scaleComboBox.setPreferredSize(new java.awt.Dimension(60, 30));
        scaleComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scaleComboBoxscaleComboReleased(evt);
            }
        });
        scaleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleComboBoxscaleChosen(evt);
            }
        });
        toolBar.add(scaleComboBox);

        newBrickButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        newBrickButton.setText("New Brick"); // NOI18N
        newBrickButton.setToolTipText("Define a new brick in the dictionary."); // NOI18N
        newBrickButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newBrickButton.setFocusable(false);
        newBrickButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newBrickButton.setMaximumSize(new java.awt.Dimension(70, 30));
        newBrickButton.setMinimumSize(new java.awt.Dimension(70, 30));
        newBrickButton.setName("newBrickButton"); // NOI18N
        newBrickButton.setPreferredSize(new java.awt.Dimension(70, 30));
        newBrickButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newBrickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBrickButtonPressed(evt);
            }
        });
        toolBar.add(newBrickButton);

        selectAllBricksButton.setFont(new java.awt.Font("Lucida Grande 12", 0, 12));
        selectAllBricksButton.setText("Select All"); // NOI18N
        selectAllBricksButton.setToolTipText("Select all bricks.\n"); // NOI18N
        selectAllBricksButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        selectAllBricksButton.setFocusable(false);
        selectAllBricksButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectAllBricksButton.setMaximumSize(new java.awt.Dimension(70, 30));
        selectAllBricksButton.setMinimumSize(new java.awt.Dimension(70, 30));
        selectAllBricksButton.setName("selectAllBricksButton"); // NOI18N
        selectAllBricksButton.setPreferredSize(new java.awt.Dimension(70, 30));
        selectAllBricksButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectAllBricksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllBricksButtonPressed(evt);
            }
        });
        toolBar.add(selectAllBricksButton);

        analyzeButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        analyzeButton.setToolTipText("Analyze the selection into bricks."); // NOI18N
        analyzeButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        analyzeButton.setFocusable(false);
        analyzeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        analyzeButton.setLabel("Analyze"); // NOI18N
        analyzeButton.setMaximumSize(new java.awt.Dimension(70, 30));
        analyzeButton.setMinimumSize(new java.awt.Dimension(70, 30));
        analyzeButton.setName("analyzeButton"); // NOI18N
        analyzeButton.setPreferredSize(new java.awt.Dimension(70, 30));
        analyzeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonPressed(evt);
            }
        });
        toolBar.add(analyzeButton);

        sendToNotateButton.setFont(new java.awt.Font("Lucida Grande 12", 0, 12));
        sendToNotateButton.setText("To Leadsheet"); // NOI18N
        sendToNotateButton.setToolTipText("Send the selection to the leadsheet window."); // NOI18N
        sendToNotateButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sendToNotateButton.setFocusable(false);
        sendToNotateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sendToNotateButton.setMaximumSize(new java.awt.Dimension(90, 30));
        sendToNotateButton.setMinimumSize(new java.awt.Dimension(90, 30));
        sendToNotateButton.setPreferredSize(new java.awt.Dimension(90, 30));
        sendToNotateButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sendToNotateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToNotateButtonPressed(evt);
            }
        });
        toolBar.add(sendToNotateButton);

        playButton.setFont(new java.awt.Font("Lucida Grande 12", 0, 12)); // NOI18N
        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/play.gif"))); // NOI18N
        playButton.setText("\n"); // NOI18N
        playButton.setToolTipText("Play the selection.\n"); // NOI18N
        playButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setMaximumSize(new java.awt.Dimension(40, 30));
        playButton.setMinimumSize(new java.awt.Dimension(30, 30));
        playButton.setName("playButton"); // NOI18N
        playButton.setPreferredSize(new java.awt.Dimension(40, 30));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonPressed(evt);
            }
        });
        toolBar.add(playButton);

        stopButton.setFont(new java.awt.Font("Lucida Grande 12", 0, 12));
        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/stop.gif"))); // NOI18N
        stopButton.setText("\n"); // NOI18N
        stopButton.setToolTipText("Stop playing the selection.\n"); // NOI18N
        stopButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setMaximumSize(new java.awt.Dimension(40, 30));
        stopButton.setMinimumSize(new java.awt.Dimension(40, 30));
        stopButton.setName("stopButton"); // NOI18N
        stopButton.setPreferredSize(new java.awt.Dimension(35, 30));
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonPressed(evt);
            }
        });
        toolBar.add(stopButton);

        jSlider1.setMaximum(200);
        jSlider1.setMinimum(60);
        jSlider1.setName("jSlider1"); // NOI18N
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scaleSliderChanged(evt);
            }
        });
        toolBar.add(jSlider1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        getContentPane().add(toolBar, gridBagConstraints);

        roadMapScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        roadMapScrollPane.setToolTipText("The roadmap.\n"); // NOI18N
        roadMapScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        roadMapScrollPane.setMinimumSize(new java.awt.Dimension(600, 400));
        roadMapScrollPane.setName("roadMapScrollPane"); // NOI18N
        roadMapScrollPane.setPreferredSize(new java.awt.Dimension(800, 900));
        roadMapScrollPane.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                roadMapScrollPaneroadMapMouseWheelMoved(evt);
            }
        });
        roadMapScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapClicked(evt);
            }
        });
        roadMapScrollPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapDragged(evt);
            }
        });
        roadMapScrollPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roadMapScrollPaneroadMapKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roadMapScrollPaneroadMapKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.95;
        getContentPane().add(roadMapScrollPane, gridBagConstraints);

        libraryTabbedPane.setMinimumSize(new java.awt.Dimension(300, 200));
        libraryTabbedPane.setName("libraryTabbedPane"); // NOI18N
        libraryTabbedPane.setPreferredSize(new java.awt.Dimension(300, 500));

        libraryScrollPane.setName("libraryScrollPane"); // NOI18N

        libraryTree.setModel(libraryTreeModel);
        libraryTree.setMaximumSize(new java.awt.Dimension(300, 1000));
        libraryTree.setMinimumSize(new java.awt.Dimension(200, 200));
        libraryTree.setName("libraryTree"); // NOI18N
        libraryTree.setPreferredSize(new java.awt.Dimension(200, 600));
        libraryTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        libraryTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                libraryTreeSelected(evt);
            }
        });
        libraryScrollPane.setViewportView(libraryTree);

        libraryTabbedPane.addTab("Brick Dictionary", null, libraryScrollPane, "Dictionary of available bricks.\n");

        chordPanel.setName("chordPanel"); // NOI18N
        chordPanel.setLayout(new java.awt.GridBagLayout());

        chordField.setName("chordField"); // NOI18N
        chordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordFieldActionPerformed(evt);
            }
        });
        chordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chordFieldFocusGained(evt);
            }
        });
        chordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chordFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        chordPanel.add(chordField, gridBagConstraints);

        addChordButton.setText("Enter Chord"); // NOI18N
        addChordButton.setToolTipText("Enter this chord into roadmap."); // NOI18N
        addChordButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addChordButton.setMinimumSize(new java.awt.Dimension(40, 40));
        addChordButton.setName("addChordButton"); // NOI18N
        addChordButton.setPreferredSize(new java.awt.Dimension(100, 30));
        addChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChordButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        chordPanel.add(addChordButton, gridBagConstraints);

        libraryTabbedPane.addTab("Chords", null, chordPanel, "Enter individual chords by name.\n");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.8;
        getContentPane().add(libraryTabbedPane, gridBagConstraints);

        keySpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"}));
        keySpinner.setToolTipText("Select the key for this brick."); // NOI18N
        keySpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Key, Root\n\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande 11", 0, 11))); // NOI18N
        keySpinner.setName("keySpinner"); // NOI18N
        keySpinner.setPreferredSize(new java.awt.Dimension(76, 54));
        keySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                keySpinnerChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.02;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(keySpinner, gridBagConstraints);

        durationComboBox.setSelectedItem(480);
        durationComboBox.setToolTipText("Set the duration of this brick (in slots)."); // NOI18N
        durationComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Duration\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande 11", 0, 11))); // NOI18N
        durationComboBox.setMinimumSize(new java.awt.Dimension(52, 54));
        durationComboBox.setName("durationComboBox"); // NOI18N
        durationComboBox.setPreferredSize(new java.awt.Dimension(52, 54));
        durationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationComboBoxdurationChosen(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.02;
        getContentPane().add(durationComboBox, gridBagConstraints);

        previewScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brick Preview\n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 11))); // NOI18N
        previewScrollPane.setDoubleBuffered(true);
        previewScrollPane.setMaximumSize(new java.awt.Dimension(32767, 100));
        previewScrollPane.setMinimumSize(new java.awt.Dimension(800, 80));
        previewScrollPane.setName("previewScrollPane"); // NOI18N
        previewScrollPane.setPreferredSize(new java.awt.Dimension(800, 80));
        previewScrollPane.setSize(new java.awt.Dimension(800, 80));
        previewScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneClicked(evt);
            }
        });
        previewScrollPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneDragged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(previewScrollPane, gridBagConstraints);

        roadmapMenuBar.setName("roadmapMenuBar"); // NOI18N

        fileMenu.setText("File"); // NOI18N
        fileMenu.setMaximumSize(new java.awt.Dimension(100, 40));
        fileMenu.setMinimumSize(new java.awt.Dimension(50, 20));
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.setPreferredSize(new java.awt.Dimension(50, 20));

        exitMenuItem.setLabel("Quit"); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIhandler(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        roadmapMenuBar.add(fileMenu);

        helpMenu.setText("Help"); // NOI18N
        helpMenu.setToolTipText("Help"); // NOI18N
        helpMenu.setMaximumSize(new java.awt.Dimension(100, 40));
        helpMenu.setMinimumSize(new java.awt.Dimension(50, 20));
        helpMenu.setName("helpMenu"); // NOI18N
        helpMenu.setPreferredSize(new java.awt.Dimension(50, 20));

        helpMenuItem.setLabel("Help"); // NOI18N
        helpMenuItem.setName("helpMenuItem"); // NOI18N
        helpMenu.add(helpMenuItem);

        roadmapMenuBar.add(helpMenu);

        setJMenuBar(roadmapMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void libraryTreeSelected(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_libraryTreeSelected
        setPreview();
}//GEN-LAST:event_libraryTreeSelected

    private void chordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordFieldActionPerformed
        addChordFromPreview();
        chordField.selectAll();
}//GEN-LAST:event_chordFieldActionPerformed

    private void chordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chordFieldFocusGained
        chordField.selectAll();
}//GEN-LAST:event_chordFieldFocusGained

    private void chordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chordFieldKeyPressed
        switch (evt.getKeyCode()) {
            //case 38: durationComboBox.setSelectedIndex(durationComboBox.getSelectedIndex()+1); break;
            //case 40: keySpinner.setValue(keySpinner.getPreviousValue()); break;
            default:                            break;
        }
        System.out.println(evt.getKeyCode());
}//GEN-LAST:event_chordFieldKeyPressed

    private void addChordButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChordButtonPressed
        addChordFromPreview();
}//GEN-LAST:event_addChordButtonPressed

    private void keySpinnerChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_keySpinnerChanged
        setPreviewKey();
}//GEN-LAST:event_keySpinnerChanged

    private void previewScrollPanepreviewPaneReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneReleased
        System.out.println("Preview released");
        dropFromPreview(evt.getX(), evt.getY());
}//GEN-LAST:event_previewScrollPanepreviewPaneReleased

    private void previewScrollPanepreviewPaneClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneClicked
        System.out.println("Preview Clicked");
        previewPanel.draw();
}//GEN-LAST:event_previewScrollPanepreviewPaneClicked

    private void previewScrollPanepreviewPaneDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneDragged
        System.out.println("Preview Dragged");
        dragFromPreview(evt.getX(), evt.getY());
}//GEN-LAST:event_previewScrollPanepreviewPaneDragged

    private void durationComboBoxdurationChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationComboBoxdurationChosen
        setPreviewDuration();
}//GEN-LAST:event_durationComboBoxdurationChosen

    private void roadMapScrollPaneroadMapMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapMouseWheelMoved
        transposeSelection(evt.getWheelRotation());
}//GEN-LAST:event_roadMapScrollPaneroadMapMouseWheelMoved

    private void roadMapScrollPaneroadMapReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapReleased
        System.out.println("Mouse released");
        dropCurrentBrick(evt.getX(), evt.getY());
}//GEN-LAST:event_roadMapScrollPaneroadMapReleased

    private void roadMapScrollPaneroadMapClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapClicked
        int index = roadMapPanel.getBrickIndexAt(evt.getX(), evt.getY());
        
        System.out.println("Clicked brick "+index);
        
        if(index != -1) {
            if(evt.isShiftDown())
                selectBricks(index);
            else
                selectBrick(index);
        } else
            deselectBricks();
        
        roadMapScrollPane.requestFocus();
}//GEN-LAST:event_roadMapScrollPaneroadMapClicked

    private void roadMapScrollPaneroadMapDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapDragged
        System.out.println("roadMapDragged");
        dragSelectedBricks(evt.getX(), evt.getY());
}//GEN-LAST:event_roadMapScrollPaneroadMapDragged

    private void roadMapScrollPaneroadMapKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapKeyPressed
        System.out.println(evt.getKeyCode());
        switch (evt.getKeyCode()) {
            case 127: deleteSelection();                                break;
            case 67: if(evt.isMetaDown()) copySelection();              break;
            case 86: if(evt.isMetaDown()) pasteSelection();             break;
            case 88: if(evt.isMetaDown()) cutSelection();               break;
            case 65: if(evt.isMetaDown()) selectAllBricks();            break;
            case 90: if(evt.isMetaDown()) undo();                       break;
            case 89: if(evt.isMetaDown()) redo();                       break;
            case 10: toggleSectionBreak();                              break;
            default:                                                    break;
        }
}//GEN-LAST:event_roadMapScrollPaneroadMapKeyPressed

    private void roadMapScrollPaneroadMapKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapKeyReleased
        switch (evt.getKeyCode()) {
            default:                            break;
        }
}//GEN-LAST:event_roadMapScrollPaneroadMapKeyReleased

    private void deleteButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonPressed
        deleteSelection();
}//GEN-LAST:event_deleteButtonPressed

    private void flattenButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenButtonPressed
        flattenSelection();
}//GEN-LAST:event_flattenButtonPressed

    private void breakButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakButtonPressed
        breakSelection();
}//GEN-LAST:event_breakButtonPressed

    private void scaleComboBoxscaleComboReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scaleComboBoxscaleComboReleased
        System.out.println("Combo released");
}//GEN-LAST:event_scaleComboBoxscaleComboReleased

    private void scaleComboBoxscaleChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleComboBoxscaleChosen
        scaleSelection();
        scaleComboBox.setSelectedItem("x1");
}//GEN-LAST:event_scaleComboBoxscaleChosen

    private void newBrickButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBrickButtonPressed
        System.out.println("New Brick Button Pressed");
        dialogNameField.setText("NewBrick");
        dialogKeySpinner.setValue("C");
        addBrickDialog.setVisible(true);
}//GEN-LAST:event_newBrickButtonPressed

    private void analyzeButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonPressed
        analyzeSelection();
}//GEN-LAST:event_analyzeButtonPressed

    private void exitMIhandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIhandler
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMIhandler

    private void dialogAccepted(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogAccepted
        addBrickDialog.setVisible(false);
        makeBrickFromSelection();
    }//GEN-LAST:event_dialogAccepted

    private void selectAllBricksButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllBricksButtonPressed
        selectAllBricks();
    }//GEN-LAST:event_selectAllBricksButtonPressed

    private void sendToNotateButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToNotateButtonPressed
        sendSelectionToNotate();
    }//GEN-LAST:event_sendToNotateButtonPressed

    private void playButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonPressed
        playSelection();
    }//GEN-LAST:event_playButtonPressed

    private void stopButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonPressed
        stopPlayingSelection();
    }//GEN-LAST:event_stopButtonPressed

    private void scaleSliderChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scaleSliderChanged
        settings.measureLength = jSlider1.getValue();
    }//GEN-LAST:event_scaleSliderChanged

    /** InitBuffer <p>
     *  
     * Initializes the buffers for the roadmap and preview panel.
     */
    private void initBuffer()
    {
        buffer = new java.awt.image.BufferedImage(bufferWidth, bufferHeight, BufferedImage.TYPE_INT_RGB);
        bufferRoadMap = new java.awt.image.BufferedImage(RMbufferWidth, RMbufferHeight, BufferedImage.TYPE_INT_RGB);
        previewPanel.setBuffer(buffer);
        roadMapPanel.setBuffer(bufferRoadMap);
        roadMapPanel.draw();
        previewPanel.draw();
    }
    

    /** setBackground <p>
     * Paints the image white.
     * 
     * @param image, an Image
     */
    public void setBackground(Image image)
    {
        Graphics graphics = image.getGraphics();
        graphics.setColor(Color.white);
        graphics.fillRect(0, 0, image.getWidth(null), image.getHeight(null));
    }
    
    /** setBackgrounds <p>
     * Sets the background of each buffer.
     */
    public void setBackgrounds()
    {
        setBackground(buffer);
        setBackground(bufferRoadMap);
    }
    
    public RoadMapSettings getSettings()
    {
        return settings;
    }
    
    private void saveState(String name)
    {
        RoadMapSnapShot ss = new RoadMapSnapShot(name, roadMapPanel.getRoadMap());
        roadMapHistory.add(ss);
        roadMapFuture.clear();
    }
    
    private void stepStateBack()
    {
        if(roadMapHistory.peek() != null) {
            RoadMapSnapShot ss = roadMapHistory.removeLast();
            roadMapPanel.setRoadMap(ss.getRoadMap());
            roadMapFuture.add(ss);
        }
    }
    
    private void stepStateForward()
    {
        if(roadMapFuture.peek() != null) {
            RoadMapSnapShot ss = roadMapFuture.removeLast();
            roadMapPanel.setRoadMap(ss.getRoadMap());
            roadMapHistory.add(ss);
        }
    }
    
    private void undo()
    {
        stepStateBack();
        roadMapPanel.placeBricks();
    }
    
    private void redo()
    {
        stepStateForward();
        roadMapPanel.placeBricks();
    }
       
    /* -------- Actions -------- */
    
    /** addChord <p>
    * Adds the chord inputted in the chord field to the roadmap.
    */
    public void addChord(Chord chord)
    {
        saveState("AddChord");
        roadMapPanel.addBlock(chord);
        roadMapPanel.placeBricks();
    }
    
    
    public void addChordFromPreview()
    {
        saveState("AddChord");
        roadMapPanel.addBlock(new Chord(chordField.getText(),(Integer)durationChoices[durationComboBox.getSelectedIndex()]));
        roadMapPanel.placeBricks();
    }
    
    public void deleteSelection()
    {
        saveState("Delete");
        roadMapPanel.deleteSelection();
        deactivateButtons();
    }
    
    public void breakSelection()
    {
        saveState("Break");
        roadMapPanel.breakSelection();
    }
    
    public void makeBrickFromSelection()
    {
        saveState("Merge");
        long key = BrickLibrary.keyNameToNum((String) dialogKeySpinner.getValue());
        String name = dialogNameField.getText();
        Brick newBrick = roadMapPanel.makeBrickFromSelection(name, key);
        addToLibrary(newBrick);
    }

    public void transposeSelection(long diff)
    {
        saveState("Transpose");
        roadMapPanel.transposeSelection(diff);
    }
    
    public void analyzeSelection()
    {
        saveState("Analyze");
        roadMapPanel.analyzeSelection();
    }
    
    public void flattenSelection()
    {
        saveState("Flatten");
        roadMapPanel.flattenSelection();
    }
    
    public void scaleSelection()
    {
        saveState("Scale");
        String choice = (String)scaleComboBox.getSelectedItem();
        
        if( choice == null )
            return;
        
        long scale = choice.charAt(1) - 48; // set to integer
        
        if( choice.charAt(0) == 47) //  / = division
            scale = -scale;
        
        roadMapPanel.scaleSelection(scale);       
    }

    public void cutSelection()
    {
        saveState("Cut");
        System.out.println("Cut!");
        clipboard = roadMapPanel.removeSelection();
        roadMapPanel.placeBricks();
    }
    
    public void pasteSelection()
    {
        saveState("Paste");
        System.out.println("Paste!");
        
        roadMapPanel.addBlocks(RoadMap.cloneBlocks(clipboard));
        
        roadMapPanel.placeBricks();
    }
    
    public void copySelection()
    {
        System.out.println("Copy!");
        clipboard = RoadMap.cloneBlocks(roadMapPanel.getSelection());
            
    }
    
    /** dragSelectedBricks <p>
     * Implements dragging behavior.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dragSelectedBricks(int x, int y)
    {   
        int index = roadMapPanel.getBrickIndexAt(x, y);
        System.out.println("Drag detected");
        if( draggedBricks.isEmpty() ) {
            saveState("Drag");
            System.out.println("Grabbing bricks");
            if( index != -1 ) {
                draggedBricks = roadMapPanel.makeBricks(roadMapPanel.removeSelectionNoUpdate());
            }
        }
        
        if( !draggedBricks.isEmpty() ) {
            roadMapPanel.setInsertLine(x, y);
            roadMapPanel.draw();
            roadMapPanel.drawBricksAt(draggedBricks, x, y);
        }
    }
    
    /** dropCurrentBrick <p>
     * Implements dropping behavior.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dropCurrentBrick(int x, int y)
    {   
        System.out.println("Drop detected");
        if( !draggedBricks.isEmpty() ) {
            System.out.println("Dropping bricks");
            int index = roadMapPanel.getSlotAt(x, y);
            roadMapPanel.dropBricks(index, draggedBricks);
            draggedBricks.clear();
            roadMapPanel.setInsertLine(0);
        }
        roadMapPanel.placeBricks();
    }
    
    /** dragFromPreview <p>
     * Implements dragging behavior from the preview window.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dragFromPreview(int x, int y) 
    {        
        if( draggedBricks.isEmpty() ) {
            roadMapPanel.deselectBricks();
            
            if (previewPanel.currentBrick != null) {
                draggedBricks.add(previewPanel.getBrick());
                setPreview();
            }
        }
        dragSelectedBricks(x + libraryTabbedPane.getX(), y + previewScrollPane.getY());
    }
    
    /** dropFromPreivew <p>
     * Implements dropping behavior from the preview window;
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse 
     */
    public void dropFromPreview(int x, int y)
    {
        saveState("Drop");
        dropCurrentBrick(x + libraryTabbedPane.getX(), y + previewScrollPane.getY());
        activateButtons();
    }
    
    /** setPreview <p>
     * Sets the preview brick, as well as its duration and key.
     */
    public void setPreview()
    {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)libraryTree.getSelectionPath().getLastPathComponent();
        try {
            if( node.isLeaf() ) {
                Brick brick = brickLibrary.getBrick(node.toString(), 0);

                previewPanel.setBrick( brick );

                setPreviewKey();
                setPreviewDuration();
            }
        } catch( DictionaryException de) {
            
        }
    }
    
    /** setPreviewKey <p>
     * Sets the key of the brick in the preview pane to the key chosen by
     * the key spinner.
     */
    public void setPreviewKey()
    {
        String key = (String)keySpinner.getValue();
        if(BrickLibrary.isValidKey(key))
            previewPanel.setKey( key );
    }
    
    /** setPreviewDuration <p>
     * Sets the duration of the brick in the preview pane to the key chosen by
     * the duration combo box.
     */
    public void setPreviewDuration()
    {
        previewPanel.setDuration((Integer)durationChoices[durationComboBox.getSelectedIndex()]);
        previewPanel.draw();
    }
           
    /** selectBricks <p>
     * Adds the brick at index to the selection, either extending the selection
     * or reducing it depending on whether the brick is selected.
     * 
     * @param index, the index of the brick to be selected
     */
    public void selectBricks(int index)
    {
        roadMapPanel.selectBricks(index);
        activateButtons();   
    }
    
    public void selectAllBricks()
    {
        roadMapPanel.selectAll();
        activateButtons();
    }
    
    /** selectBrick <p>
     * Selects only the brick at index, deselecting all other bricks.
     * 
     * @param index, the index of the brick to be selected 
     */
    public void selectBrick(int index)
    {
        roadMapPanel.selectBrick(index);
        activateButtons();
    }
    
    /** deselectBricks <p>
     * Deselects all bricks.
     */
    public void deselectBricks()
    {
        roadMapPanel.deselectBricks();
        deactivateButtons();
    }
       
    public ArrayList<Block> analyze(ArrayList<Block> blocks)
    {
        cykParser = new CYKParser();
        return cykParser.parse(blocks, brickLibrary);
    }  
    
    public ArrayList<Chord> getChordsInSelection()
    {
        return RoadMap.getChords(roadMapPanel.getSelection());
    }
    
    
    public BrickLibrary getLibrary()
    {
        return brickLibrary;
    }
        
    public void deactivateButtons()
    {
        flattenButton.setEnabled(false);
        deleteButton.setEnabled(false);
        breakButton.setEnabled(false);
        newBrickButton.setEnabled(false);
        scaleComboBox.setEnabled(false);
    }
    
    public void activateButtons()
    {
        flattenButton.setEnabled(true);
        deleteButton.setEnabled(true);
        breakButton.setEnabled(true);
        newBrickButton.setEnabled(true);
        scaleComboBox.setEnabled(true);
    }
           
    private void toggleSectionBreak()
    {
        
    }
    
    public void initLibraryTree()
    {
        ArrayList<Brick> bricks = new ArrayList(brickLibrary.getMap());
        
        //Collections.sort(bricks);
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        
        ArrayList<DefaultMutableTreeNode> categories = new ArrayList();
        ArrayList<String> categoryNames = new ArrayList();

        
        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode category = null;
        
        for( Iterator<Brick> it = bricks.iterator(); it.hasNext(); )
        {
            Brick brick = it.next();
            String name = brick.getName();
            String type = brick.getType();
            
            node = new DefaultMutableTreeNode(name);
            category = new DefaultMutableTreeNode(type);
            
            int ind = categoryNames.indexOf(type);
            
            if(ind != -1)
                categories.get(ind).add(node);
            else {
                category.add(node);
                categories.add(category);
                root.add(category);
                categoryNames.add(type);
            }   
        }
        
        libraryTreeModel = new DefaultTreeModel(root);
    }
    
    private void addToLibrary(Brick brick)
    {
        try {
            Brick scaledBrick = new Brick(brick);
            scaledBrick.reduceDurations();
            brickLibrary.addBrick(scaledBrick);
            addToLibraryTree(brick.getName());
        } catch( DictionaryException de ) {
            System.err.println("Could not add brick " + brick.getName() + " to Library");
        }
    }
    
    private void addToLibraryTree(String name)
    {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)libraryTreeModel.getRoot();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)root.getLastChild();
        
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(name);
        if(node.toString().equals("UserDefined")) {
            libraryTreeModel.insertNodeInto(newNode, node, node.getChildCount());
        } else {
            DefaultMutableTreeNode newParent = new DefaultMutableTreeNode("UserDefined");
            newParent.add(newNode);
            libraryTreeModel.insertNodeInto(newParent, root, root.getChildCount());
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addBrickDialog;
    private javax.swing.JButton addChordButton;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JButton breakButton;
    private javax.swing.JTextField chordField;
    private javax.swing.JPanel chordPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton dialogAcceptButton;
    private javax.swing.JLabel dialogKeyLabel;
    private javax.swing.JSpinner dialogKeySpinner;
    private javax.swing.JTextField dialogNameField;
    private javax.swing.JLabel dialogNameLabel;
    private javax.swing.JComboBox durationComboBox;
    private javax.swing.JButton flattenButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner keySpinner;
    private javax.swing.JScrollPane libraryScrollPane;
    private javax.swing.JTabbedPane libraryTabbedPane;
    private javax.swing.JTree libraryTree;
    private javax.swing.JButton newBrickButton;
    private javax.swing.JDialog optionsDialog;
    private javax.swing.JButton playButton;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JScrollPane roadMapScrollPane;
    private javax.swing.JMenuBar roadmapMenuBar;
    private javax.swing.JComboBox scaleComboBox;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JButton selectAllBricksButton;
    private javax.swing.JButton sendToNotateButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

/**
  * Sends the currently-selected blocks to a new Notate window called auxNotate.
  *
  * If not blocks are selected, selects them all first.
  *
  * If the road map is empty, does nothing.
  */
    
    public void sendSelectionToNotate() {
        if (roadMapPanel.getNumBlocks() < 1) {
            return;
        }
        if (!roadMapPanel.hasSelection()) {
            selectAllBricks();
        }

        if (auxNotate == null) {
            imp.data.ChordPart chordPart = new imp.data.ChordPart();
            chordPart.addFromRoadMapFrame(this);
            Score score = new Score(chordPart);
            auxNotate = notate.newNotateWithScore(score);
        } else {
            auxNotate.addToChordPartFromRoadMapFrame(this);
        }
        auxNotate.setVisible(true);
        auxNotate.playScore();

    }

/**
  * Plays the currently-selected blocks. The style is determined from the
  * Notate window where this roadmap was opened.
  *
  * If not blocks are selected, selects them all first.
  *
  * If the road map is empty, does nothing.
  */
    
    public void playSelection() {
        if (roadMapPanel.getNumBlocks() < 1) {
            return;
        }
        if (!roadMapPanel.hasSelection()) {
            selectAllBricks();
        }

         ChordPart chordPart = new imp.data.ChordPart();
         chordPart.addFromRoadMapFrame(this);
         Score score = new imp.data.Score(chordPart);
         
         notate.playAscore(score);
    }

    
    public void stopPlayingSelection()
    {
        if(roadMapPanel.hasSelection())
            notate.stopPlayAscore();
    }

}
