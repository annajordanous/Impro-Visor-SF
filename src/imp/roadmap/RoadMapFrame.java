/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AltRoadMapFrame.java
 *
 * Created on Jul 6, 2011, 12:32:17 PM
 */

package imp.roadmap;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.tree.*;
import java.util.Iterator;
import imp.brickdictionary.*;
import java.io.IOException;
import imp.cykparser.*;
import imp.util.ErrorLog;


/**
 *
 * @author August Toman-Yih
 */

public class RoadMapFrame extends javax.swing.JFrame {
    
    private Image buffer;
    private Image bufferRoadMap;
    private Image bufferNewBrick;
    
    private PreviewPanel previewPanel;
    
    private RoadMapPanel roadMapPanel;
    
    private NewBrickDialog newBrickDialog;
    
    private BrickLibrary brickLibrary;
    
    private CYKParser cykParser;
    
    private ArrayList<GraphicBrick> draggedBricks = new ArrayList();
    private int selectionStart = -1;
    private int selectionEnd = -1;
    
    private ArrayList<GraphicBrick> clipboard = new ArrayList();
    
    private Object[] durationChoices = {1920,1440,960,480,240,120};
    
    private int bufferWidth  = 1024;
    private int bufferHeight = 200;
    
    private int RMbufferWidth  = 2048;
    private int RMbufferHeight = 1920;
   
    private DefaultTreeModel libraryTreeModel;


    /** Creates new form AltRoadMapFrame */
    public RoadMapFrame() {
        previewPanel = new PreviewPanel(this);
        roadMapPanel = new RoadMapPanel(this);
        newBrickDialog = new NewBrickDialog(this);
        
        try {
            brickLibrary = BrickLibrary.processDictionary();
        } catch (IOException e) {
            ErrorLog.log(ErrorLog.FATAL, "Error opening brick dictionary");
            System.exit(-1);
        } catch (DictionaryException de) {
            ErrorLog.log(ErrorLog.FATAL, "Error processing brick dictionary");
            System.exit(-1);
        }
        
        initLibraryTree();
                
        initComponents();
        
        initBuffer();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addBrickDialog = new javax.swing.JDialog();
        dialogNameLabel = new javax.swing.JLabel();
        dialogKeyLabel = new javax.swing.JLabel();
        dialogNameField = new javax.swing.JTextField();
        dialogKeySpinner = new javax.swing.JSpinner();
        dialogAcceptButton = new javax.swing.JButton();
        toolBar = new javax.swing.JToolBar();
        deleteButton = new javax.swing.JButton();
        flattenButton = new javax.swing.JButton();
        breakButton = new javax.swing.JButton();
        scaleLabel = new javax.swing.JLabel();
        scaleComboBox = new javax.swing.JComboBox();
        newBrickButton = new javax.swing.JButton();
        analyzeButton = new javax.swing.JButton();
        roadMapScrollPane = new javax.swing.JScrollPane(roadMapPanel);
        libraryTabbedPane = new javax.swing.JTabbedPane();
        libraryScrollPane = new javax.swing.JScrollPane();
        libraryTree = new javax.swing.JTree();
        chordPanel = new javax.swing.JPanel();
        chordField = new javax.swing.JTextField();
        addChordButton = new javax.swing.JButton();
        keySpinner = new javax.swing.JSpinner();
        durationComboBox = new javax.swing.JComboBox(durationChoices);
        previewScrollPane = new javax.swing.JScrollPane(previewPanel);
        roadmapMenuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem helpMenuItem = new javax.swing.JMenuItem();

        addBrickDialog.setMinimumSize(new java.awt.Dimension(200, 110));
        addBrickDialog.setName("addBrickDialog"); // NOI18N
        addBrickDialog.setPreferredSize(new java.awt.Dimension(200, 110));
        addBrickDialog.setResizable(false);
        addBrickDialog.setSize(new java.awt.Dimension(200, 110));
        addBrickDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        dialogNameLabel.setText("Name:"); // NOI18N
        dialogNameLabel.setName("dialogNameLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        addBrickDialog.getContentPane().add(dialogNameLabel, gridBagConstraints);

        dialogKeyLabel.setText("Key:"); // NOI18N
        dialogKeyLabel.setName("dialogKeyLabel"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        addBrickDialog.getContentPane().add(dialogKeyLabel, gridBagConstraints);

        dialogNameField.setText("BrickName"); // NOI18N
        dialogNameField.setName("dialogNameField"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 3);
        addBrickDialog.getContentPane().add(dialogNameField, gridBagConstraints);

        dialogKeySpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"}));
        dialogKeySpinner.setName("dialogKeySpinner"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
        addBrickDialog.getContentPane().add(dialogKeySpinner, gridBagConstraints);

        dialogAcceptButton.setText("Accept"); // NOI18N
        dialogAcceptButton.setName("dialogAcceptButton"); // NOI18N
        dialogAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogAccepted(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        addBrickDialog.getContentPane().add(dialogAcceptButton, gridBagConstraints);

        setTitle("Road Map\n"); // NOI18N
        setMinimumSize(new java.awt.Dimension(830, 600));
        setName("Form"); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setMaximumSize(new java.awt.Dimension(100, 60));
        toolBar.setMinimumSize(new java.awt.Dimension(500, 50));
        toolBar.setName("toolBar"); // NOI18N
        toolBar.setPreferredSize(new java.awt.Dimension(500, 50));

        deleteButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        deleteButton.setText("Delete"); // NOI18N
        deleteButton.setToolTipText("Delete the selected bricks and chords."); // NOI18N
        deleteButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setMaximumSize(new java.awt.Dimension(70, 30));
        deleteButton.setMinimumSize(new java.awt.Dimension(70, 30));
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.setPreferredSize(new java.awt.Dimension(70, 30));
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonPressed(evt);
            }
        });
        toolBar.add(deleteButton);

        flattenButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        flattenButton.setText("Flatten"); // NOI18N
        flattenButton.setToolTipText("Flatten selected bricks into their constituent chords."); // NOI18N
        flattenButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        flattenButton.setFocusable(false);
        flattenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flattenButton.setMaximumSize(new java.awt.Dimension(70, 30));
        flattenButton.setMinimumSize(new java.awt.Dimension(70, 30));
        flattenButton.setName("flattenButton"); // NOI18N
        flattenButton.setPreferredSize(new java.awt.Dimension(70, 30));
        flattenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flattenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenButtonPressed(evt);
            }
        });
        toolBar.add(flattenButton);

        breakButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        breakButton.setText("Break"); // NOI18N
        breakButton.setToolTipText("Break this brick into constitutent parts."); // NOI18N
        breakButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        breakButton.setFocusable(false);
        breakButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        breakButton.setMaximumSize(new java.awt.Dimension(70, 30));
        breakButton.setMinimumSize(new java.awt.Dimension(70, 30));
        breakButton.setName("breakButton"); // NOI18N
        breakButton.setPreferredSize(new java.awt.Dimension(70, 30));
        breakButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        breakButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                breakButtonPressed(evt);
            }
        });
        toolBar.add(breakButton);

        scaleLabel.setName("scaleLabel"); // NOI18N
        toolBar.add(scaleLabel);

        scaleComboBox.setToolTipText("Scale the length of the brick or chord by a factor."); // NOI18N
        scaleComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Scale Duration", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 9))); // NOI18N
        scaleComboBox.setMaximumSize(new java.awt.Dimension(100, 45));
        scaleComboBox.setMinimumSize(new java.awt.Dimension(60, 30));
        scaleComboBox.setName("scaleComboBox"); // NOI18N
        scaleComboBox.setPreferredSize(new java.awt.Dimension(60, 30));
        scaleComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scaleComboBoxscaleComboReleased(evt);
            }
        });
        scaleComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                scaleComboBoxscaleChanged(evt);
            }
        });
        scaleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleComboBoxscaleChosen(evt);
            }
        });
        toolBar.add(scaleComboBox);

        newBrickButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        newBrickButton.setText("New Brick"); // NOI18N
        newBrickButton.setToolTipText("Define a new brick in the dictionary."); // NOI18N
        newBrickButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        newBrickButton.setFocusable(false);
        newBrickButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newBrickButton.setMaximumSize(new java.awt.Dimension(70, 30));
        newBrickButton.setMinimumSize(new java.awt.Dimension(70, 30));
        newBrickButton.setName("newBrickButton"); // NOI18N
        newBrickButton.setPreferredSize(new java.awt.Dimension(70, 30));
        newBrickButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newBrickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBrickButtonPressed(evt);
            }
        });
        toolBar.add(newBrickButton);

        analyzeButton.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        analyzeButton.setToolTipText("Analyze the selection into bricks."); // NOI18N
        analyzeButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        analyzeButton.setFocusable(false);
        analyzeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        analyzeButton.setLabel("Analyze"); // NOI18N
        analyzeButton.setMaximumSize(new java.awt.Dimension(70, 30));
        analyzeButton.setMinimumSize(new java.awt.Dimension(70, 30));
        analyzeButton.setName("analyzeButton"); // NOI18N
        analyzeButton.setPreferredSize(new java.awt.Dimension(70, 30));
        analyzeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonPressed(evt);
            }
        });
        toolBar.add(analyzeButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.05;
        getContentPane().add(toolBar, gridBagConstraints);

        roadMapScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        roadMapScrollPane.setToolTipText("The roadmap.\n"); // NOI18N
        roadMapScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        roadMapScrollPane.setMinimumSize(new java.awt.Dimension(600, 400));
        roadMapScrollPane.setName("roadMapScrollPane"); // NOI18N
        roadMapScrollPane.setPreferredSize(new java.awt.Dimension(800, 900));
        roadMapScrollPane.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                roadMapScrollPaneroadMapMouseWheelMoved(evt);
            }
        });
        roadMapScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapClicked(evt);
            }
        });
        roadMapScrollPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                roadMapScrollPaneroadMapDragged(evt);
            }
        });
        roadMapScrollPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roadMapScrollPaneroadMapKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roadMapScrollPaneroadMapKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 0.95;
        getContentPane().add(roadMapScrollPane, gridBagConstraints);

        libraryTabbedPane.setMinimumSize(new java.awt.Dimension(300, 200));
        libraryTabbedPane.setName("libraryTabbedPane"); // NOI18N
        libraryTabbedPane.setPreferredSize(new java.awt.Dimension(300, 500));

        libraryScrollPane.setName("libraryScrollPane"); // NOI18N

        libraryTree.setModel(libraryTreeModel);
        libraryTree.setMaximumSize(new java.awt.Dimension(300, 1000));
        libraryTree.setMinimumSize(new java.awt.Dimension(200, 200));
        libraryTree.setName("libraryTree"); // NOI18N
        libraryTree.setPreferredSize(new java.awt.Dimension(200, 600));
        libraryTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        libraryTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                libraryTreeSelected(evt);
            }
        });
        libraryScrollPane.setViewportView(libraryTree);

        libraryTabbedPane.addTab("Brick Dictionary", null, libraryScrollPane, "Dictionary of available bricks.\n");

        chordPanel.setName("chordPanel"); // NOI18N
        chordPanel.setLayout(new java.awt.GridBagLayout());

        chordField.setName("chordField"); // NOI18N
        chordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chordFieldActionPerformed(evt);
            }
        });
        chordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chordFieldFocusGained(evt);
            }
        });
        chordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chordFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        chordPanel.add(chordField, gridBagConstraints);

        addChordButton.setText("Enter Chord"); // NOI18N
        addChordButton.setToolTipText("Enter this chord into roadmap."); // NOI18N
        addChordButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addChordButton.setMinimumSize(new java.awt.Dimension(40, 40));
        addChordButton.setName("addChordButton"); // NOI18N
        addChordButton.setPreferredSize(new java.awt.Dimension(100, 30));
        addChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChordButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        chordPanel.add(addChordButton, gridBagConstraints);

        libraryTabbedPane.addTab("Chords", null, chordPanel, "Enter individual chords by name.\n");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.8;
        getContentPane().add(libraryTabbedPane, gridBagConstraints);

        keySpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C"}));
        keySpinner.setToolTipText("Select the key for this brick."); // NOI18N
        keySpinner.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Key, Root\n\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande 11", 0, 11))); // NOI18N
        keySpinner.setName("keySpinner"); // NOI18N
        keySpinner.setPreferredSize(new java.awt.Dimension(76, 54));
        keySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                keySpinnerChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.02;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(keySpinner, gridBagConstraints);

        durationComboBox.setSelectedItem(480);
        durationComboBox.setToolTipText("Set the duration of this brick (in slots)."); // NOI18N
        durationComboBox.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Duration\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande 11", 0, 11))); // NOI18N
        durationComboBox.setMinimumSize(new java.awt.Dimension(52, 54));
        durationComboBox.setName("durationComboBox"); // NOI18N
        durationComboBox.setPreferredSize(new java.awt.Dimension(52, 54));
        durationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationComboBoxdurationChosen(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.02;
        getContentPane().add(durationComboBox, gridBagConstraints);

        previewScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brick Preview\n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 0, 11))); // NOI18N
        previewScrollPane.setDoubleBuffered(true);
        previewScrollPane.setMaximumSize(new java.awt.Dimension(32767, 100));
        previewScrollPane.setMinimumSize(new java.awt.Dimension(800, 80));
        previewScrollPane.setName("previewScrollPane"); // NOI18N
        previewScrollPane.setPreferredSize(new java.awt.Dimension(800, 80));
        previewScrollPane.setSize(new java.awt.Dimension(800, 80));
        previewScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneClicked(evt);
            }
        });
        previewScrollPane.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                previewScrollPanepreviewPaneDragged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(previewScrollPane, gridBagConstraints);

        roadmapMenuBar.setName("roadmapMenuBar"); // NOI18N

        fileMenu.setText("File"); // NOI18N
        fileMenu.setMaximumSize(new java.awt.Dimension(100, 40));
        fileMenu.setMinimumSize(new java.awt.Dimension(50, 20));
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.setPreferredSize(new java.awt.Dimension(50, 20));

        exitMenuItem.setLabel("Quit"); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIhandler(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        roadmapMenuBar.add(fileMenu);

        helpMenu.setText("Help"); // NOI18N
        helpMenu.setToolTipText("Help"); // NOI18N
        helpMenu.setMaximumSize(new java.awt.Dimension(100, 40));
        helpMenu.setMinimumSize(new java.awt.Dimension(50, 20));
        helpMenu.setName("helpMenu"); // NOI18N
        helpMenu.setPreferredSize(new java.awt.Dimension(50, 20));

        helpMenuItem.setLabel("Help"); // NOI18N
        helpMenuItem.setName("helpMenuItem"); // NOI18N
        helpMenu.add(helpMenuItem);

        roadmapMenuBar.add(helpMenu);

        setJMenuBar(roadmapMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void libraryTreeSelected(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_libraryTreeSelected
        setPreview();
}//GEN-LAST:event_libraryTreeSelected

    private void chordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chordFieldActionPerformed
        addChord();
        chordField.selectAll();
}//GEN-LAST:event_chordFieldActionPerformed

    private void chordFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chordFieldFocusGained
        chordField.selectAll();
}//GEN-LAST:event_chordFieldFocusGained

    private void chordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chordFieldKeyPressed
        switch (evt.getKeyCode()) {
            //case 38: durationComboBox.setSelectedIndex(durationComboBox.getSelectedIndex()+1); break;
            //case 40: keySpinner.setValue(keySpinner.getPreviousValue()); break;
            default:                            break;
        }
        System.out.println(evt.getKeyCode());
}//GEN-LAST:event_chordFieldKeyPressed

    private void addChordButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChordButtonPressed
        addChord();
}//GEN-LAST:event_addChordButtonPressed

    private void keySpinnerChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_keySpinnerChanged
        setPreviewKey();
}//GEN-LAST:event_keySpinnerChanged

    private void previewScrollPanepreviewPaneReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneReleased
        dropFromPreview(evt.getX(), evt.getY());
}//GEN-LAST:event_previewScrollPanepreviewPaneReleased

    private void previewScrollPanepreviewPaneClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneClicked
        System.out.println("Preview Clicked");
        previewPanel.draw();
}//GEN-LAST:event_previewScrollPanepreviewPaneClicked

    private void previewScrollPanepreviewPaneDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewScrollPanepreviewPaneDragged
        //System.out.println("Preview Dragged");
        dragFromPreview(evt.getX(), evt.getY());
}//GEN-LAST:event_previewScrollPanepreviewPaneDragged

    private void durationComboBoxdurationChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationComboBoxdurationChosen
        setPreviewDuration();
}//GEN-LAST:event_durationComboBoxdurationChosen

    private void roadMapScrollPaneroadMapMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapMouseWheelMoved
        transposeSelection(evt.getWheelRotation());
}//GEN-LAST:event_roadMapScrollPaneroadMapMouseWheelMoved

    private void roadMapScrollPaneroadMapReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapReleased
        //System.out.println("Mouse released");
        dropCurrentBrick(evt.getX(), evt.getY());
}//GEN-LAST:event_roadMapScrollPaneroadMapReleased

    private void roadMapScrollPaneroadMapClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapClicked
        int index = roadMapPanel.getBrickIndexAt(evt.getX(), evt.getY());
        
        if(index != -1) {
            if(evt.isShiftDown())
                selectBricks(index);
            else
                selectBrick(index);
        } else
            deselectBricks();
        
        roadMapScrollPane.requestFocus();
}//GEN-LAST:event_roadMapScrollPaneroadMapClicked

    private void roadMapScrollPaneroadMapDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapDragged
        //System.out.println("roadMapDragged");
        dragSelectedBricks(evt.getX(), evt.getY());
}//GEN-LAST:event_roadMapScrollPaneroadMapDragged

    private void roadMapScrollPaneroadMapKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapKeyPressed
        System.out.println(evt.getKeyCode());
        switch (evt.getKeyCode()) {
            case 127: deleteSelection();                                break;
            case 67: if(evt.isMetaDown()) copySelection();              break;
            case 86: if(evt.isMetaDown()) pasteSelection();             break;
            case 88: if(evt.isMetaDown()) cutSelection();               break;
            default:                                                    break;
        }
}//GEN-LAST:event_roadMapScrollPaneroadMapKeyPressed

    private void roadMapScrollPaneroadMapKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roadMapScrollPaneroadMapKeyReleased
        switch (evt.getKeyCode()) {
            default:                            break;
        }
}//GEN-LAST:event_roadMapScrollPaneroadMapKeyReleased

    private void deleteButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonPressed
        deleteSelection();
}//GEN-LAST:event_deleteButtonPressed

    private void flattenButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenButtonPressed
        flattenSelection();
}//GEN-LAST:event_flattenButtonPressed

    private void breakButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_breakButtonPressed
        breakSelection();
}//GEN-LAST:event_breakButtonPressed

    private void scaleComboBoxscaleComboReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scaleComboBoxscaleComboReleased
        System.out.println("Combo released");
}//GEN-LAST:event_scaleComboBoxscaleComboReleased

    private void scaleComboBoxscaleChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_scaleComboBoxscaleChanged
        //scaleSelection();
}//GEN-LAST:event_scaleComboBoxscaleChanged

    private void scaleComboBoxscaleChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleComboBoxscaleChosen
        scaleSelection();
        scaleComboBox.setSelectedItem("x1");
}//GEN-LAST:event_scaleComboBoxscaleChosen

    private void newBrickButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBrickButtonPressed
        System.out.println("New Brick Button Pressed");
        dialogNameField.setText("NewBrick");
        dialogKeySpinner.setValue("C");
        addBrickDialog.setVisible(true);
}//GEN-LAST:event_newBrickButtonPressed

    private void analyzeButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonPressed
        analyzeSelection();
}//GEN-LAST:event_analyzeButtonPressed

    private void exitMIhandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIhandler
        // TODO add your handling code here:
    }//GEN-LAST:event_exitMIhandler

    private void dialogAccepted(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogAccepted
        addBrickDialog.setVisible(false);
        makeBrickFromSelection();
    }//GEN-LAST:event_dialogAccepted

    /** InitBuffer <p>
     *  
     * Initializes the buffers for the roadmap and preview panel.
     */
    private void initBuffer()
    {
        buffer = new java.awt.image.BufferedImage(bufferWidth, bufferHeight, BufferedImage.TYPE_INT_RGB);
        bufferNewBrick = new java.awt.image.BufferedImage(bufferWidth, bufferHeight, BufferedImage.TYPE_INT_RGB);
        bufferRoadMap = new java.awt.image.BufferedImage(RMbufferWidth, RMbufferHeight, BufferedImage.TYPE_INT_RGB);
        previewPanel.setBuffer(buffer);
        newBrickDialog.setBuffer(bufferNewBrick);
        roadMapPanel.setBuffer(bufferRoadMap);
        roadMapPanel.draw();
        previewPanel.draw();
    }
    

    /** setBackground <p>
     * Paints the image white.
     * 
     * @param image, an Image
     */
    public void setBackground(Image image)
    {
        Graphics graphics = image.getGraphics();
        graphics.setColor(Color.white);
        graphics.fillRect(0, 0, image.getWidth(null), image.getHeight(null));
    }
    
    /** setBackgrounds <p>
     * Sets the background of each buffer.
     */
    public void setBackgrounds()
    {
        setBackground(buffer);
        setBackground(bufferRoadMap);
        setBackground(bufferNewBrick);
    }
       
    /** dragSelectedBricks <p>
     * Implements dragging behavior.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dragSelectedBricks(int x, int y)
    {   
        int index = roadMapPanel.getBrickIndexAt(x, y);
        if( draggedBricks.isEmpty() ) {
            
            if( index != -1 ) {
                if(!roadMapPanel.getBrick(index).selected) {
                    selectBrick(index);
                } else if(selectionStart != -1 && selectionEnd != -1)
                    draggedBricks = roadMapPanel.removeBricks(selectionStart, selectionEnd);
            }
        }
        
        if( !draggedBricks.isEmpty() ) {
            GraphicBrick brick = draggedBricks.get(0);
            brick.setPos(x,y);
            roadMapPanel.draw();
            brick.drawNoWrap(bufferRoadMap.getGraphics());
        }
    }
    
    /** dropCurrentBrick <p>
     * Implements dropping behavior.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dropCurrentBrick(int x, int y)
    {   
        if( !draggedBricks.isEmpty() ) {
            int index = roadMapPanel.getSlotAt(x, y);
            roadMapPanel.addAll(index, draggedBricks);
            selectionStart = index;
            selectionEnd = index+draggedBricks.size()-1;
            draggedBricks.clear();
            
        }
        roadMapPanel.placeBricks();
        System.out.println("Selection from " + selectionStart + " to " + selectionEnd);
    }
    
    /** dragFromPreview <p>
     * Implements dragging behavior from the preview window.
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse
     */
    public void dragFromPreview(int x, int y) 
    {        
        if( draggedBricks.isEmpty() ) {
            deselectBricks();
            
            if (previewPanel.currentBrick != null) {
                previewPanel.currentBrick.selected = true;
                draggedBricks.add(previewPanel.currentBrick);
                setPreview();
            }
        }
        dragSelectedBricks(x + libraryTabbedPane.getX(), y + previewScrollPane.getY());
    }
    
    /** dropFromPreivew <p>
     * Implements dropping behavior from the preview window;
     * 
     * @param x, the x-coordinate of the mouse
     * @param y, the y-coordinate of the mouse 
     */
    public void dropFromPreview(int x, int y)
    {
        dropCurrentBrick(x + libraryTabbedPane.getX(), y + previewScrollPane.getY());
        activateButtons();
    }
    
    /** setPreview <p>
     * Sets the preview brick, as well as its duration and key.
     */
    public void setPreview()
    {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)libraryTree.getSelectionPath().getLastPathComponent();
        try {
            if( node.isLeaf() ) {
                Brick brick = brickLibrary.getBrick(node.toString(), 0);

                previewPanel.setBrick( brick );

                setPreviewKey();
                setPreviewDuration();
            }
        } catch( DictionaryException de) {
            
        }
    }
    
    /** setPreviewKey <p>
     * Sets the key of the brick in the preview pane to the key chosen by
     * the key spinner.
     */
    public void setPreviewKey()
    {
        String key = (String)keySpinner.getValue();
        if(BrickLibrary.isValidKey(key))
            previewPanel.setKey( key );
    }
    
    /** setPreviewDuration <p>
     * Sets the duration of the brick in the preview pane to the key chosen by
     * the duration combo box.
     */
    public void setPreviewDuration()
    {
        previewPanel.setDuration((Integer)durationChoices[durationComboBox.getSelectedIndex()]);
        previewPanel.draw();
    }
    
    /** addChord <p>
     * Adds the chord inputted in the chord field to the roadmap.
     */
    public void addChord()
    {
        Chord chord = new Chord(chordField.getText(),(Integer)durationChoices[durationComboBox.getSelectedIndex()]);
        roadMapPanel.add(new GraphicBrick(chord));
        roadMapPanel.placeBricks();
    }
        
    /** selectBricks <p>
     * Adds the brick at index to the selection, either extending the selection
     * or reducing it depending on whether the brick is selected.
     * 
     * @param index, the index of the brick to be selected
     */
    public void selectBricks(int index)
    {
        if(selectionStart == -1 && selectionEnd == -1)
            selectionStart = selectionEnd = index;
        else {
            if(index < selectionStart)
                selectionStart = index;
            else if (index > selectionEnd)
                selectionEnd = index;
            else {
                selectBrick(index);
            }
        }
        

        for(int i = selectionStart; i <= selectionEnd; ) {
            roadMapPanel.getBrick(i).selected = true;
            roadMapPanel.drawBrick(i);
            i++;
        }
        
        roadMapPanel.drawKeyMap();
        activateButtons();   
    }
    
    /** selectBrick <p>
     * Selects only the brick at index, deselecting all other bricks.
     * 
     * @param index, the index of the brick to be selected 
     */
    public void selectBrick(int index)
    {
        deselectBricks();
        selectionStart = selectionEnd = index;
        roadMapPanel.getBrick(index).setSelected(true);
        roadMapPanel.drawBrick(index);
        
        roadMapPanel.drawKeyMap();
        activateButtons();
    }
    
    /** deselectBricks <p>
     * Deselects all bricks.
     */
    public void deselectBricks()
    {
        if(selectionStart != -1 && selectionEnd != -1) {
            deselectBricks(selectionStart, selectionEnd);
            selectionStart = selectionEnd = -1;
        }
        
        roadMapPanel.drawKeyMap();
        deactivateButtons();
    }
    
    /** deselectBricks <p>
     * deselects the bricks between index start and end, inclusive.
     * 
     * @param start
     * @param end 
     */
    public void deselectBricks(int start, int end)
    {
        for(int i = start; i <= end; ) {
            roadMapPanel.getBrick(i).setSelected(false);
            roadMapPanel.drawBrick(i);
            i++;
        }
    }
    
    public void deleteSelection()
    {
        System.out.println("Deleting between " + selectionStart + " and " + selectionEnd);
        if(selectionStart != -1 && selectionEnd != -1) {
            roadMapPanel.removeBricks(selectionStart, selectionEnd);
            selectionStart = selectionEnd = -1;
            roadMapPanel.placeBricks();
        }
        deactivateButtons();
    }
    
    public void breakSelection()
    {
        if(selectionStart != -1 && selectionEnd != -1) {
            ArrayList<GraphicBrick> bricks = roadMapPanel.removeBricks(selectionStart, selectionEnd);
            ArrayList<GraphicBrick> newBricks = new ArrayList();
            
            for( Iterator<GraphicBrick> it = bricks.iterator(); it.hasNext(); )
                newBricks.addAll(it.next().seperate());
            
            roadMapPanel.addAll(selectionStart, newBricks);
            
            selectionEnd = selectionStart;
            
            selectBricks(selectionStart + newBricks.size() - 1);
            
            roadMapPanel.placeBricks();
        }
    }
    
    public void makeBrickFromSelection()
    {
        if(selectionStart != -1 && selectionEnd != -1 && selectionStart != selectionEnd) {
            ArrayList<GraphicBrick> bricks = roadMapPanel.removeBricks(selectionStart, selectionEnd);
                       
            //makeNewBrick(analyze(bricks));
            
            long key = BrickLibrary.keyNameToNum((String) dialogKeySpinner.getValue());
            
            GraphicBrick brick = makeNewBrick(bricks, key, dialogNameField.getText());
            
            roadMapPanel.insert(selectionStart, brick);
            
            selectionEnd = selectionStart;
            
            brick.setSelected(true);
        }
    }
    
    public GraphicBrick makeNewBrick(ArrayList<GraphicBrick> bricks, long key, String name)
    {
        ArrayList<Block> blocks = new ArrayList();
        for( Iterator<GraphicBrick> it = bricks.iterator(); it.hasNext(); )
            blocks.add(it.next().getBlock());
        
        Brick newBlock = new Brick(name, key, "UserDefined", blocks);

        addToLibrary(newBlock);
        
        return new GraphicBrick(newBlock);
    }
    
    public void setBrickKey(GraphicBrick brick, long key)
    {
        brick.setKey(key);
    }
    
    public void transposeBrick(GraphicBrick brick, long diff)
    {
        brick.transpose(diff);
        roadMapPanel.updateBricks();
    }
    
    public void transposeSelection(long diff)
    {
        if( selectionStart != -1 && selectionEnd != -1 ) {
            for( int ind = selectionStart; ind <= selectionEnd; ) {
                transposeBrick(roadMapPanel.getBrick(ind), 12-diff%12);
                ind++;
            }
        }
    }
    
    public void analyzeSelection()
    {
        ArrayList<GraphicBrick> bricks;
        
        if( selectionStart != -1 && selectionEnd != -1 ) {
            bricks = roadMapPanel.removeBricks(selectionStart, selectionEnd);
            selectionEnd = selectionStart;
            
            System.out.println(bricks);
            
            bricks = analyze(bricks);
            
            roadMapPanel.addAll(selectionStart, bricks);
            selectBricks(selectionStart + bricks.size() - 1);
        } else {
            bricks = roadMapPanel.removeBricks();
            
            System.out.println(bricks);
            
            bricks = analyze(bricks);
            
            roadMapPanel.addAll(bricks);
        }
        
        roadMapPanel.placeBricks();
        
    }
    
    public ArrayList<GraphicBrick> analyze(ArrayList<GraphicBrick> bricks)
    {
        cykParser = new CYKParser();
        ArrayList<Block> blocks = getBlocks(bricks);
        blocks = cykParser.parse(blocks, brickLibrary);
        return makeBricks(blocks);
    }
    
    public ArrayList<Block> getBlocks(ArrayList<GraphicBrick> bricks)
    {
        ArrayList<Block> blocks = new ArrayList<Block>();
        
        for( Iterator<GraphicBrick> it = bricks.iterator(); it.hasNext(); )
            blocks.add(it.next().getBlock());
        
        return blocks;
    }
    
    public ArrayList<GraphicBrick> makeBricks(ArrayList<Block> blocks)
    {
        ArrayList<GraphicBrick> bricks = new ArrayList<GraphicBrick>();
        
        for( Iterator<Block> it = blocks.iterator(); it.hasNext(); )
            bricks.add(new GraphicBrick(it.next()));
        
        return bricks;
    }
    
    public void flattenSelection()
    {
        ArrayList<GraphicBrick> bricks = roadMapPanel.removeBricks(selectionStart, selectionEnd);
        ArrayList<GraphicBrick> newBricks = new ArrayList();
        
        for( Iterator<GraphicBrick> it = bricks.iterator(); it.hasNext(); )
        {
            newBricks.addAll(it.next().flatten());
        }
        
        roadMapPanel.addAll(selectionStart, newBricks);
        selectionEnd = selectionStart;
        selectBricks(selectionStart + newBricks.size() - 1);
        
        roadMapPanel.placeBricks();
    }
    
    public BrickLibrary getLibrary()
    {
        return brickLibrary;
    }
    
    private void setScaleComboBox()
    {
        resetScaleComboBox();
        
        System.out.println("Adding stuff to scale");
        
        scaleComboBox.addItem("x1");
        
        ArrayList<GraphicBrick> bricks = roadMapPanel.getBricks(selectionStart, selectionEnd);
        boolean valid;
        for( int i = 2; i <= 5 ; i++ ) {
            
            valid = true;
            
            for( GraphicBrick brick : bricks ) {
                if( ! brick.isValidScale(i) ) {
                    valid = false;
                    break;
                }
            }
            
            if(valid)
                scaleComboBox.insertItemAt("/"+i,0);
            
        }
        
        for( int i = 2; i <= 5; i++ )
            scaleComboBox.addItem("x"+i);
        
        System.out.println("Done adding stuff to scale");
    }
    
    private void resetScaleComboBox()
    {
        scaleComboBox.removeAllItems();
        scaleComboBox.setSelectedItem(null);
    }
    
    public void deactivateButtons()
    {
        flattenButton.setEnabled(false);
        deleteButton.setEnabled(false);
        breakButton.setEnabled(false);
        newBrickButton.setEnabled(false);
        scaleComboBox.setEnabled(false);
    }
    
    public void activateButtons()
    {
        setScaleComboBox();
        flattenButton.setEnabled(true);
        deleteButton.setEnabled(true);
        breakButton.setEnabled(true);
        newBrickButton.setEnabled(true);
        scaleComboBox.setEnabled(true);
    }
    
    public void scaleSelection()
    {
        System.out.println("Attempting to scale selection");
        
        if(!scaleComboBox.isEnabled())
            System.out.println("Scale Combo Box not enabled");
        
        if(selectionStart == -1 || selectionEnd == -1 || !scaleComboBox.isEnabled())
            return;
        
        String choice = (String)scaleComboBox.getSelectedItem();
        
        if( choice == null )
            return;
        
        long scale = choice.charAt(1) - 48; // set to integer
        
        if( choice.charAt(0) == 47) //  / = division
            scale = -scale;
        
        System.out.println("Scale: " + scale);
        
        for( GraphicBrick brick : roadMapPanel.getBricks(selectionStart, selectionEnd))
            brick.adjustDuration(scale);
        
        roadMapPanel.placeBricks();
        //setScaleComboBox();
                
    }
    
    public void copySelection()
    {
        System.out.println("Copy!");
        if(selectionStart != -1 && selectionEnd != -1) {
            ArrayList<GraphicBrick> bricks = roadMapPanel.getBricks(selectionStart, selectionEnd);
            
            clipboard = cloneBricks(bricks);
        }
            
    }
    
    public void cutSelection()
    {
        System.out.println("Cut!");
        if(selectionStart != -1 && selectionEnd != -1) {
            clipboard = roadMapPanel.removeBricks(selectionStart, selectionEnd);
            roadMapPanel.placeBricks();
        }
    }
    
    public void pasteSelection()
    {
        System.out.println("Paste!");
        
        roadMapPanel.addAll(cloneBricks(clipboard));
        
        roadMapPanel.placeBricks();
    }
    
    public ArrayList<GraphicBrick> cloneBricks(ArrayList<GraphicBrick> bricks)
    {
        ArrayList<GraphicBrick> newBricks = new ArrayList();
        
        for(GraphicBrick brick : bricks)
                newBricks.add(new GraphicBrick(brick));
        
        return newBricks;
    }
     
    public void initLibraryTree()
    {
        ArrayList<Brick> bricks = new ArrayList(brickLibrary.getMap());
        
        //Collections.sort(bricks);
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        
        ArrayList<DefaultMutableTreeNode> categories = new ArrayList();
        ArrayList<String> categoryNames = new ArrayList();

        
        DefaultMutableTreeNode node = null;
        DefaultMutableTreeNode category = null;
        
        for( Iterator<Brick> it = bricks.iterator(); it.hasNext(); )
        {
            Brick brick = it.next();
            String name = brick.getName();
            String type = brick.getType();
            
            node = new DefaultMutableTreeNode(name);
            category = new DefaultMutableTreeNode(type);
            
            int ind = categoryNames.indexOf(type);
            
            if(ind != -1)
                categories.get(ind).add(node);
            else {
                category.add(node);
                categories.add(category);
                root.add(category);
                categoryNames.add(type);
            }   
        }
        
        libraryTreeModel = new DefaultTreeModel(root);
    }
    
    private void addToLibrary(Brick brick)
    {
        try {
            Brick scaledBrick = new Brick(brick);
            scaledBrick.reduceDurations();
            brickLibrary.addBrick(scaledBrick);
            addToLibraryTree(brick.getName());
        } catch( DictionaryException de ) {
            System.err.println("Could not add brick " + brick.getName() + " to Library");
        }
    }
    
    private void addToLibraryTree(String name)
    {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)libraryTreeModel.getRoot();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)root.getLastChild();
        
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(name);
        if(node.toString().equals("UserDefined")) {
            libraryTreeModel.insertNodeInto(newNode, node, node.getChildCount());
        } else {
            DefaultMutableTreeNode newParent = new DefaultMutableTreeNode("UserDefined");
            newParent.add(newNode);
            libraryTreeModel.insertNodeInto(newParent, root, root.getChildCount());
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addBrickDialog;
    private javax.swing.JButton addChordButton;
    private javax.swing.JButton analyzeButton;
    private javax.swing.JButton breakButton;
    private javax.swing.JTextField chordField;
    private javax.swing.JPanel chordPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton dialogAcceptButton;
    private javax.swing.JLabel dialogKeyLabel;
    private javax.swing.JSpinner dialogKeySpinner;
    private javax.swing.JTextField dialogNameField;
    private javax.swing.JLabel dialogNameLabel;
    private javax.swing.JComboBox durationComboBox;
    private javax.swing.JButton flattenButton;
    private javax.swing.JSpinner keySpinner;
    private javax.swing.JScrollPane libraryScrollPane;
    private javax.swing.JTabbedPane libraryTabbedPane;
    private javax.swing.JTree libraryTree;
    private javax.swing.JButton newBrickButton;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JScrollPane roadMapScrollPane;
    private javax.swing.JMenuBar roadmapMenuBar;
    private javax.swing.JComboBox scaleComboBox;
    private javax.swing.JLabel scaleLabel;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
