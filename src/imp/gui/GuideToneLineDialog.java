/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2005-2012 Robert Keller and Harvey Mudd College XML export code
 * is also Copyright (C) 2009-2010 Nicolas Froment (aka Lasconic).
 *
 * Impro-Visor is free software; you can redistribute it and/or modifyc it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package imp.gui;

import imp.Constants;
import imp.data.Chord;
import imp.data.GuideLineGenerator;
import imp.data.MelodyPart;
import imp.data.Note;
import imp.data.NoteSymbol;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import imp.gui.Notate.Mode;
import imp.util.Preferences;
import javax.swing.JPanel;
import polya.Polylist;

/**
 * Display that lets the user control the options for generating a guide 
 * tone line.
 * @author Mikayla Konst and Carli Lessard
 */
public class GuideToneLineDialog extends javax.swing.JDialog implements Constants {

    private final Notate notate;
    private final TransformPanel transformationPanel;
    
    //the default keys that are initially clicked
    //only used once, in the constructor
    //after that, previous limits passed to range chooser
    private static final int [] bassDefaults = {G2, C4};
    private static final int [] trebleDefaults = {C4, G5};
    private static final int [] grandDefaults = {G2, G5};
    
    //range limits
    private int [] range;
    private static final int LOW = 0;
    private static final int HIGH = 1;
    
    /**
     * Creates new form GuideToneLineDialog
     * @param parent Frame that spawned this dialog box
     * @param modal true if user cannot access main window until dialog box is closed, false otherwise
     */
    public GuideToneLineDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setTitle("Generate Guide Tone Line");
        this.setResizable(true);
        notate = (Notate)this.getParent();
        transformationPanel = notate.lickgenFrame.getTransformPanel();
        initComponents();

        //updates scale Degree buttons based on first chord of leadsheet
        //and whether or not allow color tones is checked
        updateButtons(); 
        
        //make the transform buttons whatever they are in the transform panel
        updateTransformButtons();
        
        StaveType stave = Preferences.getStaveTypeFromPreferences();
        
        if(stave==StaveType.TREBLE){
            range = trebleDefaults;
        }else if(stave==StaveType.BASS){
            range = bassDefaults;
        }else{
            range = grandDefaults;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        directionButtons = new javax.swing.ButtonGroup();
        numberOfLinesButtons = new javax.swing.ButtonGroup();
        scaleDegreeButtons = new javax.swing.ButtonGroup();
        maxDurationButtons = new javax.swing.ButtonGroup();
        lineTypeButtons = new javax.swing.ButtonGroup();
        scaleDegree2Buttons = new javax.swing.ButtonGroup();
        linesPanel = new javax.swing.JPanel();
        numberOfLinesLabel = new javax.swing.JLabel();
        oneLine = new javax.swing.JRadioButton();
        twoLines = new javax.swing.JRadioButton();
        directionPanel = new javax.swing.JPanel();
        directionLabel = new javax.swing.JLabel();
        descending = new javax.swing.JRadioButton();
        noPreference = new javax.swing.JRadioButton();
        ascending = new javax.swing.JRadioButton();
        scaleDegPanel = new javax.swing.JPanel();
        scaleDegLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        generateLine = new javax.swing.JButton();
        leftFiller = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        rightFiller = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        transformPanel = new javax.swing.JPanel();
        transformLine = new javax.swing.JButton();
        revertLine = new javax.swing.JButton();
        reapplyTransform = new javax.swing.JButton();
        maxDurationPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        noPref = new javax.swing.JRadioButton();
        whole = new javax.swing.JRadioButton();
        half = new javax.swing.JRadioButton();
        quarter = new javax.swing.JRadioButton();
        bottomFiller = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        topFiller = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        rangeLabelPanel = new javax.swing.JPanel();
        rangeLabel = new javax.swing.JLabel();
        playPanel = new javax.swing.JPanel();
        playBtn = new javax.swing.JButton();
        pauseBtn = new javax.swing.JToggleButton();
        stopBtn = new javax.swing.JButton();
        allowColorPanel = new javax.swing.JPanel();
        allowColorBox = new javax.swing.JCheckBox();
        scaleDeg2Panel = new javax.swing.JPanel();
        scaleDeg2Label = new javax.swing.JLabel();
        rangeChooserPanel = new javax.swing.JPanel();
        rangeChooserButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1150, 600));
        setPreferredSize(new java.awt.Dimension(1150, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        linesPanel.setLayout(new java.awt.GridBagLayout());

        numberOfLinesLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numberOfLinesLabel.setText("Number of Lines:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        linesPanel.add(numberOfLinesLabel, gridBagConstraints);

        numberOfLinesButtons.add(oneLine);
        oneLine.setSelected(true);
        oneLine.setText("One Line");
        oneLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneLineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        linesPanel.add(oneLine, gridBagConstraints);

        numberOfLinesButtons.add(twoLines);
        twoLines.setText("Two Lines");
        twoLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoLinesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        linesPanel.add(twoLines, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(linesPanel, gridBagConstraints);

        directionPanel.setLayout(new java.awt.GridBagLayout());

        directionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        directionLabel.setText("Direction:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        directionPanel.add(directionLabel, gridBagConstraints);

        directionButtons.add(descending);
        descending.setText("Descending");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        directionPanel.add(descending, gridBagConstraints);

        directionButtons.add(noPreference);
        noPreference.setSelected(true);
        noPreference.setText("No Preference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        directionPanel.add(noPreference, gridBagConstraints);

        directionButtons.add(ascending);
        ascending.setText("Ascending");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        directionPanel.add(ascending, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(directionPanel, gridBagConstraints);

        scaleDegPanel.setLayout(new java.awt.GridBagLayout());

        scaleDegLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scaleDegLabel.setText("Line 1 - Start on Scale Degree:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        scaleDegPanel.add(scaleDegLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        getContentPane().add(scaleDegPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        generateLine.setText("Generate Guide Tone Line");
        generateLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateLineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(generateLine, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        getContentPane().add(buttonPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        getContentPane().add(leftFiller, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        getContentPane().add(rightFiller, gridBagConstraints);

        transformLine.setText("Generate Solo Over Line");
        transformLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transformLineActionPerformed(evt);
            }
        });
        transformPanel.add(transformLine);

        revertLine.setText("Restore Guide Tone Line");
        revertLine.setToolTipText("");
        revertLine.setEnabled(false);
        revertLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertLineActionPerformed(evt);
            }
        });
        transformPanel.add(revertLine);

        reapplyTransform.setText("Try Again");
        reapplyTransform.setEnabled(false);
        reapplyTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reapplyTransformActionPerformed(evt);
            }
        });
        transformPanel.add(reapplyTransform);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        getContentPane().add(transformPanel, gridBagConstraints);

        maxDurationPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Max Note Duration:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(jLabel1, gridBagConstraints);

        maxDurationButtons.add(noPref);
        noPref.setSelected(true);
        noPref.setText("No Preference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(noPref, gridBagConstraints);

        maxDurationButtons.add(whole);
        whole.setText("Whole");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(whole, gridBagConstraints);

        maxDurationButtons.add(half);
        half.setText("Half");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(half, gridBagConstraints);

        maxDurationButtons.add(quarter);
        quarter.setText("Quarter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(quarter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        getContentPane().add(maxDurationPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        getContentPane().add(bottomFiller, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        getContentPane().add(topFiller, gridBagConstraints);

        rangeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rangeLabel.setText("Use the keyboard below to select an upper and lower range limit for your guide tone line.");
        rangeLabelPanel.add(rangeLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        getContentPane().add(rangeLabelPanel, gridBagConstraints);

        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/play.gif"))); // NOI18N
        playBtn.setToolTipText("Play the entire leadsheet, starting with the first chorus.\nTo play just the current chorus, select the first beat of that chorus and press Shift-Enter.");
        playBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        playBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        playBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });
        playPanel.add(playBtn);

        pauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/pause.gif"))); // NOI18N
        pauseBtn.setToolTipText("Pause or resume playback.");
        pauseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pauseBtn.setEnabled(false);
        pauseBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });
        playPanel.add(pauseBtn);

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/stop.gif"))); // NOI18N
        stopBtn.setToolTipText("Stop playback.");
        stopBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stopBtn.setEnabled(false);
        stopBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        stopBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        stopBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        playPanel.add(stopBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        getContentPane().add(playPanel, gridBagConstraints);

        allowColorBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        allowColorBox.setText("Allow Color Tones");
        allowColorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowColorBoxActionPerformed(evt);
            }
        });
        allowColorPanel.add(allowColorBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        getContentPane().add(allowColorPanel, gridBagConstraints);

        scaleDeg2Panel.setLayout(new java.awt.GridBagLayout());

        scaleDeg2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scaleDeg2Label.setText("Line 2 - Start On Scale Degree:");
        scaleDeg2Panel.add(scaleDeg2Label, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        getContentPane().add(scaleDeg2Panel, gridBagConstraints);

        rangeChooserButton.setText("Choose Range");
        rangeChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeChooserButtonActionPerformed(evt);
            }
        });
        rangeChooserPanel.add(rangeChooserButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        getContentPane().add(rangeChooserPanel, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void generateLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLineActionPerformed
        //Get which options are selected
        JRadioButton direction = getSelected(directionButtons);
        JRadioButton scaleDeg = getSelected(scaleDegreeButtons);
        JRadioButton scaleDeg2 = getSelected(scaleDegree2Buttons);
        JRadioButton maxDur = getSelected(maxDurationButtons);
        //JRadioButton lineTypeButton = getSelected(lineTypeButtons);
        
        //Get paramaters to pass into constructor
        //notate = (Notate)this.getParent();
        String scaleDegString;
        if(scaleDeg!=null){
           scaleDegString = scaleDeg.getText(); 
        }else{
            scaleDegString = "NOCHORD";
        }
        
        String scaleDegString2;
        if(scaleDeg2!=null){
           scaleDegString2 = scaleDeg2.getText(); 
        }else{
            scaleDegString2 = "NOCHORD";
        }
        
        boolean alternating = false;
        int duration = buttonToDuration(maxDur);
        //int lineType = buttonToLineType(lineTypeButton);
        boolean allowColor = allowColorBox.isSelected();
        boolean mix = twoLines.isSelected();


        //construct a guide tone line generator, make a guide tone line (melody part), then add it as a new chorus
        
        if(!notate.getChordProg().getChords().isEmpty()){
            GuideLineGenerator guideLine = new GuideLineGenerator(notate.getChordProg(), 
                                                              buttonToDirection(direction), 
                                                              scaleDegString,
                                                              scaleDegString2,
                                                              alternating, 
                                                              range[LOW], range[HIGH], 
                                                              duration,
                                                              mix,
                                                              allowColor);
            MelodyPart guideToneLine = guideLine.makeGuideLine();
            notate.addChorus(guideToneLine);
        }
        
        updatePlayButtons();

    }//GEN-LAST:event_generateLineActionPerformed

    private int buttonToDuration(JRadioButton b){
        if(b.equals(noPref)){
            return 0;
        }else if(b.equals(whole)){
            return WHOLE;
        }else if(b.equals(half)){
            return HALF;
        }else if(b.equals(quarter)){
            return QUARTER;
        }else{
            //shouldn't happen
            return 0;
        }
    }
    
    
    public void updateButtons(){
        setButtonText(scaleDegreeButtons, scaleDegPanel);
        setButtonText(scaleDegree2Buttons, scaleDeg2Panel);
        enableButtons(scaleDegree2Buttons, twoLines.isSelected());
    }
    private void setButtonText(ButtonGroup group, JPanel panel){
        panel.removeAll();
        if(panel.equals(scaleDegPanel)){
            panel.add(scaleDegLabel);
        }else if(panel.equals(scaleDeg2Panel)){
            panel.add(scaleDeg2Label);
        }
        
        removeAll(group);
        Chord firstChord = notate.getChordProg().getChord(0);
        if(firstChord==null){
            return;
        }
        Polylist chordSpell = firstChord.getSpell();
        if(chordSpell==null){
            return;
        }
        while(!chordSpell.isEmpty()){
            Note nextNote = ((NoteSymbol)chordSpell.first()).toNote();
            Polylist relPitch = nextNote.toRelativePitch(firstChord);
            String degree = (String)relPitch.second();
            chordSpell = chordSpell.rest();
            JRadioButton b = new JRadioButton(degree);
            panel.add(b);
            group.add(b);
            b.setSelected(true);
        }
        if(allowColorBox.isSelected()){
            Polylist chordColor = firstChord.getColor();
            if(chordColor==null){
                return;
            }
            while(!chordColor.isEmpty()){
                Note nextNote = ((NoteSymbol)chordColor.first()).toNote();
                Polylist relPitch = nextNote.toRelativePitch(firstChord);
                String degree = (String)relPitch.second();
                chordColor = chordColor.rest();
                JRadioButton b = new JRadioButton(degree);
                panel.add(b);
                group.add(b);
                b.setSelected(true);
            }
        }
        if(panel.getComponents().length>1){
            JRadioButton first = (JRadioButton)panel.getComponent(1);
            first.setSelected(true);
        }
        
        
    }
    
    private void twoLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoLinesActionPerformed
        enableButtons(scaleDegree2Buttons, true);
    }//GEN-LAST:event_twoLinesActionPerformed

    /**
     * 
     * @param group ButtonGroup to enable/disable
     * @param enabled true to enable, false to disable
     */
    private void enableButtons(ButtonGroup group, boolean enabled){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            b.setEnabled(enabled);
        }
    }
    
    /**
     * Removes all buttons from a button group
     * @param group 
     */
    private void removeAll(ButtonGroup group){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            group.remove(b);
        }
    }
    
    private void oneLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneLineActionPerformed
        enableButtons(scaleDegree2Buttons, false);
    }//GEN-LAST:event_oneLineActionPerformed

    private void transformLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transformLineActionPerformed

        transformationPanel.applySubstitutions();
        
        updateTransformButtons();
        
        updatePlayButtons();
        
    }//GEN-LAST:event_transformLineActionPerformed

    private void revertLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertLineActionPerformed
        
        transformationPanel.revertSubs();
        
        updateTransformButtons();
        
        updatePlayButtons();

    }//GEN-LAST:event_revertLineActionPerformed
    
    private void allowColorBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowColorBoxActionPerformed
        this.setVisible(false);
        updateButtons();
        this.setVisible(true);
    }//GEN-LAST:event_allowColorBoxActionPerformed

    public void updateTransformButtons(){
        revertLine.setEnabled(transformationPanel.getRevertEnabled());
        reapplyTransform.setEnabled(transformationPanel.getReapplyEnabled());
    }
    
    private void reapplyTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reapplyTransformActionPerformed
        
        transformationPanel.revertSubs();
        transformationPanel.applySubstitutions();
        
        updateTransformButtons();
        
        updatePlayButtons();
        
    }//GEN-LAST:event_reapplyTransformActionPerformed

    public void updatePlayButtons(){
        playBtn.setEnabled(notate.getPlayEnabled());
        pauseBtn.setEnabled(notate.getPauseEnabled());
        stopBtn.setEnabled(notate.getStopEnabled());
        
        playBtn.setSelected(notate.getPlaySelected());
        pauseBtn.setSelected(notate.getPauseSelected());
        stopBtn.setSelected(notate.getStopSelected());
    }
    
    
    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        notate.improvisationOn = false;
        notate.improvOn = false;
        notate.playAll();
        
        updatePlayButtons();
    }//GEN-LAST:event_playBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        notate.stopButtonPressed();
        
        updatePlayButtons();
    }//GEN-LAST:event_stopBtnActionPerformed

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        if( notate.getMode() == Mode.PLAYING_PAUSED )
        {
            notate.setMode(Mode.PLAYING);
        }
        else
        {
            notate.setMode(Mode.PLAYING_PAUSED);
        }
        notate.pauseScore();
        if( notate.getKeyboard() != null )
        {
            String v = notate.getKeyboard().voicingFromKeyboard();
            String currentChord = notate.getKeyboard().getPresentChordDisplayText();

            if( notate.getVoicingTestFrame() != null && notate.getVoicingTestFrame().isVisible() )
            {
                notate.selectVoicing(v, currentChord);
            }
        }

        updatePlayButtons();
    }//GEN-LAST:event_pauseBtnActionPerformed

    private void rangeChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeChooserButtonActionPerformed
        RangeChooser rangeChooser = new RangeChooser(notate, range[LOW], range[HIGH], OCTAVE);
        range = rangeChooser.getRange();
    }//GEN-LAST:event_rangeChooserButtonActionPerformed

    /**
     * returns which JRadioButton in a ButtonGroup is selected
     * @param group the ButtonGroup from which you want to return the selected button
     * @return the JRadioButton that is selected
     */
    private JRadioButton getSelected(ButtonGroup group){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            if(b.isSelected()){
                return (JRadioButton)b;
            }
        }
        return null;
    }
    
    /**
     * returns the direction associated with the given button
     * @param b a JRadioButton
     * @return the direction associated with that button (1 for up, 0 for same, -1 for down)
     */
    private int buttonToDirection(JRadioButton b){
        if(b.equals(ascending)){
            return 1;
        }else if(b.equals(descending)){
            return -1;
        }else if(b.equals(noPreference)){
            return 0;
        }else{
            //shouldn't happen
            return 0;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GuideToneLineDialog dialog = new GuideToneLineDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowColorBox;
    private javax.swing.JPanel allowColorPanel;
    private javax.swing.JRadioButton ascending;
    private javax.swing.Box.Filler bottomFiller;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JRadioButton descending;
    private javax.swing.ButtonGroup directionButtons;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JPanel directionPanel;
    private javax.swing.JButton generateLine;
    private javax.swing.JRadioButton half;
    private javax.swing.JLabel jLabel1;
    private javax.swing.Box.Filler leftFiller;
    private javax.swing.ButtonGroup lineTypeButtons;
    private javax.swing.JPanel linesPanel;
    private javax.swing.ButtonGroup maxDurationButtons;
    private javax.swing.JPanel maxDurationPanel;
    private javax.swing.JRadioButton noPref;
    private javax.swing.JRadioButton noPreference;
    private javax.swing.ButtonGroup numberOfLinesButtons;
    private javax.swing.JLabel numberOfLinesLabel;
    private javax.swing.JRadioButton oneLine;
    private javax.swing.JToggleButton pauseBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JPanel playPanel;
    private javax.swing.JRadioButton quarter;
    private javax.swing.JButton rangeChooserButton;
    private javax.swing.JPanel rangeChooserPanel;
    private javax.swing.JLabel rangeLabel;
    private javax.swing.JPanel rangeLabelPanel;
    private javax.swing.JButton reapplyTransform;
    private javax.swing.JButton revertLine;
    private javax.swing.Box.Filler rightFiller;
    private javax.swing.JLabel scaleDeg2Label;
    private javax.swing.JPanel scaleDeg2Panel;
    private javax.swing.JLabel scaleDegLabel;
    private javax.swing.JPanel scaleDegPanel;
    private javax.swing.ButtonGroup scaleDegree2Buttons;
    private javax.swing.ButtonGroup scaleDegreeButtons;
    private javax.swing.JButton stopBtn;
    private javax.swing.Box.Filler topFiller;
    private javax.swing.JButton transformLine;
    private javax.swing.JPanel transformPanel;
    private javax.swing.JRadioButton twoLines;
    private javax.swing.JRadioButton whole;
    // End of variables declaration//GEN-END:variables
}
