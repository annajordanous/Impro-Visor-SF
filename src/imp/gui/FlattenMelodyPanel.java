/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package imp.gui;

import imp.data.Chord;
import imp.data.ChordPart;
import imp.data.MelodyPart;
import imp.data.Note;
import imp.data.Part.PartIterator;
import imp.lickgen.LickGen;
import imp.lickgen.transformations.Evaluate;
import imp.lickgen.transformations.FlattenMelody;
import imp.lickgen.transformations.Transform;
import imp.lickgen.transformations.Transformation;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import polya.*;

/**
 *
 * @author Notsoplenk
 */
public class FlattenMelodyPanel extends javax.swing.JPanel {

    /**
     * Creates new form FlattenMelodyPanel
     */
    private FlattenMelody flatten;
    private LickGen lickgen;
    private Notate notate;
    private MelodyPart original;
    private MelodyPart flattened;
    private int resolution;
    private Transform transform;
    SubstitutorTabPanel subPanel;
    public FlattenMelodyPanel(LickGen lickgen, Notate notate, SubstitutorTabPanel subPanel) {
        initComponents();
        this.lickgen = lickgen;
        this.notate = notate;
        flatten = new FlattenMelody(lickgen);
        original = new MelodyPart();
        flattened = new MelodyPart();
        resolution = 120;
        transform = new Transform(lickgen);
        this.subPanel = subPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        flattenByChord16Buton = new javax.swing.JButton();
        flattenByChord8Buton = new javax.swing.JButton();
        flattenByChord4Buton = new javax.swing.JButton();
        subFlatFromOrigButton = new javax.swing.JButton();
        saveOriginalButton = new javax.swing.JButton();
        createTransformButton = new javax.swing.JButton();
        showTransformButton = new javax.swing.JButton();
        flattenByChord2Buton = new javax.swing.JButton();
        setTransformButton = new javax.swing.JButton();
        replaceWithOriginalButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        flattenByChord16Buton.setText("Flatten Melody by 16th note");
        flattenByChord16Buton.setToolTipText("flatten with a resolution of 16th note");
        flattenByChord16Buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenByChord16ButonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(flattenByChord16Buton, gridBagConstraints);

        flattenByChord8Buton.setText("Flatten Melody  by 8th note");
        flattenByChord8Buton.setToolTipText("flatten with a resolution of 8th note");
        flattenByChord8Buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenByChord8ButonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(flattenByChord8Buton, gridBagConstraints);

        flattenByChord4Buton.setText("Flatten Melody by quarter note");
        flattenByChord4Buton.setToolTipText("flatten with a resolution of quarter note");
        flattenByChord4Buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenByChord4ButonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(flattenByChord4Buton, gridBagConstraints);

        subFlatFromOrigButton.setText("Subtract Flattening from Original");
        subFlatFromOrigButton.setToolTipText("show just the transformations in the leadsheet");
        subFlatFromOrigButton.setEnabled(false);
        subFlatFromOrigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subFlatFromOrigButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(subFlatFromOrigButton, gridBagConstraints);

        saveOriginalButton.setText("Save Original");
        saveOriginalButton.setToolTipText("Save the currently selected melody");
        saveOriginalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOriginalButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveOriginalButton, new java.awt.GridBagConstraints());

        createTransformButton.setText("Create Transform from Saved and Flattened Melodies");
        createTransformButton.setToolTipText("create a transform file based on transforming the flattened melody into the original melody");
        createTransformButton.setEnabled(false);
        createTransformButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTransformButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(createTransformButton, gridBagConstraints);

        showTransformButton.setText("Show Generated Transform");
        showTransformButton.setToolTipText("show the transform file generated from above");
        showTransformButton.setEnabled(false);
        showTransformButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTransformButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(showTransformButton, gridBagConstraints);

        flattenByChord2Buton.setText("Flatten Melody by half note");
        flattenByChord2Buton.setToolTipText("flatten with a resolution of half note");
        flattenByChord2Buton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flattenByChord2ButonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(flattenByChord2Buton, gridBagConstraints);

        setTransformButton.setText("Put Transform into Transform tab");
        setTransformButton.setToolTipText("put the transform generated above into the transform tab");
        setTransformButton.setEnabled(false);
        setTransformButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTransformButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(setTransformButton, gridBagConstraints);

        replaceWithOriginalButton.setText("Replace Current Melody with Original");
        replaceWithOriginalButton.setToolTipText("replace the current melody with the saved melody");
        replaceWithOriginalButton.setEnabled(false);
        replaceWithOriginalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceWithOriginalButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(replaceWithOriginalButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(100, 150, 100, 150);
        add(jPanel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void flattenByChord16ButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenByChord16ButonActionPerformed
        flattenByChord(30);
        resolution = 30;
    }//GEN-LAST:event_flattenByChord16ButonActionPerformed

    private void saveOriginalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOriginalButtonActionPerformed
        
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        int stop = notate.getCurrentSelectionEnd();
        original = notate.getCurrentMelodyPart().copy();
        notate.repaint();
        
        replaceWithOriginalButton.setEnabled(true);
        subFlatFromOrigButton.setEnabled(true);
        createTransformButton.setEnabled(true);
    }//GEN-LAST:event_saveOriginalButtonActionPerformed

    private void flattenByChord8ButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenByChord8ButonActionPerformed
        flattenByChord(60);
        resolution = 60;
    }//GEN-LAST:event_flattenByChord8ButonActionPerformed

    private void flattenByChord4ButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenByChord4ButonActionPerformed
        flattenByChord(120);
        resolution = 120;
    }//GEN-LAST:event_flattenByChord4ButonActionPerformed

    private void subFlatFromOrigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subFlatFromOrigButtonActionPerformed
        subtractOutline();
    }//GEN-LAST:event_subFlatFromOrigButtonActionPerformed

    private void createTransformButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTransformButtonActionPerformed
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        int stop = notate.getCurrentSelectionEnd();
        MelodyPart outline = notate.getCurrentMelodyPart();
        ChordPart chords = notate.getChordProg();
        Polylist transformList = flatten.createTransform(outline, original.copy(), chords, resolution, start, stop);
        transform = new Transform(lickgen, transformList.toStringSansParens());
        showTransformButton.setEnabled(true);
        setTransformButton.setEnabled(true);
    }//GEN-LAST:event_createTransformButtonActionPerformed

    private void showTransformButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTransformButtonActionPerformed
        showTransform();
    }//GEN-LAST:event_showTransformButtonActionPerformed

    private void flattenByChord2ButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flattenByChord2ButonActionPerformed
        flattenByChord(240);
        resolution = 240;
    }//GEN-LAST:event_flattenByChord2ButonActionPerformed

    private void setTransformButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTransformButtonActionPerformed
        subPanel.setTransform(transform);
    }//GEN-LAST:event_setTransformButtonActionPerformed

    private void replaceWithOriginalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceWithOriginalButtonActionPerformed
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        notate.getCurrentMelodyPart().pasteOver(original, start);
        notate.repaint();
    }//GEN-LAST:event_replaceWithOriginalButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createTransformButton;
    private javax.swing.JButton flattenByChord16Buton;
    private javax.swing.JButton flattenByChord2Buton;
    private javax.swing.JButton flattenByChord4Buton;
    private javax.swing.JButton flattenByChord8Buton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton replaceWithOriginalButton;
    private javax.swing.JButton saveOriginalButton;
    private javax.swing.JButton setTransformButton;
    private javax.swing.JButton showTransformButton;
    private javax.swing.JButton subFlatFromOrigButton;
    // End of variables declaration//GEN-END:variables

    public void showTransform()
    {
        TransformDialogue transEditor = new TransformDialogue(notate.lickgenFrame, transform);
        transEditor.setLocationRelativeTo(this);
        transEditor.toFront();
    }
    
    private void flattenByChord(int resolution)
    {
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        int stop = notate.getCurrentSelectionEnd();
        MelodyPart melody = notate.getCurrentMelodyPart();
        ChordPart chords = notate.getChordProg();
        MelodyPart flattenedPart = flatten.flattenByChord(melody, chords, resolution, start, stop);
        notate.getCurrentMelodyPart().pasteOver(flattenedPart, start);
        notate.repaint();
    }
    
    private void subtractOutline()
    {
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        int stop = notate.getCurrentSelectionEnd();
        MelodyPart origSel = original.extract(start, stop, true, true);
        MelodyPart outlineSel = notate.getCurrentMelodyPart().extract(start, stop, true, true);
        flattened = outlineSel.copy();
        MelodyPart subFromOrig = new MelodyPart();
        for(int i = 0; i < origSel.size(); i = origSel.getNextIndex(i))
        {
            Note origNote = origSel.getCurrentNote(i);
            Note outlineNote = outlineSel.getCurrentNote(i);
            
            if(origNote.samePitch(outlineNote))
            {
                origNote = Note.makeRest(origNote.getRhythmValue());
            }
            subFromOrig.addNote(origNote);
        }
        
        for(int i = 0; i < outlineSel.size(); i = outlineSel.getNextIndex(i))
        {
            Note origNote = subFromOrig.getCurrentNote(i);
            Note outlineNote = outlineSel.getCurrentNote(i);
            
            if(origNote.samePitch(outlineNote))
            {
                int diff = origNote.getRhythmValue() - outlineNote.getRhythmValue();
                origNote.setRhythmValue(diff);
                Note addRest = Note.makeRest(outlineNote.getRhythmValue());
                subFromOrig.setNote(i, addRest);
            }
            
        }
        notate.getCurrentMelodyPart().pasteOver(subFromOrig, start);
        notate.repaint();
    }
    
    
    public class TransformDialogue extends javax.swing.JDialog implements ActionListener  {

    private Transform trans;
    private javax.swing.JTextArea contents;
    
    public TransformDialogue(javax.swing.JFrame frame, Transform trans)
    {
        super(frame, "Transformation Editor", false);
        super.setSize(800,600);
        this.trans = trans;
        StringBuilder transFile = new StringBuilder();
        trans.toFile(transFile);
        contents = new javax.swing.JTextArea();
        contents.setFont(new Font("monospaced", Font.PLAIN, 14));
        contents.setTabSize(8);
        contents.setText(transFile.toString());
        super.setLocationRelativeTo(frame);
        javax.swing.JScrollPane scroll = new javax.swing.JScrollPane();
        scroll.setPreferredSize(new Dimension(820,620));
        scroll.setViewportView(contents);
        getContentPane().add(scroll);
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Close"); 
        saveButton.addActionListener(this);
        getContentPane().add(saveButton, BorderLayout.SOUTH);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        pack(); 
        setVisible(true);
    }
    
    public void actionPerformed(ActionEvent e) {
        dispose(); 
        setVisible(false); 
    }
}       
}
