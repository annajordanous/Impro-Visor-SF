package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>merge_sort/2</code> defined in plcafe_defs.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_merge_sort_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _merge_sort_2_var = new PRED_merge_sort_2_var();
    static Predicate _merge_sort_2_var_1 = new PRED_merge_sort_2_var_1();
    static Predicate _merge_sort_2_var_2 = new PRED_merge_sort_2_var_2();
    static Predicate _merge_sort_2_con = new PRED_merge_sort_2_con();
    static Predicate _merge_sort_2_con_1 = new PRED_merge_sort_2_con_1();
    static Predicate _merge_sort_2_lis = new PRED_merge_sort_2_lis();
    static Predicate _merge_sort_2_lis_1 = new PRED_merge_sort_2_lis_1();
    static Predicate _merge_sort_2_1 = new PRED_merge_sort_2_1();
    static Predicate _merge_sort_2_2 = new PRED_merge_sort_2_2();
    static Predicate _merge_sort_2_3 = new PRED_merge_sort_2_3();

    public Term arg1, arg2;

    public PRED_merge_sort_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_merge_sort_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "merge_sort(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_merge_sort_2_var, _merge_sort_2_3, _merge_sort_2_3, _merge_sort_2_con, _merge_sort_2_3, _merge_sort_2_lis);
    }
}

class PRED_merge_sort_2_var extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_merge_sort_2_1, _merge_sort_2_var_1);
    }
}

class PRED_merge_sort_2_var_1 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_merge_sort_2_2, _merge_sort_2_var_2);
    }
}

class PRED_merge_sort_2_var_2 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_merge_sort_2_3);
    }
}

class PRED_merge_sort_2_con extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_merge_sort_2_1, _merge_sort_2_con_1);
    }
}

class PRED_merge_sort_2_con_1 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_merge_sort_2_3);
    }
}

class PRED_merge_sort_2_lis extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_merge_sort_2_2, _merge_sort_2_lis_1);
    }
}

class PRED_merge_sort_2_lis_1 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_merge_sort_2_3);
    }
}

class PRED_merge_sort_2_1 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
    // merge_sort([],[]):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // merge_sort([],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_merge_sort_2_2 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
    // merge_sort([A],[A]):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // merge_sort([A],[A]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a3.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(new ListTerm(a3, s1), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_merge_sort_2_3 extends PRED_merge_sort_2 {
    public Predicate exec(Prolog engine) {
    // merge_sort(A,B):-halve(A,C,D),merge_sort(C,E),merge_sort(D,F),merge(E,F,B)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // merge_sort(A,B):-[halve(A,C,D),merge_sort(C,E),merge_sort(D,F),merge(E,F,B)]
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        p1 = new PRED_merge_3(a5, a6, a2, cont);
        p2 = new PRED_merge_sort_2(a4, a6, p1);
        p3 = new PRED_merge_sort_2(a3, a5, p2);
        return new PRED_halve_3(a1, a3, a4, p3);
    }
}
