package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_helper/1</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_helper_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");

    public Term arg1;

    public PRED_test_helper_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_test_helper_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "test_helper(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // test_helper(A):-write(A),nl,call(A)
        engine.setB0();
        Term a1, a2;
        Predicate p1, p2;
        a1 = arg1;
    // test_helper(A):-[write(A),nl,call(user:A)]
        Term[] y1 = {s2, a1};
        a2 = new StructureTerm(s1, y1);
        p1 = new PRED_call_1(a2, cont);
        p2 = new PRED_nl_0(p1);
        return new PRED_write_1(a1, p2);
    }
}
