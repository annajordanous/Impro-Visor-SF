package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>duration/2</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_duration_2 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("+");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(".");
    static IntegerTerm si4 = new IntegerTerm(3);
    static IntegerTerm si5 = new IntegerTerm(2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("/");
    static Predicate _duration_2_sub_1 = new PRED_duration_2_sub_1();
    static Predicate _duration_2_sub_2 = new PRED_duration_2_sub_2();
    static Predicate _duration_2_sub_3 = new PRED_duration_2_sub_3();
    static Predicate _duration_2_1 = new PRED_duration_2_1();
    static Predicate _duration_2_2 = new PRED_duration_2_2();
    static Predicate _duration_2_3 = new PRED_duration_2_3();
    static Predicate _duration_2_4 = new PRED_duration_2_4();

    public Term arg1, arg2;

    public PRED_duration_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_duration_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "duration(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_duration_2_1, _duration_2_sub_1);
    }
}

class PRED_duration_2_sub_1 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_duration_2_2, _duration_2_sub_2);
    }
}

class PRED_duration_2_sub_2 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_duration_2_3, _duration_2_sub_3);
    }
}

class PRED_duration_2_sub_3 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_duration_2_4);
    }
}

class PRED_duration_2_1 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
    // duration(A,B):-'$dummy_0_rule_initialize.pro'(C,A),slots_per_beat(D),B is truncate(4*D/C)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // duration(A,B):-['$dummy_0_rule_initialize.pro'(C,A),slots_per_beat(D),'$multi'(4,D,E),'$float_quotient'(E,C,F),'$truncate'(F,B)]
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        p1 = new PRED_$truncate_2(a6, a2, cont);
        p2 = new PRED_$float_quotient_3(a5, a3, a6, p1);
        p3 = new PRED_$multi_3(si1, a4, a5, p2);
        p4 = new PRED_slots_per_beat_1(a4, p3);
        return new PRED_$dummy_0_rule_initialize$002Epro_2(a3, a1, p4);
    }
}

class PRED_duration_2_2 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
    // duration(A,B):-atom_peel(A,+,C,D),!,duration(C,E),duration(D,F),B is E+F
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // duration(A,B):-['$get_level'(C),atom_peel(A,+,D,E),'$cut'(C),duration(D,F),duration(E,G),'$plus'(F,G,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        p1 = new PRED_$plus_3(a6, a7, a2, cont);
        p2 = new PRED_duration_2(a5, a7, p1);
        p3 = new PRED_duration_2(a4, a6, p2);
        p4 = new PRED_$cut_1(a3, p3);
        return new PRED_atom_peel_4(a1, s2, a4, a5, p4);
    }
}

class PRED_duration_2_3 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
    // duration(A,B):-last_atom(A,C),C='.',!,init_atom(A,D),duration(D,E),B is truncate(3/2*E)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // duration(A,B):-['$get_level'(C),last_atom(A,D),'$unify'(D,'.'),'$cut'(C),init_atom(A,E),duration(E,F),'$float_quotient'(3,2,G),'$multi'(G,F,H),'$truncate'(H,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_$truncate_2(a8, a2, cont);
        p2 = new PRED_$multi_3(a7, a6, a8, p1);
        p3 = new PRED_$float_quotient_3(si4, si5, a7, p2);
        p4 = new PRED_duration_2(a5, a6, p3);
        p5 = new PRED_init_atom_2(a1, a5, p4);
        p6 = new PRED_$cut_1(a3, p5);
        p7 = new PRED_$unify_2(a4, s3, p6);
        return new PRED_last_atom_2(a1, a4, p7);
    }
}

class PRED_duration_2_4 extends PRED_duration_2 {
    public Predicate exec(Prolog engine) {
    // duration(A,B):-atom_peel(A,/,C,D),'$dummy_1_rule_initialize.pro'(D,E),!,duration(C,F),atom_number(D,G),B is truncate(E/G*F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // duration(A,B):-['$get_level'(C),atom_peel(A,/,D,E),'$dummy_1_rule_initialize.pro'(E,F),'$cut'(C),duration(D,G),atom_number(E,H),'$float_quotient'(F,H,I),'$multi'(I,G,J),'$truncate'(J,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        p1 = new PRED_$truncate_2(a10, a2, cont);
        p2 = new PRED_$multi_3(a9, a7, a10, p1);
        p3 = new PRED_$float_quotient_3(a6, a8, a9, p2);
        p4 = new PRED_atom_number_2(a5, a8, p3);
        p5 = new PRED_duration_2(a4, a7, p4);
        p6 = new PRED_$cut_1(a3, p5);
        p7 = new PRED_$dummy_1_rule_initialize$002Epro_2(a5, a6, p6);
        return new PRED_atom_peel_4(a1, s6, a4, a5, p7);
    }
}
