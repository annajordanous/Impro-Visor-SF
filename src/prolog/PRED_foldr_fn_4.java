import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>foldr_fn/4</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_foldr_fn_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("fn", 2);
    static Predicate _foldr_fn_4_top = new PRED_foldr_fn_4_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _foldr_fn_4_var = new PRED_foldr_fn_4_var();
    static Predicate _foldr_fn_4_var_1 = new PRED_foldr_fn_4_var_1();
    static Predicate _foldr_fn_4_1 = new PRED_foldr_fn_4_1();
    static Predicate _foldr_fn_4_2 = new PRED_foldr_fn_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_foldr_fn_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_foldr_fn_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "foldr_fn(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        return _foldr_fn_4_top;
    }
}

class PRED_foldr_fn_4_top extends PRED_foldr_fn_4 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_foldr_fn_4_var, _fail_0, _fail_0, _foldr_fn_4_1, _fail_0, _foldr_fn_4_2);
    }
}

class PRED_foldr_fn_4_var extends PRED_foldr_fn_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_foldr_fn_4_1, _foldr_fn_4_var_1);
    }
}

class PRED_foldr_fn_4_var_1 extends PRED_foldr_fn_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_foldr_fn_4_2);
    }
}

class PRED_foldr_fn_4_1 extends PRED_foldr_fn_4 {
    public Predicate exec(Prolog engine) {
    // foldr_fn([],A,B,B):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // foldr_fn([],A,B,B):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_foldr_fn_4_2 extends PRED_foldr_fn_4 {
    public Predicate exec(Prolog engine) {
    // foldr_fn([A|B],fn(C,D),E,F):-foldr_fn(B,fn(C,D),E,G),apply_fn(C,D,[A,G,F])
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // foldr_fn([A|B],fn(C,D),E,F):-[foldr_fn(B,fn(C,D),E,G),apply_fn(C,D,[A,G,F])]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isStructure()){
            if (! s2.equals(((StructureTerm)a2).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a2).args();
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            Term[] args = {a7, a8};
            ((VariableTerm) a2).bind(new StructureTerm(s2, args), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a7, a8};
        a9 = new StructureTerm(s2, y1);
        a10 = new VariableTerm(engine);
        a11 = new ListTerm(a4, s1);
        a12 = new ListTerm(a10, a11);
        a13 = new ListTerm(a5, a12);
        p1 = new PRED_apply_fn_3(a7, a8, a13, cont);
        engine.aregs[1] = a6;
        engine.aregs[2] = a9;
        engine.aregs[3] = a3;
        engine.aregs[4] = a10;
        engine.cont = p1;
        return _foldr_fn_4_top;
    }
}
