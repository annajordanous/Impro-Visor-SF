import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_14_attributes.pro'/4</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_14_attributes$002Epro_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("slope", 3);
    static Predicate _$dummy_14_attributes$002Epro_4_sub_1 = new PRED_$dummy_14_attributes$002Epro_4_sub_1();
    static Predicate _$dummy_14_attributes$002Epro_4_1 = new PRED_$dummy_14_attributes$002Epro_4_1();
    static Predicate _$dummy_14_attributes$002Epro_4_2 = new PRED_$dummy_14_attributes$002Epro_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_$dummy_14_attributes$002Epro_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_$dummy_14_attributes$002Epro_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "$dummy_14_attributes.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_14_attributes$002Epro_4_1, _$dummy_14_attributes$002Epro_4_sub_1);
    }
}

class PRED_$dummy_14_attributes$002Epro_4_sub_1 extends PRED_$dummy_14_attributes$002Epro_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_14_attributes$002Epro_4_2);
    }
}

class PRED_$dummy_14_attributes$002Epro_4_1 extends PRED_$dummy_14_attributes$002Epro_4 {
    public Predicate exec(Prolog engine) {
    // '$dummy_14_attributes.pro'(A,B,C,D):-B=slope(D,C,A),!,fail
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dummy_14_attributes.pro'(A,B,C,D):-['$get_level'(E),'$unify'(B,slope(D,C,A)),'$cut'(E),fail]
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a4, a3, a1};
        a6 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(2),a(6))
        if (! a2.unify(a6, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(5))
        a5 = a5.dereference();
        if (! a5.isInteger()) {
            throw new IllegalTypeException("integer", a5);
        } else {
            engine.cut(((IntegerTerm) a5).intValue());
        }
        //END inline expansion
        //START inline expansion of fail
        return engine.fail();
        //END inline expansion
    }
}

class PRED_$dummy_14_attributes$002Epro_4_2 extends PRED_$dummy_14_attributes$002Epro_4 {
    public Predicate exec(Prolog engine) {
    // '$dummy_14_attributes.pro'(A,B,C,D):-true
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // '$dummy_14_attributes.pro'(A,B,C,D):-[]
        return cont;
    }
}
