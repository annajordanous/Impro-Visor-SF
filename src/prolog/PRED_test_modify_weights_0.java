import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_modify_weights/0</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_modify_weights_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("attr_median_diff", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("density");
    static IntegerTerm si5 = new IntegerTerm(2);
    static Term[] s6 = {s4, si5};
    static StructureTerm s7 = new StructureTerm(s3, s6);
    static Term[] s8 = {s2, s7};
    static StructureTerm s9 = new StructureTerm(s1, s8);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("variety");
    static IntegerTerm si11 = new IntegerTerm(20);
    static Term[] s12 = {s10, si11};
    static StructureTerm s13 = new StructureTerm(s3, s12);
    static Term[] s14 = {s2, s13};
    static StructureTerm s15 = new StructureTerm(s1, s14);
    static IntegerTerm si16 = new IntegerTerm(5);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("[]");
    static ListTerm s18 = new ListTerm(si16, s17);
    static ListTerm s19 = new ListTerm(s4, s18);
    static ListTerm s20 = new ListTerm(s19, s17);
    static IntegerTerm si21 = new IntegerTerm(7);
    static ListTerm s22 = new ListTerm(si21, s17);
    static ListTerm s23 = new ListTerm(s4, s22);
    static IntegerTerm si24 = new IntegerTerm(4);
    static ListTerm s25 = new ListTerm(si24, s17);
    static ListTerm s26 = new ListTerm(s10, s25);
    static ListTerm s27 = new ListTerm(s26, s17);
    static ListTerm s28 = new ListTerm(s23, s27);
    static IntegerTerm si29 = new IntegerTerm(1);
    static DoubleTerm sf30 = new DoubleTerm(0.5);
    static ListTerm s31 = new ListTerm(s10, s18);
    static ListTerm s32 = new ListTerm(s31, s17);
    static IntegerTerm si33 = new IntegerTerm(6);
    static ListTerm s34 = new ListTerm(si33, s17);
    static ListTerm s35 = new ListTerm(s4, s34);
    static IntegerTerm si36 = new IntegerTerm(25);
    static ListTerm s37 = new ListTerm(si36, s17);
    static ListTerm s38 = new ListTerm(s10, s37);
    static ListTerm s39 = new ListTerm(s38, s17);
    static ListTerm s40 = new ListTerm(s35, s39);
    static ListTerm s41 = new ListTerm(s35, s27);
    static SymbolTerm s42 = SymbolTerm.makeSymbol("syncopation");
    static IntegerTerm si43 = new IntegerTerm(0);
    static ListTerm s44 = new ListTerm(si43, s17);
    static ListTerm s45 = new ListTerm(s42, s44);
    static ListTerm s46 = new ListTerm(s45, s17);
    static ListTerm s47 = new ListTerm(s4, s25);
    static ListTerm s48 = new ListTerm(s47, s17);
    static ListTerm s49 = new ListTerm(s35, s17);
    static DoubleTerm sf50 = new DoubleTerm(6.01);
    static ListTerm s51 = new ListTerm(sf50, s17);
    static ListTerm s52 = new ListTerm(s4, s51);
    static ListTerm s53 = new ListTerm(s52, s17);

    public PRED_test_modify_weights_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_modify_weights_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_modify_weights";
    }

    public Predicate exec(Prolog engine) {
    // test_modify_weights:-retract_medians,assert(attr_median_diff(density,2)),assert(attr_median_diff(variety,20)),modify_weights([[density,5]],[[density,7],[variety,4]],1,0.5),modify_weights([[variety,5]],[[density,6],[variety,25]],1,0.5),modify_weights([],[[density,6],[variety,4]],1,1),modify_weights([[syncopation,0]],[[density,6],[variety,4]],1,1),modify_weights([[density,4]],[[density,6]],1,0.5),modify_weights([[density,4]],[[density,6.01]],1,A),A<0.5,retract_medians
        engine.setB0();
        Term a1;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;
    // test_modify_weights:-[retract_medians,assert(user:attr_median_diff(density,2)),assert(user:attr_median_diff(variety,20)),modify_weights([[density,5]],[[density,7],[variety,4]],1,0.5),modify_weights([[variety,5]],[[density,6],[variety,25]],1,0.5),modify_weights([],[[density,6],[variety,4]],1,1),modify_weights([[syncopation,0]],[[density,6],[variety,4]],1,1),modify_weights([[density,4]],[[density,6]],1,0.5),modify_weights([[density,4]],[[density,6.01]],1,A),'$less_than'(A,0.5),retract_medians]
        a1 = new VariableTerm(engine);
        p1 = new PRED_retract_medians_0(cont);
        p2 = new PRED_$less_than_2(a1, sf30, p1);
        p3 = new PRED_modify_weights_4(s48, s53, si29, a1, p2);
        p4 = new PRED_modify_weights_4(s48, s49, si29, sf30, p3);
        p5 = new PRED_modify_weights_4(s46, s41, si29, si29, p4);
        p6 = new PRED_modify_weights_4(s17, s41, si29, si29, p5);
        p7 = new PRED_modify_weights_4(s32, s40, si29, sf30, p6);
        p8 = new PRED_modify_weights_4(s20, s28, si29, sf30, p7);
        p9 = new PRED_assert_1(s15, p8);
        p10 = new PRED_assert_1(s9, p9);
        return new PRED_retract_medians_0(p10);
    }
}
