import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>rest/2</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_rest_2 extends Predicate {

    public Term arg1, arg2;

    public PRED_rest_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_rest_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "rest(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
    // rest([A|B],B):-true
        engine.setB0();
        Term a1, a2, a3;
        a1 = arg1;
        a2 = arg2;
    // rest([A|B],B):-[]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(new VariableTerm(engine), a3), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a2, engine.trail))
            return engine.fail();
        return cont;
    }
}
