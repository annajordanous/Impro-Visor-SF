package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_bag_expand_one_level/0</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_bag_expand_one_level_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("p", 1);
    static IntegerTerm si3 = new IntegerTerm(0);
    static Term[] s4 = {si3};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si7 = new IntegerTerm(1);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("true");
    static Term[] s9 = {s5, s6, si7, s8};
    static StructureTerm s10 = new StructureTerm(s1, s9);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("seg4");
    static SymbolTerm s12 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si15 = new IntegerTerm(4);
    static SymbolTerm s16 = SymbolTerm.makeSymbol(">=", 2);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("c");
    static IntegerTerm si19 = new IntegerTerm(120);
    static Term[] s20 = {s18, si19};
    static StructureTerm s21 = new StructureTerm(s17, s20);
    static ListTerm s22 = new ListTerm(s21, s6);
    static Term[] s23 = {s11, s22, si7, s8};
    static StructureTerm s24 = new StructureTerm(s1, s23);
    static ListTerm s25 = new ListTerm(s24, s6);
    static SymbolTerm s26 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s27 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s28 = SymbolTerm.makeSymbol("attr_median_diff", 2);
    static SymbolTerm s29 = SymbolTerm.makeSymbol("density");
    static Term[] s30 = {s29, si15};
    static StructureTerm s31 = new StructureTerm(s28, s30);
    static Term[] s32 = {s27, s31};
    static StructureTerm s33 = new StructureTerm(s26, s32);
    static Term[] s34 = {si15};
    static StructureTerm s35 = new StructureTerm(s2, s34);
    static ListTerm s36 = new ListTerm(s5, s6);
    static ListTerm s37 = new ListTerm(s11, s36);
    static ListTerm s38 = new ListTerm(s37, s6);
    static ListTerm s39 = new ListTerm(si15, s6);
    static ListTerm s40 = new ListTerm(s29, s39);
    static ListTerm s41 = new ListTerm(s40, s6);
    static DoubleTerm sf42 = new DoubleTerm(0.5);
    static IntegerTerm si43 = new IntegerTerm(5);
    static ListTerm s44 = new ListTerm(si43, s6);
    static ListTerm s45 = new ListTerm(s29, s44);
    static ListTerm s46 = new ListTerm(s45, s6);
    static IntegerTerm si47 = new IntegerTerm(480);
    static Term[] s48 = {si47};
    static StructureTerm s49 = new StructureTerm(s2, s48);

    public PRED_test_bag_expand_one_level_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_bag_expand_one_level_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_bag_expand_one_level";
    }

    public Predicate exec(Prolog engine) {
    // test_bag_expand_one_level:-A=[rule(p(0),[],1,true),rule(p(B),[seg4,p(C)],1,(C is B-4,C>=0)),rule(seg4,[t(c,120)],1,true)],initialize_rules(A,D,E,F),retract_medians,assert(attr_median_diff(density,4)),bag_expand_one_level(p(4),[[seg4,p(0)]],[G],[[density,4]]),G>0.5,bag_expand_one_level(p(4),[[seg4,p(0)]],[H],[[density,5]]),H<0.5,all_rules(I),initialize_rules(I,J,K,L),bag_expand_one_level(p(480),M,N,O),retract_rules
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10;
    // test_bag_expand_one_level:-['$unify'(A,[rule(p(0),[],1,true),rule(p(B),[seg4,p(C)],1,(C is B-4,C>=0)),rule(seg4,[t(c,120)],1,true)]),initialize_rules(A,D,E,F),retract_medians,assert(user:attr_median_diff(density,4)),bag_expand_one_level(p(4),[[seg4,p(0)]],[G],[[density,4]]),'$greater_than'(G,0.5),bag_expand_one_level(p(4),[[seg4,p(0)]],[H],[[density,5]]),'$less_than'(H,0.5),all_rules(I),initialize_rules(I,J,K,L),bag_expand_one_level(p(480),M,N,O),retract_rules]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        Term[] y1 = {a2};
        a3 = new StructureTerm(s2, y1);
        a4 = new VariableTerm(engine);
        Term[] y2 = {a4};
        a5 = new StructureTerm(s2, y2);
        a6 = new ListTerm(a5, s6);
        a7 = new ListTerm(s11, a6);
        Term[] y3 = {a2, si15};
        a8 = new StructureTerm(s14, y3);
        Term[] y4 = {a4, a8};
        a9 = new StructureTerm(s13, y4);
        Term[] y5 = {a4, si3};
        a10 = new StructureTerm(s16, y5);
        Term[] y6 = {a9, a10};
        a11 = new StructureTerm(s12, y6);
        Term[] y7 = {a3, a7, si7, a11};
        a12 = new StructureTerm(s1, y7);
        a13 = new ListTerm(a12, s25);
        a14 = new ListTerm(s10, a13);
        //START inline expansion of $unify(a(1),a(14))
        if (! a1.unify(a14, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a15 = new VariableTerm(engine);
        a16 = new ListTerm(a15, s6);
        a17 = new VariableTerm(engine);
        a18 = new ListTerm(a17, s6);
        a19 = new VariableTerm(engine);
        p1 = new PRED_retract_rules_0(cont);
        p2 = new PRED_bag_expand_one_level_4(s49, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), p1);
        p3 = new PRED_initialize_rules_4(a19, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), p2);
        p4 = new PRED_all_rules_1(a19, p3);
        p5 = new PRED_$less_than_2(a17, sf42, p4);
        p6 = new PRED_bag_expand_one_level_4(s35, s38, a18, s46, p5);
        p7 = new PRED_$greater_than_2(a15, sf42, p6);
        p8 = new PRED_bag_expand_one_level_4(s35, s38, a16, s41, p7);
        p9 = new PRED_assert_1(s33, p8);
        p10 = new PRED_retract_medians_0(p9);
        return new PRED_initialize_rules_4(a1, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), p10);
    }
}
