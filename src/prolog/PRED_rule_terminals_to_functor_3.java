package prolog;













import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>rule_terminals_to_functor/3</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_rule_terminals_to_functor_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("rule", 4);

    public Term arg1, arg2, arg3;

    public PRED_rule_terminals_to_functor_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_rule_terminals_to_functor_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "rule_terminals_to_functor(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
    // rule_terminals_to_functor(rule(A,B,C,D),E,F):-convert_expansion(B,G),'$dummy_5_rule_initialize.pro'(A,E,G),F=rule(A,G,C,D)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
    // rule_terminals_to_functor(rule(A,B,C,D),E,F):-[convert_expansion(B,G),'$dummy_5_rule_initialize.pro'(A,E,G),'$unify'(F,rule(A,G,C,D))]
        a1 = a1.dereference();
        if (a1.isStructure()){
            if (! s1.equals(((StructureTerm)a1).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a1).args();
            a4 = args[0];
            a5 = args[1];
            a6 = args[2];
            a7 = args[3];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            Term[] args = {a4, a5, a6, a7};
            ((VariableTerm) a1).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = new VariableTerm(engine);
        Term[] y1 = {a4, a8, a6, a7};
        a9 = new StructureTerm(s1, y1);
        p1 = new PRED_$unify_2(a3, a9, cont);
        p2 = new PRED_$dummy_5_rule_initialize$002Epro_3(a4, a2, a8, p1);
        return new PRED_convert_expansion_2(a5, a8, p2);
    }
}
