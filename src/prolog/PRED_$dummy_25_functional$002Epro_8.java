package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_25_functional.pro'/8</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_25_functional$002Epro_8 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(0);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("solutions");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("succeeds_n_times");
    static SymbolTerm s5 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("+", 2);
    static IntegerTerm si8 = new IntegerTerm(1);
    static Predicate _$dummy_25_functional$002Epro_8_sub_1 = new PRED_$dummy_25_functional$002Epro_8_sub_1();
    static Predicate _$dummy_25_functional$002Epro_8_1 = new PRED_$dummy_25_functional$002Epro_8_1();
    static Predicate _$dummy_25_functional$002Epro_8_2 = new PRED_$dummy_25_functional$002Epro_8_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8;

    public PRED_$dummy_25_functional$002Epro_8(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Term a8, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        this.cont = cont;
    }

    public PRED_$dummy_25_functional$002Epro_8(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        this.cont = cont;
    }

    public int arity() { return 8; }

    public String toString() {
        return "$dummy_25_functional.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + "," + arg8 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.aregs[8] = arg8;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_25_functional$002Epro_8_1, _$dummy_25_functional$002Epro_8_sub_1);
    }
}

class PRED_$dummy_25_functional$002Epro_8_sub_1 extends PRED_$dummy_25_functional$002Epro_8 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_25_functional$002Epro_8_2);
    }
}

class PRED_$dummy_25_functional$002Epro_8_1 extends PRED_$dummy_25_functional$002Epro_8 {
    public Predicate exec(Prolog engine) {
    // '$dummy_25_functional.pro'(A,B,C,D,E,F,G,H):-D>0,nb_setval(solutions,[]),flag(succeeds_n_times,C,0),E,flag(succeeds_n_times,H,H),H<D,copy_term(G,A),nb_getval(solutions,F),nb_setval(solutions,[A|F]),flag(succeeds_n_times,H,H+1),fail
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$dummy_25_functional.pro'(A,B,C,D,E,F,G,H):-['$greater_than'(D,0),nb_setval(solutions,[]),flag(succeeds_n_times,C,0),call(user:E),flag(succeeds_n_times,H,H),'$less_than'(H,D),copy_term(G,A),nb_getval(solutions,F),nb_setval(solutions,[A|F]),flag(succeeds_n_times,H,H+1),fail]
        //START inline expansion of $greater_than(a(4),si(1))
        try {
            if (Arithmetic.evaluate(a4).arithCompareTo(si1) <= 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        Term[] y1 = {s6, a5};
        a9 = new StructureTerm(s5, y1);
        a10 = new ListTerm(a1, a6);
        Term[] y2 = {a8, si8};
        a11 = new StructureTerm(s7, y2);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_flag_3(s4, a8, a11, p1);
        p3 = new PRED_nb_setval_2(s2, a10, p2);
        p4 = new PRED_nb_getval_2(s2, a6, p3);
        p5 = new PRED_copy_term_2(a7, a1, p4);
        p6 = new PRED_$less_than_2(a8, a4, p5);
        p7 = new PRED_flag_3(s4, a8, a8, p6);
        p8 = new PRED_call_1(a9, p7);
        p9 = new PRED_flag_3(s4, a3, si1, p8);
        return new PRED_nb_setval_2(s2, s3, p9);
    }
}

class PRED_$dummy_25_functional$002Epro_8_2 extends PRED_$dummy_25_functional$002Epro_8 {
    public Predicate exec(Prolog engine) {
    // '$dummy_25_functional.pro'(A,B,C,D,E,F,G,H):-nb_getval(solutions,B)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        cont = engine.cont;
    // '$dummy_25_functional.pro'(A,B,C,D,E,F,G,H):-[nb_getval(solutions,B)]
        return new PRED_nb_getval_2(s2, a2, cont);
    }
}
