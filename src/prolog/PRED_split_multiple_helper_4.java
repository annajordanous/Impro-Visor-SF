import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>split_multiple_helper/4</code> defined in syncopation.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_split_multiple_helper_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static Predicate _split_multiple_helper_4_sub_1 = new PRED_split_multiple_helper_4_sub_1();
    static Predicate _split_multiple_helper_4_1 = new PRED_split_multiple_helper_4_1();
    static Predicate _split_multiple_helper_4_2 = new PRED_split_multiple_helper_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_split_multiple_helper_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_split_multiple_helper_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "split_multiple_helper(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_split_multiple_helper_4_1, _split_multiple_helper_4_sub_1);
    }
}

class PRED_split_multiple_helper_4_sub_1 extends PRED_split_multiple_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_split_multiple_helper_4_2);
    }
}

class PRED_split_multiple_helper_4_1 extends PRED_split_multiple_helper_4 {
    public Predicate exec(Prolog engine) {
    // split_multiple_helper(A,[],B,[A]):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_multiple_helper(A,[],B,[A]):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(new ListTerm(a1, s1), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_split_multiple_helper_4_2 extends PRED_split_multiple_helper_4 {
    public Predicate exec(Prolog engine) {
    // split_multiple_helper(A,[B|C],D,E):-F is B-D,split_helper(A,F,0,[],G,H),I is D+B,split_multiple_helper(H,C,I,J),E=[G|J]
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_multiple_helper(A,[B|C],D,E):-['$minus'(B,D,F),split_helper(A,F,0,[],G,H),'$plus'(D,B,I),split_multiple_helper(H,C,I,J),'$unify'(E,[G|J])]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        //START inline expansion of $minus(a(5),a(3),a(7))
        try {
            if (! a7.unify(Arithmetic.evaluate(a5).subtract(Arithmetic.evaluate(a3)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        a11 = new VariableTerm(engine);
        a12 = new ListTerm(a8, a11);
        p1 = new PRED_$unify_2(a4, a12, cont);
        p2 = new PRED_split_multiple_helper_4(a9, a6, a10, a11, p1);
        p3 = new PRED_$plus_3(a3, a5, a10, p2);
        return new PRED_split_helper_6(a1, a7, si2, s1, a8, a9, p3);
    }
}
