package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>uniq/2</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_uniq_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("member", 2);
    static Predicate _uniq_2_var = new PRED_uniq_2_var();
    static Predicate _uniq_2_var_1 = new PRED_uniq_2_var_1();
    static Predicate _uniq_2_1 = new PRED_uniq_2_1();
    static Predicate _uniq_2_2 = new PRED_uniq_2_2();

    public Term arg1, arg2;

    public PRED_uniq_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_uniq_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "uniq(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_uniq_2_var, _uniq_2_2, _uniq_2_2, _uniq_2_var, _uniq_2_2, _uniq_2_2);
    }
}

class PRED_uniq_2_var extends PRED_uniq_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_uniq_2_1, _uniq_2_var_1);
    }
}

class PRED_uniq_2_var_1 extends PRED_uniq_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_uniq_2_2);
    }
}

class PRED_uniq_2_1 extends PRED_uniq_2 {
    public Predicate exec(Prolog engine) {
    // uniq([],[]):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // uniq([],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_uniq_2_2 extends PRED_uniq_2 {
    public Predicate exec(Prolog engine) {
    // uniq(A,B):-setof(C,member(C,A),B)
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // uniq(A,B):-[setof(C,user:member(C,A),B)]
        a3 = new VariableTerm(engine);
        Term[] y1 = {a3, a1};
        a4 = new StructureTerm(s4, y1);
        Term[] y2 = {s3, a4};
        a5 = new StructureTerm(s2, y2);
        return new PRED_setof_3(a3, a5, a2, cont);
    }
}
