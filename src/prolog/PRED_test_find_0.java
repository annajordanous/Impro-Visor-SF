import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_find/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_find_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("number");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("a");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("b");
    static IntegerTerm si4 = new IntegerTerm(1);
    static IntegerTerm si5 = new IntegerTerm(2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static ListTerm s7 = new ListTerm(si5, s6);
    static ListTerm s8 = new ListTerm(si4, s7);
    static ListTerm s9 = new ListTerm(s3, s8);
    static ListTerm s10 = new ListTerm(s2, s9);

    public PRED_test_find_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_find_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_find";
    }

    public Predicate exec(Prolog engine) {
    // test_find:-find(number,[a,b,1,2],1),find(number,[a,b,1,2],2),'$dummy_18_functional.pro'(A)
        engine.setB0();
        Predicate p1, p2;
    // test_find:-[find(number,[a,b,1,2],1),find(number,[a,b,1,2],2),'$dummy_18_functional.pro'(A)]
        p1 = new PRED_$dummy_18_functional$002Epro_1(new VariableTerm(engine), cont);
        p2 = new PRED_find_3(s1, s10, si5, p1);
        return new PRED_find_3(s1, s10, si4, p2);
    }
}
