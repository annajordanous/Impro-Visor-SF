package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>transpose_attrs_and_map/4</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_transpose_attrs_and_map_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("attribute", 1);

    public Term arg1, arg2, arg3, arg4;

    public PRED_transpose_attrs_and_map_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_transpose_attrs_and_map_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "transpose_attrs_and_map(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
    // transpose_attrs_and_map(A,B,C,D):-bagof(E,attribute(E),F),grab_assocs_and_map(F,A,B,C,D)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
        a4 = arg4;
    // transpose_attrs_and_map(A,B,C,D):-[bagof(E,user:attribute(E),F),grab_assocs_and_map(F,A,B,C,D)]
        a5 = new VariableTerm(engine);
        Term[] y1 = {a5};
        a6 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a6};
        a7 = new StructureTerm(s1, y2);
        a8 = new VariableTerm(engine);
        p1 = new PRED_grab_assocs_and_map_5(a8, a1, a2, a3, a4, cont);
        return new PRED_bagof_3(a5, a7, a8, p1);
    }
}
