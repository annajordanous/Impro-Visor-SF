import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_split_with/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_split_with_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(2);
    static IntegerTerm si3 = new IntegerTerm(3);
    static IntegerTerm si4 = new IntegerTerm(4);
    static IntegerTerm si5 = new IntegerTerm(5);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static ListTerm s7 = new ListTerm(si5, s6);
    static ListTerm s8 = new ListTerm(si1, s7);
    static ListTerm s9 = new ListTerm(si4, s8);
    static ListTerm s10 = new ListTerm(si3, s9);
    static ListTerm s11 = new ListTerm(si1, s10);
    static ListTerm s12 = new ListTerm(si2, s11);
    static ListTerm s13 = new ListTerm(si1, s12);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("equals_one");
    static ListTerm s15 = new ListTerm(si2, s6);
    static ListTerm s16 = new ListTerm(si4, s6);
    static ListTerm s17 = new ListTerm(si3, s16);
    static ListTerm s18 = new ListTerm(s7, s6);
    static ListTerm s19 = new ListTerm(s17, s18);
    static ListTerm s20 = new ListTerm(s15, s19);

    public PRED_test_split_with_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_split_with_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_split_with";
    }

    public Predicate exec(Prolog engine) {
    // test_split_with:-split_with([1,2,1,3,4,1,5],equals_one,[[2],[3,4],[5]])
        engine.setB0();
    // test_split_with:-[split_with([1,2,1,3,4,1,5],equals_one,[[2],[3,4],[5]])]
        return new PRED_split_with_3(s13, s14, s20, cont);
    }
}
