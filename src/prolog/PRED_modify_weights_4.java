package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>modify_weights/4</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_modify_weights_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _modify_weights_4_var = new PRED_modify_weights_4_var();
    static Predicate _modify_weights_4_var_1 = new PRED_modify_weights_4_var_1();
    static Predicate _modify_weights_4_var_2 = new PRED_modify_weights_4_var_2();
    static Predicate _modify_weights_4_con = new PRED_modify_weights_4_con();
    static Predicate _modify_weights_4_con_1 = new PRED_modify_weights_4_con_1();
    static Predicate _modify_weights_4_lis = new PRED_modify_weights_4_lis();
    static Predicate _modify_weights_4_lis_1 = new PRED_modify_weights_4_lis_1();
    static Predicate _modify_weights_4_1 = new PRED_modify_weights_4_1();
    static Predicate _modify_weights_4_2 = new PRED_modify_weights_4_2();
    static Predicate _modify_weights_4_3 = new PRED_modify_weights_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_modify_weights_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_modify_weights_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "modify_weights(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_modify_weights_4_var, _modify_weights_4_1, _modify_weights_4_1, _modify_weights_4_con, _modify_weights_4_1, _modify_weights_4_lis);
    }
}

class PRED_modify_weights_4_var extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_modify_weights_4_1, _modify_weights_4_var_1);
    }
}

class PRED_modify_weights_4_var_1 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_modify_weights_4_2, _modify_weights_4_var_2);
    }
}

class PRED_modify_weights_4_var_2 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_modify_weights_4_3);
    }
}

class PRED_modify_weights_4_con extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_modify_weights_4_1, _modify_weights_4_con_1);
    }
}

class PRED_modify_weights_4_con_1 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_modify_weights_4_2);
    }
}

class PRED_modify_weights_4_lis extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_modify_weights_4_1, _modify_weights_4_lis_1);
    }
}

class PRED_modify_weights_4_lis_1 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_modify_weights_4_3);
    }
}

class PRED_modify_weights_4_1 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
    // modify_weights(A,[],B,B):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // modify_weights(A,[],B,B):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_modify_weights_4_2 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
    // modify_weights([],A,B,B):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // modify_weights([],A,B,B):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_modify_weights_4_3 extends PRED_modify_weights_4 {
    public Predicate exec(Prolog engine) {
    // modify_weights([A|B],C,D,E):-A=[F,G],'$dummy_4_rule_expander.pro'(B,H,I,J,K,G,F,L,M,C,D,E,N)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // modify_weights([A|B],C,D,E):-['$unify'(A,[F,G]),'$dummy_4_rule_expander.pro'(B,H,I,J,K,G,F,L,M,C,D,E,N)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new ListTerm(a8, s1);
        a10 = new ListTerm(a7, a9);
        //START inline expansion of $unify(a(5),a(10))
        if (! a5.unify(a10, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return new PRED_$dummy_4_rule_expander$002Epro_13(a6, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), a8, a7, new VariableTerm(engine), new VariableTerm(engine), a2, a3, a4, new VariableTerm(engine), cont);
    }
}
