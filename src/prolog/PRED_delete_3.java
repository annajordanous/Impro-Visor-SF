import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>delete/3</code> defined in plcafe_defs.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_delete_3 extends Predicate {
    static Predicate _delete_3_top = new PRED_delete_3_top();
    static Predicate _delete_3_sub_1 = new PRED_delete_3_sub_1();
    static Predicate _delete_3_1 = new PRED_delete_3_1();
    static Predicate _delete_3_2 = new PRED_delete_3_2();

    public Term arg1, arg2, arg3;

    public PRED_delete_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_delete_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "delete(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        return _delete_3_top;
    }
}

class PRED_delete_3_top extends PRED_delete_3 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_delete_3_1, _delete_3_sub_1);
    }
}

class PRED_delete_3_sub_1 extends PRED_delete_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_delete_3_2);
    }
}

class PRED_delete_3_1 extends PRED_delete_3 {
    public Predicate exec(Prolog engine) {
    // delete(A,[A|B],B):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // delete(A,[A|B],B):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            a4 = args[1];
        } else if (a2.isVariable()){
            a4 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a1, a4), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a4.unify(a3, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_delete_3_2 extends PRED_delete_3 {
    public Predicate exec(Prolog engine) {
    // delete(A,[B|C],[B|D]):-delete(A,C,D)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // delete(A,[B|C],[B|D]):-[delete(A,C,D)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a2.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! a4.unify(args[0], engine.trail))
                return engine.fail();
            a6 = args[1];
        } else if (a3.isVariable()){
            a6 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a4, a6), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a1;
        engine.aregs[2] = a5;
        engine.aregs[3] = a6;
        engine.cont = cont;
        return _delete_3_top;
    }
}
