import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>syncopation/3</code> defined in syncopation.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_syncopation_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("r");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("+", 2);
    static Predicate _syncopation_3_sub_1 = new PRED_syncopation_3_sub_1();
    static Predicate _syncopation_3_1 = new PRED_syncopation_3_1();
    static Predicate _syncopation_3_2 = new PRED_syncopation_3_2();

    public Term arg1, arg2, arg3;

    public PRED_syncopation_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_syncopation_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "syncopation(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_syncopation_3_1, _syncopation_3_sub_1);
    }
}

class PRED_syncopation_3_sub_1 extends PRED_syncopation_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_syncopation_3_2);
    }
}

class PRED_syncopation_3_1 extends PRED_syncopation_3 {
    public Predicate exec(Prolog engine) {
    // syncopation(A,[B|C],D):-B=t(r,E),F=E+A,syncopation_pad([t(r,F)|C],D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // syncopation(A,[B|C],D):-['$unify'(B,t(r,E)),'$unify'(F,E+A),syncopation_pad([t(r,F)|C],D)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a2.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        Term[] y1 = {s2, a6};
        a7 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(4),a(7))
        if (! a4.unify(a7, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        Term[] y2 = {a6, a1};
        a9 = new StructureTerm(s3, y2);
        //START inline expansion of $unify(a(8),a(9))
        if (! a8.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y3 = {s2, a8};
        a10 = new StructureTerm(s1, y3);
        a11 = new ListTerm(a10, a5);
        return new PRED_syncopation_pad_2(a11, a3, cont);
    }
}

class PRED_syncopation_3_2 extends PRED_syncopation_3 {
    public Predicate exec(Prolog engine) {
    // syncopation(A,[B|C],D):-B\=t(r,E),syncopation_pad([t(r,A),B|C],D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // syncopation(A,[B|C],D):-['$not_unifiable'(B,t(r,E)),syncopation_pad([t(r,A),B|C],D)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a2.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {s2, new VariableTerm(engine)};
        a6 = new StructureTerm(s1, y1);
        //START inline expansion of $not_unifiable(a(4),a(6))
        if (a4.unify(a6, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y2 = {s2, a1};
        a7 = new StructureTerm(s1, y2);
        a8 = new ListTerm(a4, a5);
        a9 = new ListTerm(a7, a8);
        return new PRED_syncopation_pad_2(a9, a3, cont);
    }
}
