package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>map_assert/1</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_map_assert_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("asserting: ");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("user");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _map_assert_1_var = new PRED_map_assert_1_var();
    static Predicate _map_assert_1_var_1 = new PRED_map_assert_1_var_1();
    static Predicate _map_assert_1_1 = new PRED_map_assert_1_1();
    static Predicate _map_assert_1_2 = new PRED_map_assert_1_2();

    public Term arg1;

    public PRED_map_assert_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_map_assert_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "map_assert(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_map_assert_1_var, _fail_0, _fail_0, _map_assert_1_1, _fail_0, _map_assert_1_2);
    }
}

class PRED_map_assert_1_var extends PRED_map_assert_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_map_assert_1_1, _map_assert_1_var_1);
    }
}

class PRED_map_assert_1_var_1 extends PRED_map_assert_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_map_assert_1_2);
    }
}

class PRED_map_assert_1_1 extends PRED_map_assert_1 {
    public Predicate exec(Prolog engine) {
    // map_assert([]):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // map_assert([]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_map_assert_1_2 extends PRED_map_assert_1 {
    public Predicate exec(Prolog engine) {
    // map_assert([A|B]):-write('asserting: '),writeln(A),asserta(A),map_assert(B)
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // map_assert([A|B]):-[write('asserting: '),writeln(A),asserta(user:A),map_assert(B)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a2 = args[0];
            a3 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            a3 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a2, a3), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {s4, a2};
        a4 = new StructureTerm(s3, y1);
        p1 = new PRED_map_assert_1(a3, cont);
        p2 = new PRED_asserta_1(a4, p1);
        p3 = new PRED_writeln_1(a2, p2);
        return new PRED_write_1(s2, p3);
    }
}
