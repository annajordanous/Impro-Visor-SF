import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>initialize_rules/4</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_initialize_rules_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("retracting notation");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("notation", 3);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("attr_memo", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("symbol_duration_memo", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("attr_median_diff", 2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("mapping rule_terminals_to_functor");
    static SymbolTerm s8 = SymbolTerm.makeSymbol("rule_terminals_to_functor");
    static SymbolTerm s9 = SymbolTerm.makeSymbol("asserting rules");
    static SymbolTerm s10 = SymbolTerm.makeSymbol("getting medians");
    static SymbolTerm s11 = SymbolTerm.makeSymbol("median");
    static SymbolTerm s12 = SymbolTerm.makeSymbol("getting median diffs");
    static SymbolTerm s13 = SymbolTerm.makeSymbol("median_diff");
    static SymbolTerm s14 = SymbolTerm.makeSymbol("asserting median diffs");

    public Term arg1, arg2, arg3, arg4;

    public PRED_initialize_rules_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_initialize_rules_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "initialize_rules(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
    // initialize_rules(A,B,C,D):-writeln('retracting notation'),retractall_nonvar(notation(E,F,G)),retractall_nonvar(attr_memo(H,I)),retractall_nonvar(symbol_duration_memo(J,K)),retractall_nonvar(attr_median_diff(L,M)),retractall_nonvar(rule(N,O,P,Q)),writeln('mapping rule_terminals_to_functor'),map_2_out(A,rule_terminals_to_functor,R,B),writeln('asserting rules'),map_assert(B),writeln('getting medians'),attr_statistics(R,median,D,S),writeln('getting median diffs'),attr_statistics(R,median_diff,C,S),writeln('asserting median diffs'),assert_median_diff_map(S,C),!
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
        a4 = arg4;
    // initialize_rules(A,B,C,D):-['$get_level'(E),writeln('retracting notation'),retractall_nonvar(notation(F,G,H)),retractall_nonvar(attr_memo(I,J)),retractall_nonvar(symbol_duration_memo(K,L)),retractall_nonvar(attr_median_diff(M,N)),retractall_nonvar(rule(O,P,Q,R)),writeln('mapping rule_terminals_to_functor'),map_2_out(A,rule_terminals_to_functor,S,B),writeln('asserting rules'),map_assert(B),writeln('getting medians'),attr_statistics(S,median,D,T),writeln('getting median diffs'),attr_statistics(S,median_diff,C,T),writeln('asserting median diffs'),assert_median_diff_map(T,C),'$cut'(E)]
        a5 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(5))
        if (! a5.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a6 = new StructureTerm(s2, y1);
        Term[] y2 = {new VariableTerm(engine), new VariableTerm(engine)};
        a7 = new StructureTerm(s3, y2);
        Term[] y3 = {new VariableTerm(engine), new VariableTerm(engine)};
        a8 = new StructureTerm(s4, y3);
        Term[] y4 = {new VariableTerm(engine), new VariableTerm(engine)};
        a9 = new StructureTerm(s5, y4);
        Term[] y5 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a10 = new StructureTerm(s6, y5);
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_$cut_1(a5, cont);
        p2 = new PRED_assert_median_diff_map_2(a12, a3, p1);
        p3 = new PRED_writeln_1(s14, p2);
        p4 = new PRED_attr_statistics_4(a11, s13, a3, a12, p3);
        p5 = new PRED_writeln_1(s12, p4);
        p6 = new PRED_attr_statistics_4(a11, s11, a4, a12, p5);
        p7 = new PRED_writeln_1(s10, p6);
        p8 = new PRED_map_assert_1(a2, p7);
        p9 = new PRED_writeln_1(s9, p8);
        p10 = new PRED_map_2_out_4(a1, s8, a11, a2, p9);
        p11 = new PRED_writeln_1(s7, p10);
        p12 = new PRED_retractall_nonvar_1(a10, p11);
        p13 = new PRED_retractall_nonvar_1(a9, p12);
        p14 = new PRED_retractall_nonvar_1(a8, p13);
        p15 = new PRED_retractall_nonvar_1(a7, p14);
        p16 = new PRED_retractall_nonvar_1(a6, p15);
        return new PRED_writeln_1(s1, p16);
    }
}
