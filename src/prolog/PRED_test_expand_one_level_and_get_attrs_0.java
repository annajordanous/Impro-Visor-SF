package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_expand_one_level_and_get_attrs/0</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_expand_one_level_and_get_attrs_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("p", 1);
    static IntegerTerm si3 = new IntegerTerm(0);
    static Term[] s4 = {si3};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si7 = new IntegerTerm(1);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("true");
    static Term[] s9 = {s5, s6, si7, s8};
    static StructureTerm s10 = new StructureTerm(s1, s9);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("seg4");
    static SymbolTerm s12 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si15 = new IntegerTerm(4);
    static SymbolTerm s16 = SymbolTerm.makeSymbol(">=", 2);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("seg2");
    static SymbolTerm s18 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s19 = SymbolTerm.makeSymbol("c");
    static IntegerTerm si20 = new IntegerTerm(120);
    static Term[] s21 = {s19, si20};
    static StructureTerm s22 = new StructureTerm(s18, s21);
    static ListTerm s23 = new ListTerm(s22, s6);
    static Term[] s24 = {s11, s23, si7, s8};
    static StructureTerm s25 = new StructureTerm(s1, s24);
    static IntegerTerm si26 = new IntegerTerm(240);
    static Term[] s27 = {s19, si26};
    static StructureTerm s28 = new StructureTerm(s18, s27);
    static ListTerm s29 = new ListTerm(s28, s6);
    static Term[] s30 = {s17, s29, si7, s8};
    static StructureTerm s31 = new StructureTerm(s1, s30);
    static ListTerm s32 = new ListTerm(s31, s6);
    static ListTerm s33 = new ListTerm(s25, s32);
    static Term[] s34 = {si15};
    static StructureTerm s35 = new StructureTerm(s2, s34);
    static ListTerm s36 = new ListTerm(s5, s6);
    static ListTerm s37 = new ListTerm(s11, s36);
    static DoubleTerm sf38 = new DoubleTerm(1.0);
    static SymbolTerm s39 = SymbolTerm.makeSymbol("attrs :");
    static ListTerm s40 = new ListTerm(s5, s23);
    static ListTerm s41 = new ListTerm(s17, s40);

    public PRED_test_expand_one_level_and_get_attrs_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_expand_one_level_and_get_attrs_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_expand_one_level_and_get_attrs";
    }

    public Predicate exec(Prolog engine) {
    // test_expand_one_level_and_get_attrs:-A=[rule(p(0),[],1,true),rule(p(B),[seg4,p(C)],1,(C is B-4,C>=0)),rule(p(B),[seg2,p(C),t(c,120)],1,(C is B-4,C>=0)),rule(seg4,[t(c,120)],1,true),rule(seg2,[t(c,240)],1,true)],initialize_rules(A,D,E,F),expand_one_level_and_get_attrs(p(4),[seg4,p(0)],1.0,C),write('attrs :'),write(C),nl,expand_one_level_and_get_attrs(p(4),[seg2,p(0),t(c,120)],1.0,B),write('attrs :'),write(B),nl,retract_rules
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
    // test_expand_one_level_and_get_attrs:-['$unify'(A,[rule(p(0),[],1,true),rule(p(B),[seg4,p(C)],1,(C is B-4,C>=0)),rule(p(B),[seg2,p(C),t(c,120)],1,(C is B-4,C>=0)),rule(seg4,[t(c,120)],1,true),rule(seg2,[t(c,240)],1,true)]),initialize_rules(A,D,E,F),expand_one_level_and_get_attrs(p(4),[seg4,p(0)],1.0,C),write('attrs :'),write(C),nl,expand_one_level_and_get_attrs(p(4),[seg2,p(0),t(c,120)],1.0,B),write('attrs :'),write(B),nl,retract_rules]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        Term[] y1 = {a2};
        a3 = new StructureTerm(s2, y1);
        a4 = new VariableTerm(engine);
        Term[] y2 = {a4};
        a5 = new StructureTerm(s2, y2);
        a6 = new ListTerm(a5, s6);
        a7 = new ListTerm(s11, a6);
        Term[] y3 = {a2, si15};
        a8 = new StructureTerm(s14, y3);
        Term[] y4 = {a4, a8};
        a9 = new StructureTerm(s13, y4);
        Term[] y5 = {a4, si3};
        a10 = new StructureTerm(s16, y5);
        Term[] y6 = {a9, a10};
        a11 = new StructureTerm(s12, y6);
        Term[] y7 = {a3, a7, si7, a11};
        a12 = new StructureTerm(s1, y7);
        Term[] y8 = {a2};
        a13 = new StructureTerm(s2, y8);
        Term[] y9 = {a4};
        a14 = new StructureTerm(s2, y9);
        a15 = new ListTerm(a14, s23);
        a16 = new ListTerm(s17, a15);
        Term[] y10 = {a2, si15};
        a17 = new StructureTerm(s14, y10);
        Term[] y11 = {a4, a17};
        a18 = new StructureTerm(s13, y11);
        Term[] y12 = {a4, si3};
        a19 = new StructureTerm(s16, y12);
        Term[] y13 = {a18, a19};
        a20 = new StructureTerm(s12, y13);
        Term[] y14 = {a13, a16, si7, a20};
        a21 = new StructureTerm(s1, y14);
        a22 = new ListTerm(a21, s33);
        a23 = new ListTerm(a12, a22);
        a24 = new ListTerm(s10, a23);
        //START inline expansion of $unify(a(1),a(24))
        if (! a1.unify(a24, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_retract_rules_0(cont);
        p2 = new PRED_nl_0(p1);
        p3 = new PRED_write_1(a2, p2);
        p4 = new PRED_write_1(s39, p3);
        p5 = new PRED_expand_one_level_and_get_attrs_4(s35, s41, sf38, a2, p4);
        p6 = new PRED_nl_0(p5);
        p7 = new PRED_write_1(a4, p6);
        p8 = new PRED_write_1(s39, p7);
        p9 = new PRED_expand_one_level_and_get_attrs_4(s35, s37, sf38, a4, p8);
        return new PRED_initialize_rules_4(a1, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), p9);
    }
}
