package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>all_rules/1</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_all_rules_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("s1");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("slope", 3);
    static IntegerTerm si4 = new IntegerTerm(1);
    static IntegerTerm si5 = new IntegerTerm(2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("c8");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("[]");
    static ListTerm s8 = new ListTerm(s6, s7);
    static ListTerm s9 = new ListTerm(s6, s8);
    static Term[] s10 = {si4, si5, s9};
    static StructureTerm s11 = new StructureTerm(s3, s10);
    static ListTerm s12 = new ListTerm(s11, s7);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("true");
    static Term[] s14 = {s2, s12, si4, s13};
    static StructureTerm s15 = new StructureTerm(s1, s14);
    static SymbolTerm s16 = SymbolTerm.makeSymbol("s2");
    static IntegerTerm si17 = new IntegerTerm(-2);
    static IntegerTerm si18 = new IntegerTerm(-1);
    static ListTerm s19 = new ListTerm(s6, s9);
    static ListTerm s20 = new ListTerm(s6, s19);
    static Term[] s21 = {si17, si18, s20};
    static StructureTerm s22 = new StructureTerm(s3, s21);
    static ListTerm s23 = new ListTerm(s22, s7);
    static Term[] s24 = {s16, s23, si4, s13};
    static StructureTerm s25 = new StructureTerm(s1, s24);
    static SymbolTerm s26 = SymbolTerm.makeSymbol("s4");
    static IntegerTerm si27 = new IntegerTerm(3);
    static IntegerTerm si28 = new IntegerTerm(5);
    static SymbolTerm s29 = SymbolTerm.makeSymbol("h2");
    static SymbolTerm s30 = SymbolTerm.makeSymbol("h4");
    static ListTerm s31 = new ListTerm(s30, s7);
    static ListTerm s32 = new ListTerm(s30, s31);
    static ListTerm s33 = new ListTerm(s29, s32);
    static Term[] s34 = {si27, si28, s33};
    static StructureTerm s35 = new StructureTerm(s3, s34);
    static ListTerm s36 = new ListTerm(s35, s7);
    static Term[] s37 = {s26, s36, si28, s13};
    static StructureTerm s38 = new StructureTerm(s1, s37);
    static SymbolTerm s39 = SymbolTerm.makeSymbol("seg4");
    static ListTerm s40 = new ListTerm(s2, s7);
    static ListTerm s41 = new ListTerm(s16, s40);
    static ListTerm s42 = new ListTerm(s2, s41);
    static Term[] s43 = {s39, s42, si4, s13};
    static StructureTerm s44 = new StructureTerm(s1, s43);
    static ListTerm s45 = new ListTerm(s26, s7);
    static Term[] s46 = {s39, s45, si27, s13};
    static StructureTerm s47 = new StructureTerm(s1, s46);
    static SymbolTerm s48 = SymbolTerm.makeSymbol("p", 1);
    static IntegerTerm si49 = new IntegerTerm(0);
    static Term[] s50 = {si49};
    static StructureTerm s51 = new StructureTerm(s48, s50);
    static Term[] s52 = {s51, s7, si4, s13};
    static StructureTerm s53 = new StructureTerm(s1, s52);
    static SymbolTerm s54 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s55 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s56 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si57 = new IntegerTerm(4);
    static SymbolTerm s58 = SymbolTerm.makeSymbol(">=", 2);

    public Term arg1;

    public PRED_all_rules_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_all_rules_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "all_rules(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // all_rules([rule(s1,[slope(1,2,[c8,c8])],1,true),rule(s2,[slope(-2,-1,[c8,c8,c8,c8])],1,true),rule(s4,[slope(3,5,[h2,h4,h4])],5,true),rule(seg4,[s1,s2,s1],1,true),rule(seg4,[s4],3,true),rule(p(0),[],1,true),rule(p(A),[seg4,p(B)],1,(B is A-4,B>=0))]):-true
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18;
        a1 = arg1;
    // all_rules([rule(s1,[slope(1,2,[c8,c8])],1,true),rule(s2,[slope(-2,-1,[c8,c8,c8,c8])],1,true),rule(s4,[slope(3,5,[h2,h4,h4])],5,true),rule(seg4,[s1,s2,s1],1,true),rule(seg4,[s4],3,true),rule(p(0),[],1,true),rule(p(A),[seg4,p(B)],1,(B is A-4,B>=0))]):-[]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            if (! s15.unify(args[0], engine.trail))
                return engine.fail();
            a2 = args[1];
        } else if (a1.isVariable()){
            a2 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(s15, a2), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! s25.unify(args[0], engine.trail))
                return engine.fail();
            a3 = args[1];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(s25, a3), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! s38.unify(args[0], engine.trail))
                return engine.fail();
            a4 = args[1];
        } else if (a3.isVariable()){
            a4 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(s38, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! s44.unify(args[0], engine.trail))
                return engine.fail();
            a5 = args[1];
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(s44, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isList()){
            Term[] args = {((ListTerm)a5).car(), ((ListTerm)a5).cdr()};
            if (! s47.unify(args[0], engine.trail))
                return engine.fail();
            a6 = args[1];
        } else if (a5.isVariable()){
            a6 = new VariableTerm(engine);
            ((VariableTerm) a5).bind(new ListTerm(s47, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isList()){
            Term[] args = {((ListTerm)a6).car(), ((ListTerm)a6).cdr()};
            if (! s53.unify(args[0], engine.trail))
                return engine.fail();
            a7 = args[1];
        } else if (a6.isVariable()){
            a7 = new VariableTerm(engine);
            ((VariableTerm) a6).bind(new ListTerm(s53, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = a7.dereference();
        if (a7.isList()){
            Term[] args = {((ListTerm)a7).car(), ((ListTerm)a7).cdr()};
            a8 = args[0];
            if (! s7.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a7.isVariable()){
            a8 = new VariableTerm(engine);
            ((VariableTerm) a7).bind(new ListTerm(a8, s7), engine.trail);
        } else {
            return engine.fail();
        }
        a8 = a8.dereference();
        if (a8.isStructure()){
            if (! s1.equals(((StructureTerm)a8).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a8).args();
            a9 = args[0];
            a10 = args[1];
            if (! si4.unify(args[2], engine.trail))
                return engine.fail();
            a11 = args[3];
        } else if (a8.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            a11 = new VariableTerm(engine);
            Term[] args = {a9, a10, si4, a11};
            ((VariableTerm) a8).bind(new StructureTerm(s1, args), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = a9.dereference();
        if (a9.isStructure()){
            if (! s48.equals(((StructureTerm)a9).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a9).args();
            a12 = args[0];
        } else if (a9.isVariable()){
            a12 = new VariableTerm(engine);
            Term[] args = {a12};
            ((VariableTerm) a9).bind(new StructureTerm(s48, args), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = a10.dereference();
        if (a10.isList()){
            Term[] args = {((ListTerm)a10).car(), ((ListTerm)a10).cdr()};
            if (! s39.unify(args[0], engine.trail))
                return engine.fail();
            a13 = args[1];
        } else if (a10.isVariable()){
            a13 = new VariableTerm(engine);
            ((VariableTerm) a10).bind(new ListTerm(s39, a13), engine.trail);
        } else {
            return engine.fail();
        }
        a13 = a13.dereference();
        if (a13.isList()){
            Term[] args = {((ListTerm)a13).car(), ((ListTerm)a13).cdr()};
            a14 = args[0];
            if (! s7.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a13.isVariable()){
            a14 = new VariableTerm(engine);
            ((VariableTerm) a13).bind(new ListTerm(a14, s7), engine.trail);
        } else {
            return engine.fail();
        }
        a14 = a14.dereference();
        if (a14.isStructure()){
            if (! s48.equals(((StructureTerm)a14).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a14).args();
            a15 = args[0];
        } else if (a14.isVariable()){
            a15 = new VariableTerm(engine);
            Term[] args = {a15};
            ((VariableTerm) a14).bind(new StructureTerm(s48, args), engine.trail);
        } else {
            return engine.fail();
        }
        a11 = a11.dereference();
        if (a11.isStructure()){
            if (! s54.equals(((StructureTerm)a11).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a11).args();
            a16 = args[0];
            a17 = args[1];
        } else if (a11.isVariable()){
            a16 = new VariableTerm(engine);
            a17 = new VariableTerm(engine);
            Term[] args = {a16, a17};
            ((VariableTerm) a11).bind(new StructureTerm(s54, args), engine.trail);
        } else {
            return engine.fail();
        }
        a16 = a16.dereference();
        if (a16.isStructure()){
            if (! s55.equals(((StructureTerm)a16).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a16).args();
            if (! a15.unify(args[0], engine.trail))
                return engine.fail();
            a18 = args[1];
        } else if (a16.isVariable()){
            a18 = new VariableTerm(engine);
            Term[] args = {a15, a18};
            ((VariableTerm) a16).bind(new StructureTerm(s55, args), engine.trail);
        } else {
            return engine.fail();
        }
        a18 = a18.dereference();
        if (a18.isStructure()){
            if (! s56.equals(((StructureTerm)a18).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a18).args();
            if (! a12.unify(args[0], engine.trail))
                return engine.fail();
            if (! si57.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a18.isVariable()){
            Term[] args = {a12, si57};
            ((VariableTerm) a18).bind(new StructureTerm(s56, args), engine.trail);
        } else {
            return engine.fail();
        }
        a17 = a17.dereference();
        if (a17.isStructure()){
            if (! s58.equals(((StructureTerm)a17).functor()))
                return engine.fail();
            Term[] args = ((StructureTerm)a17).args();
            if (! a15.unify(args[0], engine.trail))
                return engine.fail();
            if (! si49.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a17.isVariable()){
            Term[] args = {a15, si49};
            ((VariableTerm) a17).bind(new StructureTerm(s58, args), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
