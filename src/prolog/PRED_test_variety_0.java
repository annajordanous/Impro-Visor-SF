import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_variety/0</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_variety_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(200);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("c");
    static IntegerTerm si4 = new IntegerTerm(120);
    static Term[] s5 = {s3, si4};
    static StructureTerm s6 = new StructureTerm(s2, s5);
    static IntegerTerm si7 = new IntegerTerm(80);
    static Term[] s8 = {s3, si7};
    static StructureTerm s9 = new StructureTerm(s2, s8);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("[]");
    static ListTerm s11 = new ListTerm(s9, s10);
    static ListTerm s12 = new ListTerm(s6, s11);
    static DoubleTerm sf13 = new DoubleTerm(0.01);
    static IntegerTerm si14 = new IntegerTerm(240);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("l");
    static Term[] s16 = {s15, si4};
    static StructureTerm s17 = new StructureTerm(s2, s16);
    static ListTerm s18 = new ListTerm(s6, s10);
    static ListTerm s19 = new ListTerm(s17, s18);
    static ListTerm s20 = new ListTerm(s6, s18);
    static IntegerTerm si21 = new IntegerTerm(1);
    static IntegerTerm si22 = new IntegerTerm(480);
    static SymbolTerm s23 = SymbolTerm.makeSymbol("r");
    static Term[] s24 = {s23, si22};
    static StructureTerm s25 = new StructureTerm(s2, s24);
    static ListTerm s26 = new ListTerm(s25, s10);

    public PRED_test_variety_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_variety_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_variety";
    }

    public Predicate exec(Prolog engine) {
    // test_variety:-variety(200,[t(c,120),t(c,80)],0.01),variety(240,[t(l,120),t(c,120)],A),variety(240,[t(c,120),t(c,120)],A),B is 1/120,variety(120,[t(c,120)],B),variety(480,[t(r,480)],C)
        engine.setB0();
        Term a1, a2;
        Predicate p1, p2, p3, p4, p5;
    // test_variety:-[variety(200,[t(c,120),t(c,80)],0.01),variety(240,[t(l,120),t(c,120)],A),variety(240,[t(c,120),t(c,120)],A),'$float_quotient'(1,120,B),variety(120,[t(c,120)],B),variety(480,[t(r,480)],C)]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        p1 = new PRED_variety_3(si22, s26, new VariableTerm(engine), cont);
        p2 = new PRED_variety_3(si4, s18, a2, p1);
        p3 = new PRED_$float_quotient_3(si21, si4, a2, p2);
        p4 = new PRED_variety_3(si14, s20, a1, p3);
        p5 = new PRED_variety_3(si14, s19, a1, p4);
        return new PRED_variety_3(si1, s12, sf13, p5);
    }
}
