package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_transpose_attrs/0</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_transpose_attrs_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("density");
    static IntegerTerm si2 = new IntegerTerm(5);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static ListTerm s4 = new ListTerm(si2, s3);
    static ListTerm s5 = new ListTerm(s1, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("syncopation");
    static DoubleTerm sf7 = new DoubleTerm(0.001);
    static ListTerm s8 = new ListTerm(sf7, s3);
    static ListTerm s9 = new ListTerm(s6, s8);
    static ListTerm s10 = new ListTerm(s9, s3);
    static ListTerm s11 = new ListTerm(s5, s10);
    static IntegerTerm si12 = new IntegerTerm(1);
    static ListTerm s13 = new ListTerm(si12, s3);
    static ListTerm s14 = new ListTerm(s6, s13);
    static SymbolTerm s15 = SymbolTerm.makeSymbol("leap_size");
    static IntegerTerm si16 = new IntegerTerm(2);
    static ListTerm s17 = new ListTerm(si16, s3);
    static ListTerm s18 = new ListTerm(s15, s17);
    static ListTerm s19 = new ListTerm(s18, s3);
    static ListTerm s20 = new ListTerm(s14, s19);
    static ListTerm s21 = new ListTerm(s5, s20);
    static IntegerTerm si22 = new IntegerTerm(4);
    static ListTerm s23 = new ListTerm(si22, s3);
    static ListTerm s24 = new ListTerm(s1, s23);
    static SymbolTerm s25 = SymbolTerm.makeSymbol("variety");
    static IntegerTerm si26 = new IntegerTerm(9001);
    static ListTerm s27 = new ListTerm(si26, s3);
    static ListTerm s28 = new ListTerm(s25, s27);
    static ListTerm s29 = new ListTerm(s28, s3);
    static ListTerm s30 = new ListTerm(s24, s29);
    static ListTerm s31 = new ListTerm(s3, s3);
    static ListTerm s32 = new ListTerm(s30, s31);
    static ListTerm s33 = new ListTerm(s21, s32);
    static ListTerm s34 = new ListTerm(s11, s33);
    static ListTerm s35 = new ListTerm(si2, s23);
    static ListTerm s36 = new ListTerm(si2, s35);
    static ListTerm s37 = new ListTerm(s36, s3);
    static ListTerm s38 = new ListTerm(s1, s37);
    static ListTerm s39 = new ListTerm(s27, s3);
    static ListTerm s40 = new ListTerm(s25, s39);
    static ListTerm s41 = new ListTerm(s17, s3);
    static ListTerm s42 = new ListTerm(s15, s41);
    static ListTerm s43 = new ListTerm(sf7, s13);
    static ListTerm s44 = new ListTerm(s43, s3);
    static ListTerm s45 = new ListTerm(s6, s44);
    static ListTerm s46 = new ListTerm(s45, s3);
    static ListTerm s47 = new ListTerm(s42, s46);
    static ListTerm s48 = new ListTerm(s40, s47);
    static ListTerm s49 = new ListTerm(s38, s48);

    public PRED_test_transpose_attrs_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_transpose_attrs_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_transpose_attrs";
    }

    public Predicate exec(Prolog engine) {
    // test_transpose_attrs:-transpose_attrs([[[density,5],[syncopation,0.001]],[[density,5],[syncopation,1],[leap_size,2]],[[density,4],[variety,9001]],[]],[[density,[5,5,4]],[variety,[9001]],[leap_size,[2]],[syncopation,[0.001,1]]])
        engine.setB0();
    // test_transpose_attrs:-[transpose_attrs([[[density,5],[syncopation,0.001]],[[density,5],[syncopation,1],[leap_size,2]],[[density,4],[variety,9001]],[]],[[density,[5,5,4]],[variety,[9001]],[leap_size,[2]],[syncopation,[0.001,1]]])]
        return new PRED_transpose_attrs_2(s34, s49, cont);
    }
}
