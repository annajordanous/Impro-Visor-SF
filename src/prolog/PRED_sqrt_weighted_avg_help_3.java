import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>sqrt_weighted_avg_help/3</code> defined in statistics.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_sqrt_weighted_avg_help_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("sum");
    static IntegerTerm si3 = new IntegerTerm(-1);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _sqrt_weighted_avg_help_3_var = new PRED_sqrt_weighted_avg_help_3_var();
    static Predicate _sqrt_weighted_avg_help_3_var_1 = new PRED_sqrt_weighted_avg_help_3_var_1();
    static Predicate _sqrt_weighted_avg_help_3_1 = new PRED_sqrt_weighted_avg_help_3_1();
    static Predicate _sqrt_weighted_avg_help_3_2 = new PRED_sqrt_weighted_avg_help_3_2();

    public Term arg1, arg2, arg3;

    public PRED_sqrt_weighted_avg_help_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_sqrt_weighted_avg_help_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "sqrt_weighted_avg_help(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_sqrt_weighted_avg_help_3_var, _fail_0, _fail_0, _sqrt_weighted_avg_help_3_1, _fail_0, _sqrt_weighted_avg_help_3_2);
    }
}

class PRED_sqrt_weighted_avg_help_3_var extends PRED_sqrt_weighted_avg_help_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_sqrt_weighted_avg_help_3_1, _sqrt_weighted_avg_help_3_var_1);
    }
}

class PRED_sqrt_weighted_avg_help_3_var_1 extends PRED_sqrt_weighted_avg_help_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_sqrt_weighted_avg_help_3_2);
    }
}

class PRED_sqrt_weighted_avg_help_3_1 extends PRED_sqrt_weighted_avg_help_3 {
    public Predicate exec(Prolog engine) {
    // sqrt_weighted_avg_help([],[],[]):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // sqrt_weighted_avg_help([],[],[]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_sqrt_weighted_avg_help_3_2 extends PRED_sqrt_weighted_avg_help_3 {
    public Predicate exec(Prolog engine) {
    // sqrt_weighted_avg_help([A|B],[C|D],[E|F]):-flag(sum,G,-1),H is G+A,flag(sum,I,H),E is A*C*C,weighted_avg_help(B,D,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // sqrt_weighted_avg_help([A|B],[C|D],[E|F]):-[flag(sum,G,-1),'$plus'(G,A,H),flag(sum,I,H),'$multi'(A,C,J),'$multi'(J,C,E),weighted_avg_help(B,D,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a8 = args[0];
            a9 = args[1];
        } else if (a3.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a8, a9), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_weighted_avg_help_3(a5, a7, a9, cont);
        p2 = new PRED_$multi_3(a12, a6, a8, p1);
        p3 = new PRED_$multi_3(a4, a6, a12, p2);
        p4 = new PRED_flag_3(s2, new VariableTerm(engine), a11, p3);
        p5 = new PRED_$plus_3(a10, a4, a11, p4);
        return new PRED_flag_3(s2, a10, si3, p5);
    }
}
