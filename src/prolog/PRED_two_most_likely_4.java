package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>two_most_likely/4</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_two_most_likely_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static ListTerm s3 = new ListTerm(s1, s1);
    static ListTerm s4 = new ListTerm(si2, s3);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _two_most_likely_4_var = new PRED_two_most_likely_4_var();
    static Predicate _two_most_likely_4_var_1 = new PRED_two_most_likely_4_var_1();
    static Predicate _two_most_likely_4_1 = new PRED_two_most_likely_4_1();
    static Predicate _two_most_likely_4_2 = new PRED_two_most_likely_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_two_most_likely_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_two_most_likely_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "two_most_likely(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_two_most_likely_4_var, _fail_0, _fail_0, _fail_0, _fail_0, _two_most_likely_4_var);
    }
}

class PRED_two_most_likely_4_var extends PRED_two_most_likely_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_two_most_likely_4_1, _two_most_likely_4_var_1);
    }
}

class PRED_two_most_likely_4_var_1 extends PRED_two_most_likely_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_two_most_likely_4_2);
    }
}

class PRED_two_most_likely_4_1 extends PRED_two_most_likely_4 {
    public Predicate exec(Prolog engine) {
    // two_most_likely([A],[B],[A,B],[0,[]]):-!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // two_most_likely([A],[B],[A,B],[0,[]]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a5, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            if (! a5.unify(args[0], engine.trail))
                return engine.fail();
            a7 = args[1];
        } else if (a3.isVariable()){
            a7 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = a7.dereference();
        if (a7.isList()){
            Term[] args = {((ListTerm)a7).car(), ((ListTerm)a7).cdr()};
            if (! a6.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a7.isVariable()){
            ((VariableTerm) a7).bind(new ListTerm(a6, s1), engine.trail);
        } else {
            return engine.fail();
        }
        if (! s4.unify(a4, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_two_most_likely_4_2 extends PRED_two_most_likely_4 {
    public Predicate exec(Prolog engine) {
    // two_most_likely([A,B|C],[D,E|F],G,H):-'$dummy_9_attributes.pro'(E,G,H,B,A,D,C,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // two_most_likely([A,B|C],[D,E|F],G,H):-['$dummy_9_attributes.pro'(E,G,H,B,A,D,C,F)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isList()){
            Term[] args = {((ListTerm)a6).car(), ((ListTerm)a6).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a6.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a6).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a9 = args[0];
            a10 = args[1];
        } else if (a2.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a9, a10), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = a10.dereference();
        if (a10.isList()){
            Term[] args = {((ListTerm)a10).car(), ((ListTerm)a10).cdr()};
            a11 = args[0];
            a12 = args[1];
        } else if (a10.isVariable()){
            a11 = new VariableTerm(engine);
            a12 = new VariableTerm(engine);
            ((VariableTerm) a10).bind(new ListTerm(a11, a12), engine.trail);
        } else {
            return engine.fail();
        }
        return new PRED_$dummy_9_attributes$002Epro_8(a11, a3, a4, a7, a5, a9, a8, a12, cont);
    }
}
