import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_pick_random/0</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_pick_random_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(2);
    static IntegerTerm si3 = new IntegerTerm(3);
    static IntegerTerm si4 = new IntegerTerm(4);
    static IntegerTerm si5 = new IntegerTerm(5);
    static IntegerTerm si6 = new IntegerTerm(6);
    static IntegerTerm si7 = new IntegerTerm(7);
    static IntegerTerm si8 = new IntegerTerm(8);
    static IntegerTerm si9 = new IntegerTerm(9);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("[]");
    static ListTerm s11 = new ListTerm(si9, s10);
    static ListTerm s12 = new ListTerm(si8, s11);
    static ListTerm s13 = new ListTerm(si7, s12);
    static ListTerm s14 = new ListTerm(si6, s13);
    static ListTerm s15 = new ListTerm(si5, s14);
    static ListTerm s16 = new ListTerm(si4, s15);
    static ListTerm s17 = new ListTerm(si3, s16);
    static ListTerm s18 = new ListTerm(si2, s17);
    static ListTerm s19 = new ListTerm(si1, s18);
    static SymbolTerm s20 = SymbolTerm.makeSymbol("a");
    static SymbolTerm s21 = SymbolTerm.makeSymbol("b");
    static SymbolTerm s22 = SymbolTerm.makeSymbol("c");
    static SymbolTerm s23 = SymbolTerm.makeSymbol("d");
    static SymbolTerm s24 = SymbolTerm.makeSymbol("e");
    static SymbolTerm s25 = SymbolTerm.makeSymbol("f");
    static SymbolTerm s26 = SymbolTerm.makeSymbol("g");
    static SymbolTerm s27 = SymbolTerm.makeSymbol("h");
    static SymbolTerm s28 = SymbolTerm.makeSymbol("i");
    static ListTerm s29 = new ListTerm(s28, s10);
    static ListTerm s30 = new ListTerm(s27, s29);
    static ListTerm s31 = new ListTerm(s26, s30);
    static ListTerm s32 = new ListTerm(s25, s31);
    static ListTerm s33 = new ListTerm(s24, s32);
    static ListTerm s34 = new ListTerm(s23, s33);
    static ListTerm s35 = new ListTerm(s22, s34);
    static ListTerm s36 = new ListTerm(s21, s35);
    static ListTerm s37 = new ListTerm(s20, s36);
    static SymbolTerm s38 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s39 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s40 = SymbolTerm.makeSymbol("pick_random", 3);

    public PRED_test_pick_random_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_pick_random_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_pick_random";
    }

    public Predicate exec(Prolog engine) {
    // test_pick_random:-A=[1,2,3,4,5,6,7,8,9],B=[a,b,c,d,e,f,g,h,i],setof(C,pick_random(A,B,C),B)
        engine.setB0();
        Term a1, a2, a3, a4, a5;
    // test_pick_random:-['$unify'(A,[1,2,3,4,5,6,7,8,9]),'$unify'(B,[a,b,c,d,e,f,g,h,i]),setof(C,user:pick_random(A,B,C),B)]
        a1 = new VariableTerm(engine);
        //START inline expansion of $unify(a(1),s(19))
        if (! a1.unify(s19, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a2 = new VariableTerm(engine);
        //START inline expansion of $unify(a(2),s(37))
        if (! a2.unify(s37, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        Term[] y1 = {a1, a2, a3};
        a4 = new StructureTerm(s40, y1);
        Term[] y2 = {s39, a4};
        a5 = new StructureTerm(s38, y2);
        return new PRED_setof_3(a3, a5, a2, cont);
    }
}
