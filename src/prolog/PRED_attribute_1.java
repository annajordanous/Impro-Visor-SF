package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>attribute/1</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_attribute_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("density");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("variety");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("consonance");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("direction_change");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("leap_size");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("syncopation");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _attribute_1_var = new PRED_attribute_1_var();
    static Predicate _attribute_1_var_1 = new PRED_attribute_1_var_1();
    static Predicate _attribute_1_var_2 = new PRED_attribute_1_var_2();
    static Predicate _attribute_1_var_3 = new PRED_attribute_1_var_3();
    static Predicate _attribute_1_var_4 = new PRED_attribute_1_var_4();
    static Predicate _attribute_1_var_5 = new PRED_attribute_1_var_5();
    static Predicate _attribute_1_con = new PRED_attribute_1_con();
    static Predicate _attribute_1_1 = new PRED_attribute_1_1();
    static Predicate _attribute_1_2 = new PRED_attribute_1_2();
    static Predicate _attribute_1_3 = new PRED_attribute_1_3();
    static Predicate _attribute_1_4 = new PRED_attribute_1_4();
    static Predicate _attribute_1_5 = new PRED_attribute_1_5();
    static Predicate _attribute_1_6 = new PRED_attribute_1_6();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(6);
    static {
        con.put(s1, _attribute_1_1);
        con.put(s2, _attribute_1_2);
        con.put(s3, _attribute_1_3);
        con.put(s4, _attribute_1_4);
        con.put(s5, _attribute_1_5);
        con.put(s6, _attribute_1_6);
    }

    public Term arg1;

    public PRED_attribute_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_attribute_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "attribute(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_attribute_1_var, _fail_0, _fail_0, _attribute_1_con, _fail_0, _fail_0);
    }
}

class PRED_attribute_1_var extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_attribute_1_1, _attribute_1_var_1);
    }
}

class PRED_attribute_1_var_1 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_attribute_1_2, _attribute_1_var_2);
    }
}

class PRED_attribute_1_var_2 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_attribute_1_3, _attribute_1_var_3);
    }
}

class PRED_attribute_1_var_3 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_attribute_1_4, _attribute_1_var_4);
    }
}

class PRED_attribute_1_var_4 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_attribute_1_5, _attribute_1_var_5);
    }
}

class PRED_attribute_1_var_5 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_attribute_1_6);
    }
}

class PRED_attribute_1_con extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_attribute_1_1 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(density):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(density):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attribute_1_2 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(variety):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(variety):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attribute_1_3 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(consonance):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(consonance):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s3))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attribute_1_4 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(direction_change):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(direction_change):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attribute_1_5 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(leap_size):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(leap_size):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attribute_1_6 extends PRED_attribute_1 {
    public Predicate exec(Prolog engine) {
    // attribute(syncopation):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // attribute(syncopation):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s6))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
