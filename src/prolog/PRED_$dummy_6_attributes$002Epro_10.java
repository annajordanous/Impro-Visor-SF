package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_6_attributes.pro'/10</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_6_attributes$002Epro_10 extends Predicate {
    static Predicate _$dummy_6_attributes$002Epro_10_sub_1 = new PRED_$dummy_6_attributes$002Epro_10_sub_1();
    static Predicate _$dummy_6_attributes$002Epro_10_1 = new PRED_$dummy_6_attributes$002Epro_10_1();
    static Predicate _$dummy_6_attributes$002Epro_10_2 = new PRED_$dummy_6_attributes$002Epro_10_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10;

    public PRED_$dummy_6_attributes$002Epro_10(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Term a8, Term a9, Term a10, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        arg9 = a9;
        arg10 = a10;
        this.cont = cont;
    }

    public PRED_$dummy_6_attributes$002Epro_10(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        arg9 = args[8];
        arg10 = args[9];
        this.cont = cont;
    }

    public int arity() { return 10; }

    public String toString() {
        return "$dummy_6_attributes.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + "," + arg8 + "," + arg9 + "," + arg10 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.aregs[8] = arg8;
        engine.aregs[9] = arg9;
        engine.aregs[10] = arg10;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_6_attributes$002Epro_10_1, _$dummy_6_attributes$002Epro_10_sub_1);
    }
}

class PRED_$dummy_6_attributes$002Epro_10_sub_1 extends PRED_$dummy_6_attributes$002Epro_10 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_6_attributes$002Epro_10_2);
    }
}

class PRED_$dummy_6_attributes$002Epro_10_1 extends PRED_$dummy_6_attributes$002Epro_10 {
    public Predicate exec(Prolog engine) {
    // '$dummy_6_attributes.pro'(A,B,C,D,E,F,G,H,I,J):-nil(D),!,mapmap_nonterm_attr(E,G,A,I,H)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        a10 = engine.aregs[10];
        cont = engine.cont;
    // '$dummy_6_attributes.pro'(A,B,C,D,E,F,G,H,I,J):-['$get_level'(K),nil(D),'$cut'(K),mapmap_nonterm_attr(E,G,A,I,H)]
        a11 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(11))
        if (! a11.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_mapmap_nonterm_attr_5(a5, a7, a1, a9, a8, cont);
        p2 = new PRED_$cut_1(a11, p1);
        return new PRED_nil_1(a4, p2);
    }
}

class PRED_$dummy_6_attributes$002Epro_10_2 extends PRED_$dummy_6_attributes$002Epro_10 {
    public Predicate exec(Prolog engine) {
    // '$dummy_6_attributes.pro'(A,B,C,D,E,F,G,H,I,J):-J=[D|G],symbol_duration(B,C),F=[C|A],mapmap_nonterm_attr(E,J,F,I,H)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        a10 = engine.aregs[10];
        cont = engine.cont;
    // '$dummy_6_attributes.pro'(A,B,C,D,E,F,G,H,I,J):-['$unify'(J,[D|G]),symbol_duration(B,C),'$unify'(F,[C|A]),mapmap_nonterm_attr(E,J,F,I,H)]
        a11 = new ListTerm(a4, a7);
        //START inline expansion of $unify(a(10),a(11))
        if (! a10.unify(a11, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a12 = new ListTerm(a3, a1);
        p1 = new PRED_mapmap_nonterm_attr_5(a5, a10, a6, a9, a8, cont);
        p2 = new PRED_$unify_2(a6, a12, p1);
        return new PRED_symbol_duration_2(a2, a3, p2);
    }
}
