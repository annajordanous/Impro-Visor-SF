package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>make/1</code> defined in make_structure_term.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_make_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("+", 2);
    static IntegerTerm si4 = new IntegerTerm(3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si6 = new IntegerTerm(2);

    public Term arg1;

    public PRED_make_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_make_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "make(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
    // make(A):-A=(B is 3+C,D is 2-E)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6;
        a1 = arg1;
    // make(A):-['$unify'(A,(B is 3+C,D is 2-E))]
        Term[] y1 = {si4, new VariableTerm(engine)};
        a2 = new StructureTerm(s3, y1);
        Term[] y2 = {new VariableTerm(engine), a2};
        a3 = new StructureTerm(s2, y2);
        Term[] y3 = {si6, new VariableTerm(engine)};
        a4 = new StructureTerm(s5, y3);
        Term[] y4 = {new VariableTerm(engine), a4};
        a5 = new StructureTerm(s2, y4);
        Term[] y5 = {a3, a5};
        a6 = new StructureTerm(s1, y5);
        //START inline expansion of $unify(a(1),a(6))
        if (! a1.unify(a6, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
