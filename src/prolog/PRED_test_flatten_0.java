package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_flatten/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_flatten_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(2);
    static IntegerTerm si3 = new IntegerTerm(3);
    static IntegerTerm si4 = new IntegerTerm(4);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("[]");
    static ListTerm s6 = new ListTerm(si4, s5);
    static ListTerm s7 = new ListTerm(s6, s5);
    static ListTerm s8 = new ListTerm(si3, s7);
    static ListTerm s9 = new ListTerm(s8, s5);
    static ListTerm s10 = new ListTerm(si2, s9);
    static ListTerm s11 = new ListTerm(s10, s5);
    static ListTerm s12 = new ListTerm(si1, s11);
    static ListTerm s13 = new ListTerm(si3, s6);
    static ListTerm s14 = new ListTerm(si2, s13);
    static ListTerm s15 = new ListTerm(si1, s14);
    static SymbolTerm s16 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s17 = SymbolTerm.makeSymbol("member", 2);
    static SymbolTerm s18 = SymbolTerm.makeSymbol("even", 1);
    static SymbolTerm s19 = SymbolTerm.makeSymbol(",");
    static SymbolTerm s20 = SymbolTerm.makeSymbol("member");
    static SymbolTerm s21 = SymbolTerm.makeSymbol("even");

    public PRED_test_flatten_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_flatten_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_flatten";
    }

    public Predicate exec(Prolog engine) {
    // test_flatten:-flatten_term([1,[2,[3,[4]]]],[1,2,3,4]),flatten_term((member(A,[1,2,3,4]),even(A)),[',',member,A,1,2,3,4,even,A])
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1;
    // test_flatten:-[flatten_term([1,[2,[3,[4]]]],[1,2,3,4]),flatten_term((member(A,[1,2,3,4]),even(A)),[',',member,A,1,2,3,4,even,A])]
        a1 = new VariableTerm(engine);
        Term[] y1 = {a1, s15};
        a2 = new StructureTerm(s17, y1);
        Term[] y2 = {a1};
        a3 = new StructureTerm(s18, y2);
        Term[] y3 = {a2, a3};
        a4 = new StructureTerm(s16, y3);
        a5 = new ListTerm(a1, s5);
        a6 = new ListTerm(s21, a5);
        a7 = new ListTerm(si4, a6);
        a8 = new ListTerm(si3, a7);
        a9 = new ListTerm(si2, a8);
        a10 = new ListTerm(si1, a9);
        a11 = new ListTerm(a1, a10);
        a12 = new ListTerm(s20, a11);
        a13 = new ListTerm(s19, a12);
        p1 = new PRED_flatten_term_2(a4, a13, cont);
        return new PRED_flatten_term_2(s12, s15, p1);
    }
}
