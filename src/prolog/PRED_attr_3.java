import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>attr/3</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_attr_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static Predicate _attr_3_sub_1 = new PRED_attr_3_sub_1();
    static Predicate _attr_3_1 = new PRED_attr_3_1();
    static Predicate _attr_3_2 = new PRED_attr_3_2();

    public Term arg1, arg2, arg3;

    public PRED_attr_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_attr_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "attr(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_attr_3_1, _attr_3_sub_1);
    }
}

class PRED_attr_3_sub_1 extends PRED_attr_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_attr_3_2);
    }
}

class PRED_attr_3_1 extends PRED_attr_3 {
    public Predicate exec(Prolog engine) {
    // attr(A,[],[]):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // attr(A,[],[]):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_attr_3_2 extends PRED_attr_3 {
    public Predicate exec(Prolog engine) {
    // attr(A,B,C):-'$dummy_0_attributes.pro'(A,B,D),D\=0,'$dummy_1_attributes.pro'(E,B,D,F),'$dummy_2_attributes.pro'(G,H,B,D,F),attr_helper(B,[],D,I),append(G,I,J),J\=[],C=J
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // attr(A,B,C):-['$dummy_0_attributes.pro'(A,B,D),'$not_unifiable'(D,0),'$dummy_1_attributes.pro'(E,B,D,F),'$dummy_2_attributes.pro'(G,H,B,D,F),attr_helper(B,[],D,I),append(G,I,J),'$not_unifiable'(J,[]),'$unify'(C,J)]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_$unify_2(a3, a8, cont);
        p2 = new PRED_$not_unifiable_2(a8, s1, p1);
        p3 = new PRED_append_3(a6, a7, a8, p2);
        p4 = new PRED_attr_helper_4(a2, s1, a4, a7, p3);
        p5 = new PRED_$dummy_2_attributes$002Epro_5(a6, new VariableTerm(engine), a2, a4, a5, p4);
        p6 = new PRED_$dummy_1_attributes$002Epro_4(new VariableTerm(engine), a2, a4, a5, p5);
        p7 = new PRED_$not_unifiable_2(a4, si2, p6);
        return new PRED_$dummy_0_attributes$002Epro_3(a1, a2, a4, p7);
    }
}
