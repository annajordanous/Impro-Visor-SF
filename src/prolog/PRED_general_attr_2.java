package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>general_attr/2</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_general_attr_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("nonterminal");
    static Predicate _general_attr_2_var = new PRED_general_attr_2_var();
    static Predicate _general_attr_2_var_1 = new PRED_general_attr_2_var_1();
    static Predicate _general_attr_2_1 = new PRED_general_attr_2_1();
    static Predicate _general_attr_2_2 = new PRED_general_attr_2_2();

    public Term arg1, arg2;

    public PRED_general_attr_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_general_attr_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "general_attr(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_general_attr_2_var, _general_attr_2_2, _general_attr_2_2, _general_attr_2_var, _general_attr_2_2, _general_attr_2_2);
    }
}

class PRED_general_attr_2_var extends PRED_general_attr_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_general_attr_2_1, _general_attr_2_var_1);
    }
}

class PRED_general_attr_2_var_1 extends PRED_general_attr_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_general_attr_2_2);
    }
}

class PRED_general_attr_2_1 extends PRED_general_attr_2 {
    public Predicate exec(Prolog engine) {
    // general_attr([],[]):-!
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // general_attr([],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_general_attr_2_2 extends PRED_general_attr_2 {
    public Predicate exec(Prolog engine) {
    // general_attr(A,B):-split_with(A,nonterminal,C,D),mapmap_nonterm_list_attr(D,E,F),map_term_attr(C,E,F,G,H),attrs_combine(H,G,B)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // general_attr(A,B):-[split_with(A,nonterminal,C,D),mapmap_nonterm_list_attr(D,E,F),map_term_attr(C,E,F,G,H),attrs_combine(H,G,B)]
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_attrs_combine_3(a8, a7, a2, cont);
        p2 = new PRED_map_term_attr_5(a3, a5, a6, a7, a8, p1);
        p3 = new PRED_mapmap_nonterm_list_attr_3(a4, a5, a6, p2);
        return new PRED_split_with_4(a1, s2, a3, a4, p3);
    }
}
