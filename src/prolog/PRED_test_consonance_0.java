import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_consonance/0</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_consonance_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(120);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("c");
    static Term[] s4 = {s3, si1};
    static StructureTerm s5 = new StructureTerm(s2, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static ListTerm s7 = new ListTerm(s5, s6);
    static DoubleTerm sf8 = new DoubleTerm(3.0);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("x");
    static Term[] s10 = {s9, si1};
    static StructureTerm s11 = new StructureTerm(s2, s10);
    static ListTerm s12 = new ListTerm(s11, s6);
    static DoubleTerm sf13 = new DoubleTerm(1.0);
    static IntegerTerm si14 = new IntegerTerm(240);
    static DoubleTerm sf15 = new DoubleTerm(120.0);
    static Term[] s16 = {s3, sf15};
    static StructureTerm s17 = new StructureTerm(s2, s16);
    static ListTerm s18 = new ListTerm(s17, s12);
    static DoubleTerm sf19 = new DoubleTerm(2.0);
    static SymbolTerm s20 = SymbolTerm.makeSymbol("r");
    static Term[] s21 = {s20, si14};
    static StructureTerm s22 = new StructureTerm(s2, s21);
    static ListTerm s23 = new ListTerm(s22, s6);

    public PRED_test_consonance_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_consonance_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_consonance";
    }

    public Predicate exec(Prolog engine) {
    // test_consonance:-consonance(120,[t(c,120)],3.0),consonance(120,[t(x,120)],1.0),consonance(240,[t(c,120.0),t(x,120)],2.0),consonance(240,[t(r,240)],3.0)
        engine.setB0();
        Predicate p1, p2, p3;
    // test_consonance:-[consonance(120,[t(c,120)],3.0),consonance(120,[t(x,120)],1.0),consonance(240,[t(c,120.0),t(x,120)],2.0),consonance(240,[t(r,240)],3.0)]
        p1 = new PRED_consonance_3(si14, s23, sf8, cont);
        p2 = new PRED_consonance_3(si14, s18, sf19, p1);
        p3 = new PRED_consonance_3(si1, s12, sf13, p2);
        return new PRED_consonance_3(si1, s7, sf8, p3);
    }
}
