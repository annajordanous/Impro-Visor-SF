import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test/0</code> defined in tester.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":-", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("notation", 3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("fail");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("attr_memo", 2);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("symbol_duration_memo", 2);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("attr_median_diff", 2);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("recorded", 2);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("recorded", 3);
    static SymbolTerm s12 = SymbolTerm.makeSymbol("flagged", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("test_density");
    static SymbolTerm s14 = SymbolTerm.makeSymbol("test_consonance");
    static SymbolTerm s15 = SymbolTerm.makeSymbol("test_variety");
    static SymbolTerm s16 = SymbolTerm.makeSymbol("test_dir_change");
    static SymbolTerm s17 = SymbolTerm.makeSymbol("test_leap");
    static SymbolTerm s18 = SymbolTerm.makeSymbol("test_unfoldr_fn");
    static SymbolTerm s19 = SymbolTerm.makeSymbol("test_assoc_and_pop");
    static SymbolTerm s20 = SymbolTerm.makeSymbol("test_assoc");
    static SymbolTerm s21 = SymbolTerm.makeSymbol("test_onset_list_helper");
    static SymbolTerm s22 = SymbolTerm.makeSymbol("test_syncopation_measure_lh");
    static SymbolTerm s23 = SymbolTerm.makeSymbol("test_range");
    static SymbolTerm s24 = SymbolTerm.makeSymbol("test_factors_of_two");
    static SymbolTerm s25 = SymbolTerm.makeSymbol("test_metric_value");
    static SymbolTerm s26 = SymbolTerm.makeSymbol("test_split_onsets");
    static SymbolTerm s27 = SymbolTerm.makeSymbol("test_attr_statistics");
    static SymbolTerm s28 = SymbolTerm.makeSymbol("test_symbol_duration");
    static SymbolTerm s29 = SymbolTerm.makeSymbol("test_normalize");
    static SymbolTerm s30 = SymbolTerm.makeSymbol("test_expand_one_level_and_get_attrs");
    static SymbolTerm s31 = SymbolTerm.makeSymbol("test_bag_expand_one_level");
    static SymbolTerm s32 = SymbolTerm.makeSymbol("test_expand_rand");
    static SymbolTerm s33 = SymbolTerm.makeSymbol("test_squish_rests");
    static SymbolTerm s34 = SymbolTerm.makeSymbol("test_split");
    static SymbolTerm s35 = SymbolTerm.makeSymbol("test_transpose_attrs");
    static SymbolTerm s36 = SymbolTerm.makeSymbol("test_initialize_rules");
    static SymbolTerm s37 = SymbolTerm.makeSymbol("test_general_attr");

    public PRED_test_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test";
    }

    public Predicate exec(Prolog engine) {
    // test:-assert((notation(A,B,C):-fail)),assert((attr_memo(D,E):-fail)),assert((symbol_duration_memo(F,G):-fail)),assert((attr_median_diff(H,I):-fail)),assert((rule(J,K,L,M):-fail)),assert((recorded(N,O):-fail)),assert((recorded(P,Q,R):-fail)),assert((flagged(S,T):-fail)),test(test_density),test(test_consonance),test(test_variety),test(test_dir_change),test(test_leap),test(test_unfoldr_fn),test(test_assoc_and_pop),test(test_assoc),test(test_onset_list_helper),test(test_syncopation_measure_lh),test(test_range),test(test_factors_of_two),test(test_metric_value),test(test_split_onsets),test(test_attr_statistics),test(test_symbol_duration),test(test_normalize),test(test_expand_one_level_and_get_attrs),test(test_bag_expand_one_level),test(test_expand_rand),test(test_squish_rests),test(test_split),test(test_transpose_attrs),test(test_initialize_rules),test(test_general_attr)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32;
    // test:-[assert(user:(notation(A,B,C):-fail)),assert(user:(attr_memo(D,E):-fail)),assert(user:(symbol_duration_memo(F,G):-fail)),assert(user:(attr_median_diff(H,I):-fail)),assert(user:(rule(J,K,L,M):-fail)),assert(user:(recorded(N,O):-fail)),assert(user:(recorded(P,Q,R):-fail)),assert(user:(flagged(S,T):-fail)),test(test_density),test(test_consonance),test(test_variety),test(test_dir_change),test(test_leap),test(test_unfoldr_fn),test(test_assoc_and_pop),test(test_assoc),test(test_onset_list_helper),test(test_syncopation_measure_lh),test(test_range),test(test_factors_of_two),test(test_metric_value),test(test_split_onsets),test(test_attr_statistics),test(test_symbol_duration),test(test_normalize),test(test_expand_one_level_and_get_attrs),test(test_bag_expand_one_level),test(test_expand_rand),test(test_squish_rests),test(test_split),test(test_transpose_attrs),test(test_initialize_rules),test(test_general_attr)]
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a1 = new StructureTerm(s4, y1);
        Term[] y2 = {a1, s5};
        a2 = new StructureTerm(s3, y2);
        Term[] y3 = {s2, a2};
        a3 = new StructureTerm(s1, y3);
        Term[] y4 = {new VariableTerm(engine), new VariableTerm(engine)};
        a4 = new StructureTerm(s6, y4);
        Term[] y5 = {a4, s5};
        a5 = new StructureTerm(s3, y5);
        Term[] y6 = {s2, a5};
        a6 = new StructureTerm(s1, y6);
        Term[] y7 = {new VariableTerm(engine), new VariableTerm(engine)};
        a7 = new StructureTerm(s7, y7);
        Term[] y8 = {a7, s5};
        a8 = new StructureTerm(s3, y8);
        Term[] y9 = {s2, a8};
        a9 = new StructureTerm(s1, y9);
        Term[] y10 = {new VariableTerm(engine), new VariableTerm(engine)};
        a10 = new StructureTerm(s8, y10);
        Term[] y11 = {a10, s5};
        a11 = new StructureTerm(s3, y11);
        Term[] y12 = {s2, a11};
        a12 = new StructureTerm(s1, y12);
        Term[] y13 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a13 = new StructureTerm(s9, y13);
        Term[] y14 = {a13, s5};
        a14 = new StructureTerm(s3, y14);
        Term[] y15 = {s2, a14};
        a15 = new StructureTerm(s1, y15);
        Term[] y16 = {new VariableTerm(engine), new VariableTerm(engine)};
        a16 = new StructureTerm(s10, y16);
        Term[] y17 = {a16, s5};
        a17 = new StructureTerm(s3, y17);
        Term[] y18 = {s2, a17};
        a18 = new StructureTerm(s1, y18);
        Term[] y19 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a19 = new StructureTerm(s11, y19);
        Term[] y20 = {a19, s5};
        a20 = new StructureTerm(s3, y20);
        Term[] y21 = {s2, a20};
        a21 = new StructureTerm(s1, y21);
        Term[] y22 = {new VariableTerm(engine), new VariableTerm(engine)};
        a22 = new StructureTerm(s12, y22);
        Term[] y23 = {a22, s5};
        a23 = new StructureTerm(s3, y23);
        Term[] y24 = {s2, a23};
        a24 = new StructureTerm(s1, y24);
        p1 = new PRED_test_1(s37, cont);
        p2 = new PRED_test_1(s36, p1);
        p3 = new PRED_test_1(s35, p2);
        p4 = new PRED_test_1(s34, p3);
        p5 = new PRED_test_1(s33, p4);
        p6 = new PRED_test_1(s32, p5);
        p7 = new PRED_test_1(s31, p6);
        p8 = new PRED_test_1(s30, p7);
        p9 = new PRED_test_1(s29, p8);
        p10 = new PRED_test_1(s28, p9);
        p11 = new PRED_test_1(s27, p10);
        p12 = new PRED_test_1(s26, p11);
        p13 = new PRED_test_1(s25, p12);
        p14 = new PRED_test_1(s24, p13);
        p15 = new PRED_test_1(s23, p14);
        p16 = new PRED_test_1(s22, p15);
        p17 = new PRED_test_1(s21, p16);
        p18 = new PRED_test_1(s20, p17);
        p19 = new PRED_test_1(s19, p18);
        p20 = new PRED_test_1(s18, p19);
        p21 = new PRED_test_1(s17, p20);
        p22 = new PRED_test_1(s16, p21);
        p23 = new PRED_test_1(s15, p22);
        p24 = new PRED_test_1(s14, p23);
        p25 = new PRED_test_1(s13, p24);
        p26 = new PRED_assert_1(a24, p25);
        p27 = new PRED_assert_1(a21, p26);
        p28 = new PRED_assert_1(a18, p27);
        p29 = new PRED_assert_1(a15, p28);
        p30 = new PRED_assert_1(a12, p29);
        p31 = new PRED_assert_1(a9, p30);
        p32 = new PRED_assert_1(a6, p31);
        return new PRED_assert_1(a3, p32);
    }
}
