import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_6_plcafe_defs.pro'/6</code> defined in plcafe_defs.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_6_plcafe_defs$002Epro_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("succeeds_n_times");
    static IntegerTerm si2 = new IntegerTerm(0);
    static SymbolTerm s3 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("user");
    static IntegerTerm si5 = new IntegerTerm(-1);
    static IntegerTerm si6 = new IntegerTerm(1);
    static Predicate _$dummy_6_plcafe_defs$002Epro_6_sub_1 = new PRED_$dummy_6_plcafe_defs$002Epro_6_sub_1();
    static Predicate _$dummy_6_plcafe_defs$002Epro_6_1 = new PRED_$dummy_6_plcafe_defs$002Epro_6_1();
    static Predicate _$dummy_6_plcafe_defs$002Epro_6_2 = new PRED_$dummy_6_plcafe_defs$002Epro_6_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_$dummy_6_plcafe_defs$002Epro_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_$dummy_6_plcafe_defs$002Epro_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "$dummy_6_plcafe_defs.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_6_plcafe_defs$002Epro_6_1, _$dummy_6_plcafe_defs$002Epro_6_sub_1);
    }
}

class PRED_$dummy_6_plcafe_defs$002Epro_6_sub_1 extends PRED_$dummy_6_plcafe_defs$002Epro_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_6_plcafe_defs$002Epro_6_2);
    }
}

class PRED_$dummy_6_plcafe_defs$002Epro_6_1 extends PRED_$dummy_6_plcafe_defs$002Epro_6 {
    public Predicate exec(Prolog engine) {
    // '$dummy_6_plcafe_defs.pro'(A,B,C,D,E,F):-flag(succeeds_n_times,D,0),B,flag(succeeds_n_times,F,-1),C is F+1,flag(succeeds_n_times,E,C),fail
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$dummy_6_plcafe_defs.pro'(A,B,C,D,E,F):-[flag(succeeds_n_times,D,0),call(user:B),flag(succeeds_n_times,F,-1),'$plus'(F,1,C),flag(succeeds_n_times,E,C),fail]
        Term[] y1 = {s4, a2};
        a7 = new StructureTerm(s3, y1);
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_flag_3(s1, a5, a3, p1);
        p3 = new PRED_$plus_3(a6, si6, a3, p2);
        p4 = new PRED_flag_3(s1, a6, si5, p3);
        p5 = new PRED_call_1(a7, p4);
        return new PRED_flag_3(s1, a4, si2, p5);
    }
}

class PRED_$dummy_6_plcafe_defs$002Epro_6_2 extends PRED_$dummy_6_plcafe_defs$002Epro_6 {
    public Predicate exec(Prolog engine) {
    // '$dummy_6_plcafe_defs.pro'(A,B,C,D,E,F):-flag(succeeds_n_times,A,D)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // '$dummy_6_plcafe_defs.pro'(A,B,C,D,E,F):-[flag(succeeds_n_times,A,D)]
        return new PRED_flag_3(s1, a1, a4, cont);
    }
}
