import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>syncopation_helper/3</code> defined in syncopation.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_syncopation_helper_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static IntegerTerm si3 = new IntegerTerm(1);
    static Predicate _syncopation_helper_3_var = new PRED_syncopation_helper_3_var();
    static Predicate _syncopation_helper_3_var_1 = new PRED_syncopation_helper_3_var_1();
    static Predicate _syncopation_helper_3_var_2 = new PRED_syncopation_helper_3_var_2();
    static Predicate _syncopation_helper_3_1 = new PRED_syncopation_helper_3_1();
    static Predicate _syncopation_helper_3_2 = new PRED_syncopation_helper_3_2();
    static Predicate _syncopation_helper_3_3 = new PRED_syncopation_helper_3_3();

    public Term arg1, arg2, arg3;

    public PRED_syncopation_helper_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_syncopation_helper_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "syncopation_helper(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_syncopation_helper_3_var, _syncopation_helper_3_3, _syncopation_helper_3_3, _syncopation_helper_3_3, _syncopation_helper_3_3, _syncopation_helper_3_var);
    }
}

class PRED_syncopation_helper_3_var extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_syncopation_helper_3_1, _syncopation_helper_3_var_1);
    }
}

class PRED_syncopation_helper_3_var_1 extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_syncopation_helper_3_2, _syncopation_helper_3_var_2);
    }
}

class PRED_syncopation_helper_3_var_2 extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_syncopation_helper_3_3);
    }
}

class PRED_syncopation_helper_3_1 extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
    // syncopation_helper([A],B,0):-!
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // syncopation_helper([A],B,0):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(new ListTerm(new VariableTerm(engine), s1), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isInteger()){
            if (((IntegerTerm) a3).intValue() != 0)
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_syncopation_helper_3_2 extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
    // syncopation_helper([0,A],B,0):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // syncopation_helper([0,A],B,0):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            if (! si2.unify(args[0], engine.trail))
                return engine.fail();
            a4 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(si2, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(new ListTerm(new VariableTerm(engine), s1), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isInteger()){
            if (((IntegerTerm) a3).intValue() != 0)
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_syncopation_helper_3_3 extends PRED_syncopation_helper_3 {
    public Predicate exec(Prolog engine) {
    // syncopation_helper(A,B,C):-split(A,D,E),F is 1+B,syncopation_helper(D,F,G),beat_stress(H),sync_diff_const(I),'$dummy_0_syncopation.pro'(C,F,I,J,D,B,K,G,H,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // syncopation_helper(A,B,C):-[split(A,D,E),'$plus'(1,B,F),syncopation_helper(D,F,G),beat_stress(H),sync_diff_const(I),'$dummy_0_syncopation.pro'(C,F,I,J,D,B,K,G,H,E)]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        p1 = new PRED_$dummy_0_syncopation$002Epro_10(a3, a6, a9, new VariableTerm(engine), a4, a2, new VariableTerm(engine), a7, a8, a5, cont);
        p2 = new PRED_sync_diff_const_1(a9, p1);
        p3 = new PRED_beat_stress_1(a8, p2);
        p4 = new PRED_syncopation_helper_3(a4, a6, a7, p3);
        p5 = new PRED_$plus_3(si3, a2, a6, p4);
        return new PRED_split_3(a1, a4, a5, p5);
    }
}
