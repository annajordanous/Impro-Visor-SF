package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_15_functional.pro'/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_15_functional$002Epro_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("atom");
    static IntegerTerm si2 = new IntegerTerm(1);
    static IntegerTerm si3 = new IntegerTerm(2);
    static IntegerTerm si4 = new IntegerTerm(3);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("[]");
    static ListTerm s6 = new ListTerm(si4, s5);
    static ListTerm s7 = new ListTerm(si3, s6);
    static ListTerm s8 = new ListTerm(si2, s7);
    static Predicate _$dummy_15_functional$002Epro_0_sub_1 = new PRED_$dummy_15_functional$002Epro_0_sub_1();
    static Predicate _$dummy_15_functional$002Epro_0_1 = new PRED_$dummy_15_functional$002Epro_0_1();
    static Predicate _$dummy_15_functional$002Epro_0_2 = new PRED_$dummy_15_functional$002Epro_0_2();

    public PRED_$dummy_15_functional$002Epro_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_$dummy_15_functional$002Epro_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "$dummy_15_functional.pro";
    }

    public Predicate exec(Prolog engine) {
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_15_functional$002Epro_0_1, _$dummy_15_functional$002Epro_0_sub_1);
    }
}

class PRED_$dummy_15_functional$002Epro_0_sub_1 extends PRED_$dummy_15_functional$002Epro_0 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_15_functional$002Epro_0_2);
    }
}

class PRED_$dummy_15_functional$002Epro_0_1 extends PRED_$dummy_15_functional$002Epro_0 {
    public Predicate exec(Prolog engine) {
    // '$dummy_15_functional.pro':-some(atom,[1,2,3]),!,fail
        Term a1;
        Predicate p1, p2;
        Predicate cont;
        cont = engine.cont;
    // '$dummy_15_functional.pro':-['$get_level'(A),some(atom,[1,2,3]),'$cut'(A),fail]
        a1 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(1))
        if (! a1.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_fail_0(cont);
        p2 = new PRED_$cut_1(a1, p1);
        return new PRED_some_2(s1, s8, p2);
    }
}

class PRED_$dummy_15_functional$002Epro_0_2 extends PRED_$dummy_15_functional$002Epro_0 {
    public Predicate exec(Prolog engine) {
    // '$dummy_15_functional.pro':-true
        Predicate cont;
        cont = engine.cont;
    // '$dummy_15_functional.pro':-[]
        return cont;
    }
}
