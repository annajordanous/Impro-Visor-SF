import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_18_attributes.pro'/2</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_18_attributes$002Epro_2 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(3);
    static IntegerTerm si2 = new IntegerTerm(0);
    static Predicate _$dummy_18_attributes$002Epro_2_sub_1 = new PRED_$dummy_18_attributes$002Epro_2_sub_1();
    static Predicate _$dummy_18_attributes$002Epro_2_1 = new PRED_$dummy_18_attributes$002Epro_2_1();
    static Predicate _$dummy_18_attributes$002Epro_2_2 = new PRED_$dummy_18_attributes$002Epro_2_2();

    public Term arg1, arg2;

    public PRED_$dummy_18_attributes$002Epro_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$dummy_18_attributes$002Epro_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$dummy_18_attributes.pro(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_18_attributes$002Epro_2_1, _$dummy_18_attributes$002Epro_2_sub_1);
    }
}

class PRED_$dummy_18_attributes$002Epro_2_sub_1 extends PRED_$dummy_18_attributes$002Epro_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_18_attributes$002Epro_2_2);
    }
}

class PRED_$dummy_18_attributes$002Epro_2_1 extends PRED_$dummy_18_attributes$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_18_attributes.pro'(A,B):-A>=3,!,B=A
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_18_attributes.pro'(A,B):-['$get_level'(C),'$greater_or_equal'(A,3),'$cut'(C),'$unify'(B,A)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $greater_or_equal(a(1),si(1))
        try {
            if (Arithmetic.evaluate(a1).arithCompareTo(si1) < 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(3))
        a3 = a3.dereference();
        if (! a3.isInteger()) {
            throw new IllegalTypeException("integer", a3);
        } else {
            engine.cut(((IntegerTerm) a3).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(2),a(1))
        if (! a2.unify(a1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dummy_18_attributes$002Epro_2_2 extends PRED_$dummy_18_attributes$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_18_attributes.pro'(A,B):-B=0
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_18_attributes.pro'(A,B):-['$unify'(B,0)]
        //START inline expansion of $unify(a(2),si(2))
        if (! a2.unify(si2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
