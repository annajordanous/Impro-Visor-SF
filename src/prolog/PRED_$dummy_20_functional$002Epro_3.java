import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_20_functional.pro'/3</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_20_functional$002Epro_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static Predicate _$dummy_20_functional$002Epro_3_sub_1 = new PRED_$dummy_20_functional$002Epro_3_sub_1();
    static Predicate _$dummy_20_functional$002Epro_3_1 = new PRED_$dummy_20_functional$002Epro_3_1();
    static Predicate _$dummy_20_functional$002Epro_3_2 = new PRED_$dummy_20_functional$002Epro_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$dummy_20_functional$002Epro_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dummy_20_functional$002Epro_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$dummy_20_functional.pro(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_20_functional$002Epro_3_1, _$dummy_20_functional$002Epro_3_sub_1);
    }
}

class PRED_$dummy_20_functional$002Epro_3_sub_1 extends PRED_$dummy_20_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_20_functional$002Epro_3_2);
    }
}

class PRED_$dummy_20_functional$002Epro_3_1 extends PRED_$dummy_20_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_20_functional.pro'(A,B,C):-bagof(B,A,C),!,true
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_20_functional.pro'(A,B,C):-['$get_level'(D),bagof(B,user:A,C),'$cut'(D)]
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {s2, a1};
        a5 = new StructureTerm(s1, y1);
        p1 = new PRED_$cut_1(a4, cont);
        return new PRED_bagof_3(a2, a5, a3, p1);
    }
}

class PRED_$dummy_20_functional$002Epro_3_2 extends PRED_$dummy_20_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_20_functional.pro'(A,B,C):-nil(C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_20_functional.pro'(A,B,C):-[nil(C)]
        return new PRED_nil_1(a3, cont);
    }
}
