package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>rest_or_not/2</code> defined in squish_rests.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_rest_or_not_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("r");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("x");
    static Predicate _rest_or_not_2_var = new PRED_rest_or_not_2_var();
    static Predicate _rest_or_not_2_var_1 = new PRED_rest_or_not_2_var_1();
    static Predicate _rest_or_not_2_1 = new PRED_rest_or_not_2_1();
    static Predicate _rest_or_not_2_2 = new PRED_rest_or_not_2_2();

    public Term arg1, arg2;

    public PRED_rest_or_not_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_rest_or_not_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "rest_or_not(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_rest_or_not_2_var, _rest_or_not_2_2, _rest_or_not_2_2, _rest_or_not_2_var, _rest_or_not_2_2, _rest_or_not_2_2);
    }
}

class PRED_rest_or_not_2_var extends PRED_rest_or_not_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_rest_or_not_2_1, _rest_or_not_2_var_1);
    }
}

class PRED_rest_or_not_2_var_1 extends PRED_rest_or_not_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_rest_or_not_2_2);
    }
}

class PRED_rest_or_not_2_1 extends PRED_rest_or_not_2 {
    public Predicate exec(Prolog engine) {
    // rest_or_not(r,r):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // rest_or_not(r,r):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_rest_or_not_2_2 extends PRED_rest_or_not_2 {
    public Predicate exec(Prolog engine) {
    // rest_or_not(A,x):-A\=r
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // rest_or_not(A,x):-['$not_unifiable'(A,r)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $not_unifiable(a(1),s(1))
        if (a1.unify(s1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
