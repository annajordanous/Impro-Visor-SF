import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>split_helper/6</code> defined in syncopation.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_split_helper_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _split_helper_6_var = new PRED_split_helper_6_var();
    static Predicate _split_helper_6_var_1 = new PRED_split_helper_6_var_1();
    static Predicate _split_helper_6_1 = new PRED_split_helper_6_1();
    static Predicate _split_helper_6_2 = new PRED_split_helper_6_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_split_helper_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_split_helper_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "split_helper(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_split_helper_6_var, _fail_0, _fail_0, _split_helper_6_1, _fail_0, _split_helper_6_2);
    }
}

class PRED_split_helper_6_var extends PRED_split_helper_6 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_split_helper_6_1, _split_helper_6_var_1);
    }
}

class PRED_split_helper_6_var_1 extends PRED_split_helper_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_split_helper_6_2);
    }
}

class PRED_split_helper_6_1 extends PRED_split_helper_6 {
    public Predicate exec(Prolog engine) {
    // split_helper([],A,B,C,C,[]):-true
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // split_helper([],A,B,C,C,[]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a4.unify(a5, engine.trail))
            return engine.fail();
        a6 = a6.dereference();
        if (a6.isSymbol()){
            if (! a6.equals(s1))
                return engine.fail();
        } else if (a6.isVariable()){
            ((VariableTerm) a6).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_split_helper_6_2 extends PRED_split_helper_6 {
    public Predicate exec(Prolog engine) {
    // split_helper([A|B],C,D,E,F,G):-H is D+A,'$dummy_2_syncopation.pro'(C,A,F,H,E,B,G,I,J,K)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // split_helper([A|B],C,D,E,F,G):-['$plus'(D,A,H),'$dummy_2_syncopation.pro'(C,A,F,H,E,B,G,I,J,K)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a1.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = new VariableTerm(engine);
        //START inline expansion of $plus(a(3),a(7),a(9))
        try {
            if (! a9.unify(Arithmetic.evaluate(a3).add(Arithmetic.evaluate(a7)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return new PRED_$dummy_2_syncopation$002Epro_10(a2, a7, a5, a9, a4, a8, a6, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), cont);
    }
}
