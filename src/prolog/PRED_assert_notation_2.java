import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>assert_notation/2</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_assert_notation_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("notation", 3);
    static Predicate _assert_notation_2_sub_1 = new PRED_assert_notation_2_sub_1();
    static Predicate _assert_notation_2_1 = new PRED_assert_notation_2_1();
    static Predicate _assert_notation_2_2 = new PRED_assert_notation_2_2();

    public Term arg1, arg2;

    public PRED_assert_notation_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_assert_notation_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "assert_notation(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_assert_notation_2_1, _assert_notation_2_sub_1);
    }
}

class PRED_assert_notation_2_sub_1 extends PRED_assert_notation_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_assert_notation_2_2);
    }
}

class PRED_assert_notation_2_1 extends PRED_assert_notation_2 {
    public Predicate exec(Prolog engine) {
    // assert_notation(A,B):-notation(A,C,D),atom_length(B,E),'$dummy_2_rule_initialize.pro'(B,E,A,D),!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // assert_notation(A,B):-['$get_level'(C),call(user:notation(A,D,E)),atom_length(B,F),'$dummy_2_rule_initialize.pro'(B,F,A,E),'$cut'(C)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        Term[] y1 = {a1, new VariableTerm(engine), a4};
        a5 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a5};
        a6 = new StructureTerm(s1, y2);
        a7 = new VariableTerm(engine);
        p1 = new PRED_$cut_1(a3, cont);
        p2 = new PRED_$dummy_2_rule_initialize$002Epro_4(a2, a7, a1, a4, p1);
        p3 = new PRED_atom_length_2(a2, a7, p2);
        return new PRED_call_1(a6, p3);
    }
}

class PRED_assert_notation_2_2 extends PRED_assert_notation_2 {
    public Predicate exec(Prolog engine) {
    // assert_notation(A,B):-atom_length(B,C),assert(notation(A,B,C))
        Term a1, a2, a3, a4, a5;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // assert_notation(A,B):-[atom_length(B,C),assert(user:notation(A,B,C))]
        a3 = new VariableTerm(engine);
        Term[] y1 = {a1, a2, a3};
        a4 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a4};
        a5 = new StructureTerm(s1, y2);
        p1 = new PRED_assert_1(a5, cont);
        return new PRED_atom_length_2(a2, a3, p1);
    }
}
