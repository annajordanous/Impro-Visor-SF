package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_n_solns/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_n_solns_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("member", 2);
    static IntegerTerm si2 = new IntegerTerm(1);
    static IntegerTerm si3 = new IntegerTerm(2);
    static IntegerTerm si4 = new IntegerTerm(3);
    static IntegerTerm si5 = new IntegerTerm(4);
    static IntegerTerm si6 = new IntegerTerm(5);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("[]");
    static ListTerm s8 = new ListTerm(si6, s7);
    static ListTerm s9 = new ListTerm(si5, s8);
    static ListTerm s10 = new ListTerm(si4, s9);
    static ListTerm s11 = new ListTerm(si3, s10);
    static ListTerm s12 = new ListTerm(si2, s11);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("is_list");
    static IntegerTerm si14 = new IntegerTerm(6);
    static IntegerTerm si15 = new IntegerTerm(7);
    static IntegerTerm si16 = new IntegerTerm(8);
    static ListTerm s17 = new ListTerm(si16, s7);
    static ListTerm s18 = new ListTerm(si15, s17);
    static ListTerm s19 = new ListTerm(si14, s18);
    static ListTerm s20 = new ListTerm(si6, s19);
    static ListTerm s21 = new ListTerm(si5, s20);
    static ListTerm s22 = new ListTerm(si4, s21);
    static ListTerm s23 = new ListTerm(si3, s22);
    static ListTerm s24 = new ListTerm(si2, s23);
    static IntegerTerm si25 = new IntegerTerm(40);

    public PRED_test_n_solns_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_n_solns_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_n_solns";
    }

    public Predicate exec(Prolog engine) {
    // test_n_solns:-n_solns(member(A,[1,2,3,4,5]),3,B),length(B,3),has_property(B,is_list),n_solns(member(C,[1,2,3,4,5,6,7,8]),40,D),length(D,8),has_property(D,is_list)
        engine.setB0();
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3, p4, p5;
    // test_n_solns:-[n_solns(member(A,[1,2,3,4,5]),3,B),length(B,3),has_property(B,is_list),n_solns(member(C,[1,2,3,4,5,6,7,8]),40,D),length(D,8),has_property(D,is_list)]
        Term[] y1 = {new VariableTerm(engine), s12};
        a1 = new StructureTerm(s1, y1);
        a2 = new VariableTerm(engine);
        Term[] y2 = {new VariableTerm(engine), s24};
        a3 = new StructureTerm(s1, y2);
        a4 = new VariableTerm(engine);
        p1 = new PRED_has_property_2(a4, s13, cont);
        p2 = new PRED_length_2(a4, si16, p1);
        p3 = new PRED_n_solns_3(a3, si25, a4, p2);
        p4 = new PRED_has_property_2(a2, s13, p3);
        p5 = new PRED_length_2(a2, si4, p4);
        return new PRED_n_solns_3(a1, si4, a2, p5);
    }
}
