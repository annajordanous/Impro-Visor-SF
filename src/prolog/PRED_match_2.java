import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>match/2</code> defined in random_helpers.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_match_2 extends Predicate {
    static Predicate _match_2_sub_1 = new PRED_match_2_sub_1();
    static Predicate _match_2_sub_2 = new PRED_match_2_sub_2();
    static Predicate _match_2_sub_3 = new PRED_match_2_sub_3();
    static Predicate _match_2_1 = new PRED_match_2_1();
    static Predicate _match_2_2 = new PRED_match_2_2();
    static Predicate _match_2_3 = new PRED_match_2_3();
    static Predicate _match_2_4 = new PRED_match_2_4();

    public Term arg1, arg2;

    public PRED_match_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_match_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "match(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_match_2_1, _match_2_sub_1);
    }
}

class PRED_match_2_sub_1 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_match_2_2, _match_2_sub_2);
    }
}

class PRED_match_2_sub_2 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_match_2_3, _match_2_sub_3);
    }
}

class PRED_match_2_sub_3 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_match_2_4);
    }
}

class PRED_match_2_1 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
    // match(A,B):-var(B)
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // match(A,B):-[var(B)]
        //START inline expansion of var(a(2))
        a2 = a2.dereference();
        if (! a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_match_2_2 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
    // match(A,B):-var(A),nonvar(B),copy_term(B,C),A=C
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // match(A,B):-[var(A),nonvar(B),copy_term(B,C),'$unify'(A,C)]
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(2))
        a2 = a2.dereference();
        if (a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        //START inline expansion of copy_term(a(2),a(3))
        a2 = a2.dereference();
        if (! a3.unify(engine.copy(a2), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(1),a(3))
        if (! a1.unify(a3, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_match_2_3 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
    // match(A,B):-nonvar(A),nonvar(B),'$dummy_1_random_helpers.pro'(A),'$dummy_2_random_helpers.pro'(B),A=B
        Term a1, a2;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // match(A,B):-[nonvar(A),nonvar(B),'$dummy_1_random_helpers.pro'(A),'$dummy_2_random_helpers.pro'(B),'$unify'(A,B)]
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(2))
        a2 = a2.dereference();
        if (a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$unify_2(a1, a2, cont);
        p2 = new PRED_$dummy_2_random_helpers$002Epro_1(a2, p1);
        return new PRED_$dummy_1_random_helpers$002Epro_1(a1, p2);
    }
}

class PRED_match_2_4 extends PRED_match_2 {
    public Predicate exec(Prolog engine) {
    // match(A,B):-nonvar(A),nonvar(B),compound(A),compound(B),copy_term(B,C),A=C
        Term a1, a2, a3;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // match(A,B):-[nonvar(A),nonvar(B),compound(A),compound(B),copy_term(B,C),'$unify'(A,C)]
        //START inline expansion of nonvar(a(1))
        a1 = a1.dereference();
        if (a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of nonvar(a(2))
        a2 = a2.dereference();
        if (a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        a3 = new VariableTerm(engine);
        p1 = new PRED_$unify_2(a1, a3, cont);
        p2 = new PRED_copy_term_2(a2, a3, p1);
        p3 = new PRED_compound_1(a2, p2);
        return new PRED_compound_1(a1, p3);
    }
}
