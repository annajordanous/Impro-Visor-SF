import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_expand_fully/0</code> defined in random_helpers.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_expand_fully_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("rule", 4);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("seg120");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("c");
    static IntegerTerm si5 = new IntegerTerm(120);
    static Term[] s6 = {s4, si5};
    static StructureTerm s7 = new StructureTerm(s3, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("[]");
    static ListTerm s9 = new ListTerm(s7, s8);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("a");
    static SymbolTerm s11 = SymbolTerm.makeSymbol("true");
    static Term[] s12 = {s2, s9, s10, s11};
    static StructureTerm s13 = new StructureTerm(s1, s12);
    static ListTerm s14 = new ListTerm(s13, s8);
    static ListTerm s15 = new ListTerm(s2, s8);

    public PRED_test_expand_fully_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_expand_fully_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_expand_fully";
    }

    public Predicate exec(Prolog engine) {
    // test_expand_fully:-initialize_rules([rule(seg120,[t(c,120)],a,true)],A,B,C),expand_fully([seg120],[t(c,120)]),retract_rules
        engine.setB0();
        Predicate p1, p2;
    // test_expand_fully:-[initialize_rules([rule(seg120,[t(c,120)],a,true)],A,B,C),expand_fully([seg120],[t(c,120)]),retract_rules]
        p1 = new PRED_retract_rules_0(cont);
        p2 = new PRED_expand_fully_2(s15, s9, p1);
        return new PRED_initialize_rules_4(s14, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), p2);
    }
}
