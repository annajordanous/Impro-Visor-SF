package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_4_rule_expander.pro'/13</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_4_rule_expander$002Epro_13 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("-", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("attr_median_diff", 2);
    static IntegerTerm si5 = new IntegerTerm(2);
    static Predicate _$dummy_4_rule_expander$002Epro_13_sub_1 = new PRED_$dummy_4_rule_expander$002Epro_13_sub_1();
    static Predicate _$dummy_4_rule_expander$002Epro_13_1 = new PRED_$dummy_4_rule_expander$002Epro_13_1();
    static Predicate _$dummy_4_rule_expander$002Epro_13_2 = new PRED_$dummy_4_rule_expander$002Epro_13_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13;

    public PRED_$dummy_4_rule_expander$002Epro_13(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Term a8, Term a9, Term a10, Term a11, Term a12, Term a13, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        arg8 = a8;
        arg9 = a9;
        arg10 = a10;
        arg11 = a11;
        arg12 = a12;
        arg13 = a13;
        this.cont = cont;
    }

    public PRED_$dummy_4_rule_expander$002Epro_13(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        arg8 = args[7];
        arg9 = args[8];
        arg10 = args[9];
        arg11 = args[10];
        arg12 = args[11];
        arg13 = args[12];
        this.cont = cont;
    }

    public int arity() { return 13; }

    public String toString() {
        return "$dummy_4_rule_expander.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + "," + arg8 + "," + arg9 + "," + arg10 + "," + arg11 + "," + arg12 + "," + arg13 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.aregs[8] = arg8;
        engine.aregs[9] = arg9;
        engine.aregs[10] = arg10;
        engine.aregs[11] = arg11;
        engine.aregs[12] = arg12;
        engine.aregs[13] = arg13;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_4_rule_expander$002Epro_13_1, _$dummy_4_rule_expander$002Epro_13_sub_1);
    }
}

class PRED_$dummy_4_rule_expander$002Epro_13_sub_1 extends PRED_$dummy_4_rule_expander$002Epro_13 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_4_rule_expander$002Epro_13_2);
    }
}

class PRED_$dummy_4_rule_expander$002Epro_13_1 extends PRED_$dummy_4_rule_expander$002Epro_13 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_rule_expander.pro'(A,B,C,D,E,F,G,H,I,J,K,L,M):-assoc_and_pop(G,J,E,D),!,abs(E-F,H),attr_median_diff(G,B),M is H/B,pow(2,M,I),C is K/I,modify_weights(A,D,C,L)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17;
        Predicate p1, p2, p3, p4, p5, p6, p7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        a10 = engine.aregs[10];
        a11 = engine.aregs[11];
        a12 = engine.aregs[12];
        a13 = engine.aregs[13];
        cont = engine.cont;
    // '$dummy_4_rule_expander.pro'(A,B,C,D,E,F,G,H,I,J,K,L,M):-['$get_level'(N),assoc_and_pop(G,J,E,D),'$cut'(N),abs(E-F,H),call(user:attr_median_diff(G,B)),'$float_quotient'(H,B,M),pow(2,M,I),'$float_quotient'(K,I,C),modify_weights(A,D,C,L)]
        a14 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(14))
        if (! a14.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a5, a6};
        a15 = new StructureTerm(s1, y1);
        Term[] y2 = {a7, a2};
        a16 = new StructureTerm(s4, y2);
        Term[] y3 = {s3, a16};
        a17 = new StructureTerm(s2, y3);
        p1 = new PRED_modify_weights_4(a1, a4, a3, a12, cont);
        p2 = new PRED_$float_quotient_3(a11, a9, a3, p1);
        p3 = new PRED_pow_3(si5, a13, a9, p2);
        p4 = new PRED_$float_quotient_3(a8, a2, a13, p3);
        p5 = new PRED_call_1(a17, p4);
        p6 = new PRED_abs_2(a15, a8, p5);
        p7 = new PRED_$cut_1(a14, p6);
        return new PRED_assoc_and_pop_4(a7, a10, a5, a4, p7);
    }
}

class PRED_$dummy_4_rule_expander$002Epro_13_2 extends PRED_$dummy_4_rule_expander$002Epro_13 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_rule_expander.pro'(A,B,C,D,E,F,G,H,I,J,K,L,M):-modify_weights(A,J,K,L)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        a8 = engine.aregs[8];
        a9 = engine.aregs[9];
        a10 = engine.aregs[10];
        a11 = engine.aregs[11];
        a12 = engine.aregs[12];
        a13 = engine.aregs[13];
        cont = engine.cont;
    // '$dummy_4_rule_expander.pro'(A,B,C,D,E,F,G,H,I,J,K,L,M):-[modify_weights(A,J,K,L)]
        return new PRED_modify_weights_4(a1, a10, a11, a12, cont);
    }
}
