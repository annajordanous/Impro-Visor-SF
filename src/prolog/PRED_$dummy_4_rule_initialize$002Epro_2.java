package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_4_rule_initialize.pro'/2</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_4_rule_initialize$002Epro_2 extends Predicate {
    static Predicate _$dummy_4_rule_initialize$002Epro_2_sub_1 = new PRED_$dummy_4_rule_initialize$002Epro_2_sub_1();
    static Predicate _$dummy_4_rule_initialize$002Epro_2_1 = new PRED_$dummy_4_rule_initialize$002Epro_2_1();
    static Predicate _$dummy_4_rule_initialize$002Epro_2_2 = new PRED_$dummy_4_rule_initialize$002Epro_2_2();

    public Term arg1, arg2;

    public PRED_$dummy_4_rule_initialize$002Epro_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$dummy_4_rule_initialize$002Epro_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$dummy_4_rule_initialize.pro(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_4_rule_initialize$002Epro_2_1, _$dummy_4_rule_initialize$002Epro_2_sub_1);
    }
}

class PRED_$dummy_4_rule_initialize$002Epro_2_sub_1 extends PRED_$dummy_4_rule_initialize$002Epro_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_4_rule_initialize$002Epro_2_2);
    }
}

class PRED_$dummy_4_rule_initialize$002Epro_2_1 extends PRED_$dummy_4_rule_initialize$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_rule_initialize.pro'(A,B):-terminal_to_functor(B,A),!,true
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_4_rule_initialize.pro'(A,B):-['$get_level'(C),terminal_to_functor(B,A),'$cut'(C)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return new PRED_terminal_to_functor_2(a2, a1, p1);
    }
}

class PRED_$dummy_4_rule_initialize$002Epro_2_2 extends PRED_$dummy_4_rule_initialize$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_4_rule_initialize.pro'(A,B):-A=B
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_4_rule_initialize.pro'(A,B):-['$unify'(A,B)]
        //START inline expansion of $unify(a(1),a(2))
        if (! a1.unify(a2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
