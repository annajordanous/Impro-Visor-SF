import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>unfoldr_fn/3</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_unfoldr_fn_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("fn", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("user");

    public Term arg1, arg2, arg3;

    public PRED_unfoldr_fn_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_unfoldr_fn_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "unfoldr_fn(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
    // unfoldr_fn(A,B,C):-B=fn(D,E),copy_term(B,fn(F,G)),first(F,A),second(F,H),last(F,I),call(G),'$dummy_9_functional.pro'(B,C,H,I,J)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2, p3, p4;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
    // unfoldr_fn(A,B,C):-['$unify'(B,fn(D,E)),copy_term(B,fn(F,G)),first(F,A),second(F,H),last(F,I),call(user:G),'$dummy_9_functional.pro'(B,C,H,I,J)]
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine)};
        a4 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(2),a(4))
        if (! a2.unify(a4, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        Term[] y2 = {a5, a6};
        a7 = new StructureTerm(s1, y2);
        //START inline expansion of copy_term(a(2),a(7))
        a2 = a2.dereference();
        if (! a7.unify(engine.copy(a2), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        Term[] y3 = {s3, a6};
        a10 = new StructureTerm(s2, y3);
        p1 = new PRED_$dummy_9_functional$002Epro_5(a2, a3, a8, a9, new VariableTerm(engine), cont);
        p2 = new PRED_call_1(a10, p1);
        p3 = new PRED_last_2(a5, a9, p2);
        p4 = new PRED_second_2(a5, a8, p3);
        return new PRED_first_2(a5, a1, p4);
    }
}
