import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>flatten_term/2</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_flatten_term_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("flatten_term");
    static Predicate _flatten_term_2_sub_1 = new PRED_flatten_term_2_sub_1();
    static Predicate _flatten_term_2_sub_2 = new PRED_flatten_term_2_sub_2();
    static Predicate _flatten_term_2_1 = new PRED_flatten_term_2_1();
    static Predicate _flatten_term_2_2 = new PRED_flatten_term_2_2();
    static Predicate _flatten_term_2_3 = new PRED_flatten_term_2_3();

    public Term arg1, arg2;

    public PRED_flatten_term_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_flatten_term_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "flatten_term(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_flatten_term_2_1, _flatten_term_2_sub_1);
    }
}

class PRED_flatten_term_2_sub_1 extends PRED_flatten_term_2 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_flatten_term_2_2, _flatten_term_2_sub_2);
    }
}

class PRED_flatten_term_2_sub_2 extends PRED_flatten_term_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_flatten_term_2_3);
    }
}

class PRED_flatten_term_2_1 extends PRED_flatten_term_2 {
    public Predicate exec(Prolog engine) {
    // flatten_term(A,[A]):-'$dummy_21_functional.pro'(A),!
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // flatten_term(A,[A]):-['$get_level'(B),'$dummy_21_functional.pro'(A),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(new ListTerm(a1, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a3, cont);
        return new PRED_$dummy_21_functional$002Epro_1(a1, p1);
    }
}

class PRED_flatten_term_2_2 extends PRED_flatten_term_2 {
    public Predicate exec(Prolog engine) {
    // flatten_term(A,B):-is_list(A),!,A\=[],map_fast(A,flatten_term,C),append(C,B)
        Term a1, a2, a3, a4;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // flatten_term(A,B):-['$get_level'(C),is_list(A),'$cut'(C),'$not_unifiable'(A,[]),map_fast(A,flatten_term,D),append(D,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a4 = new VariableTerm(engine);
        p1 = new PRED_append_2(a4, a2, cont);
        p2 = new PRED_map_fast_3(a1, s2, a4, p1);
        p3 = new PRED_$not_unifiable_2(a1, s1, p2);
        p4 = new PRED_$cut_1(a3, p3);
        return new PRED_is_list_1(a1, p4);
    }
}

class PRED_flatten_term_2_3 extends PRED_flatten_term_2 {
    public Predicate exec(Prolog engine) {
    // flatten_term(A,B):-A=..C,flatten_term(C,B)
        Term a1, a2, a3;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // flatten_term(A,B):-['$univ'(A,C),flatten_term(C,B)]
        a3 = new VariableTerm(engine);
        p1 = new PRED_flatten_term_2(a3, a2, cont);
        return new PRED_$univ_2(a1, a3, p1);
    }
}
