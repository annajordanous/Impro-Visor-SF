package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>two_most_likely/6</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_two_most_likely_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _two_most_likely_6_var = new PRED_two_most_likely_6_var();
    static Predicate _two_most_likely_6_var_1 = new PRED_two_most_likely_6_var_1();
    static Predicate _two_most_likely_6_1 = new PRED_two_most_likely_6_1();
    static Predicate _two_most_likely_6_2 = new PRED_two_most_likely_6_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_two_most_likely_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_two_most_likely_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "two_most_likely(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_two_most_likely_6_var, _fail_0, _fail_0, _two_most_likely_6_1, _fail_0, _two_most_likely_6_2);
    }
}

class PRED_two_most_likely_6_var extends PRED_two_most_likely_6 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_two_most_likely_6_1, _two_most_likely_6_var_1);
    }
}

class PRED_two_most_likely_6_var_1 extends PRED_two_most_likely_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_two_most_likely_6_2);
    }
}

class PRED_two_most_likely_6_1 extends PRED_two_most_likely_6 {
    public Predicate exec(Prolog engine) {
    // two_most_likely([],[],A,B,A,B):-true
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // two_most_likely([],[],A,B,A,B):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a3.unify(a5, engine.trail))
            return engine.fail();
        if (! a4.unify(a6, engine.trail))
            return engine.fail();
        return cont;
    }
}

class PRED_two_most_likely_6_2 extends PRED_two_most_likely_6 {
    public Predicate exec(Prolog engine) {
    // two_most_likely([A|B],[C|D],[E,F],[G,H],I,J):-'$dummy_10_attributes.pro'(I,H,F,A,J,G,E,D,C,B)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // two_most_likely([A|B],[C|D],[E,F],[G,H],I,J):-['$dummy_10_attributes.pro'(I,H,F,A,J,G,E,D,C,B)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a1.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a9 = args[0];
            a10 = args[1];
        } else if (a2.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a9, a10), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a11 = args[0];
            a12 = args[1];
        } else if (a3.isVariable()){
            a11 = new VariableTerm(engine);
            a12 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a11, a12), engine.trail);
        } else {
            return engine.fail();
        }
        a12 = a12.dereference();
        if (a12.isList()){
            Term[] args = {((ListTerm)a12).car(), ((ListTerm)a12).cdr()};
            a13 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a12.isVariable()){
            a13 = new VariableTerm(engine);
            ((VariableTerm) a12).bind(new ListTerm(a13, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a14 = args[0];
            a15 = args[1];
        } else if (a4.isVariable()){
            a14 = new VariableTerm(engine);
            a15 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a14, a15), engine.trail);
        } else {
            return engine.fail();
        }
        a15 = a15.dereference();
        if (a15.isList()){
            Term[] args = {((ListTerm)a15).car(), ((ListTerm)a15).cdr()};
            a16 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a15.isVariable()){
            a16 = new VariableTerm(engine);
            ((VariableTerm) a15).bind(new ListTerm(a16, s1), engine.trail);
        } else {
            return engine.fail();
        }
        return new PRED_$dummy_10_attributes$002Epro_10(a5, a16, a13, a7, a6, a14, a11, a10, a9, a8, cont);
    }
}
