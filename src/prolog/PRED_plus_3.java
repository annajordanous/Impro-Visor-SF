package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>plus/3</code> defined in plcafe_defs.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_plus_3 extends Predicate {
    static Predicate _plus_3_sub_1 = new PRED_plus_3_sub_1();
    static Predicate _plus_3_sub_2 = new PRED_plus_3_sub_2();
    static Predicate _plus_3_1 = new PRED_plus_3_1();
    static Predicate _plus_3_2 = new PRED_plus_3_2();
    static Predicate _plus_3_3 = new PRED_plus_3_3();

    public Term arg1, arg2, arg3;

    public PRED_plus_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_plus_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "plus(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_plus_3_1, _plus_3_sub_1);
    }
}

class PRED_plus_3_sub_1 extends PRED_plus_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_plus_3_2, _plus_3_sub_2);
    }
}

class PRED_plus_3_sub_2 extends PRED_plus_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_plus_3_3);
    }
}

class PRED_plus_3_1 extends PRED_plus_3 {
    public Predicate exec(Prolog engine) {
    // plus(A,B,C):-var(C),C is A+B
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // plus(A,B,C):-[var(C),'$plus'(A,B,C)]
        //START inline expansion of var(a(3))
        a3 = a3.dereference();
        if (! a3.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $plus(a(1),a(2),a(3))
        try {
            if (! a3.unify(Arithmetic.evaluate(a1).add(Arithmetic.evaluate(a2)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return cont;
    }
}

class PRED_plus_3_2 extends PRED_plus_3 {
    public Predicate exec(Prolog engine) {
    // plus(A,B,C):-var(A),A is C-B
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // plus(A,B,C):-[var(A),'$minus'(C,B,A)]
        //START inline expansion of var(a(1))
        a1 = a1.dereference();
        if (! a1.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $minus(a(3),a(2),a(1))
        try {
            if (! a1.unify(Arithmetic.evaluate(a3).subtract(Arithmetic.evaluate(a2)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return cont;
    }
}

class PRED_plus_3_3 extends PRED_plus_3 {
    public Predicate exec(Prolog engine) {
    // plus(A,B,C):-var(B),B is C-A
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // plus(A,B,C):-[var(B),'$minus'(C,A,B)]
        //START inline expansion of var(a(2))
        a2 = a2.dereference();
        if (! a2.isVariable()) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $minus(a(3),a(1),a(2))
        try {
            if (! a2.unify(Arithmetic.evaluate(a3).subtract(Arithmetic.evaluate(a1)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        return cont;
    }
}
