package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_1_syncopation.pro'/5</code> defined in syncopation.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_1_syncopation$002Epro_5 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(0);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("[]");
    static Predicate _$dummy_1_syncopation$002Epro_5_sub_1 = new PRED_$dummy_1_syncopation$002Epro_5_sub_1();
    static Predicate _$dummy_1_syncopation$002Epro_5_1 = new PRED_$dummy_1_syncopation$002Epro_5_1();
    static Predicate _$dummy_1_syncopation$002Epro_5_2 = new PRED_$dummy_1_syncopation$002Epro_5_2();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_$dummy_1_syncopation$002Epro_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_$dummy_1_syncopation$002Epro_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "$dummy_1_syncopation.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_1_syncopation$002Epro_5_1, _$dummy_1_syncopation$002Epro_5_sub_1);
    }
}

class PRED_$dummy_1_syncopation$002Epro_5_sub_1 extends PRED_$dummy_1_syncopation$002Epro_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_1_syncopation$002Epro_5_2);
    }
}

class PRED_$dummy_1_syncopation$002Epro_5_1 extends PRED_$dummy_1_syncopation$002Epro_5 {
    public Predicate exec(Prolog engine) {
    // '$dummy_1_syncopation.pro'(A,B,C,D,E):-D<E,!,split_helper(A,D,0,[],B,C)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dummy_1_syncopation.pro'(A,B,C,D,E):-['$get_level'(F),'$less_than'(D,E),'$cut'(F),split_helper(A,D,0,[],B,C)]
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $less_than(a(4),a(5))
        try {
            if (Arithmetic.evaluate(a4).arithCompareTo(Arithmetic.evaluate(a5)) >= 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(6))
        a6 = a6.dereference();
        if (! a6.isInteger()) {
            throw new IllegalTypeException("integer", a6);
        } else {
            engine.cut(((IntegerTerm) a6).intValue());
        }
        //END inline expansion
        return new PRED_split_helper_6(a1, a4, si1, s2, a2, a3, cont);
    }
}

class PRED_$dummy_1_syncopation$002Epro_5_2 extends PRED_$dummy_1_syncopation$002Epro_5 {
    public Predicate exec(Prolog engine) {
    // '$dummy_1_syncopation.pro'(A,B,C,D,E):-B=A,C=[]
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // '$dummy_1_syncopation.pro'(A,B,C,D,E):-['$unify'(B,A),'$unify'(C,[])]
        //START inline expansion of $unify(a(2),a(1))
        if (! a2.unify(a1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(3),s(2))
        if (! a3.unify(s2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}
