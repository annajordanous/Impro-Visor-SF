import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>run_grammar/1</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_run_grammar_1 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(480);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("Medians: ");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("Median differences: ");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("position");
    static IntegerTerm si5 = new IntegerTerm(0);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("p", 1);
    static Predicate _run_grammar_1_var = new PRED_run_grammar_1_var();
    static Predicate _run_grammar_1_var_1 = new PRED_run_grammar_1_var_1();
    static Predicate _run_grammar_1_1 = new PRED_run_grammar_1_1();
    static Predicate _run_grammar_1_2 = new PRED_run_grammar_1_2();

    public Term arg1;

    public PRED_run_grammar_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_run_grammar_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "run_grammar(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_run_grammar_1_var, _run_grammar_1_var, _run_grammar_1_2, _run_grammar_1_2, _run_grammar_1_2, _run_grammar_1_2);
    }
}

class PRED_run_grammar_1_var extends PRED_run_grammar_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_run_grammar_1_1, _run_grammar_1_var_1);
    }
}

class PRED_run_grammar_1_var_1 extends PRED_run_grammar_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_run_grammar_1_2);
    }
}

class PRED_run_grammar_1_1 extends PRED_run_grammar_1 {
    public Predicate exec(Prolog engine) {
    // run_grammar(480):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // run_grammar(480):-[]
        a1 = a1.dereference();
        if (a1.isInteger()){
            if (((IntegerTerm) a1).intValue() != 480)
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_run_grammar_1_2 extends PRED_run_grammar_1 {
    public Predicate exec(Prolog engine) {
    // run_grammar(A):-all_rules(B),initialize_rules(B,C,D,E),write('Medians: '),write(D),nl,write('Median differences: '),write(E),nl,flag(position,F,0),desired_attrs(G),expand_rand(p(A),H,G),write(H),nl
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // run_grammar(A):-[all_rules(B),initialize_rules(B,C,D,E),write('Medians: '),write(D),nl,write('Median differences: '),write(E),nl,flag(position,F,0),desired_attrs(G),expand_rand(p(A),H,G),write(H),nl]
        a2 = new VariableTerm(engine);
        a3 = new VariableTerm(engine);
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a1};
        a6 = new StructureTerm(s6, y1);
        a7 = new VariableTerm(engine);
        p1 = new PRED_nl_0(cont);
        p2 = new PRED_write_1(a7, p1);
        p3 = new PRED_expand_rand_3(a6, a7, a5, p2);
        p4 = new PRED_desired_attrs_1(a5, p3);
        p5 = new PRED_flag_3(s4, new VariableTerm(engine), si5, p4);
        p6 = new PRED_nl_0(p5);
        p7 = new PRED_write_1(a4, p6);
        p8 = new PRED_write_1(s3, p7);
        p9 = new PRED_nl_0(p8);
        p10 = new PRED_write_1(a3, p9);
        p11 = new PRED_write_1(s2, p10);
        p12 = new PRED_initialize_rules_4(a2, new VariableTerm(engine), a3, a4, p11);
        return new PRED_all_rules_1(a2, p12);
    }
}
