package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_unfoldr_fn/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_unfoldr_fn_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(10);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("fn", 2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s4 = SymbolTerm.makeSymbol(";", 2);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("->", 2);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("=", 2);
    static IntegerTerm si7 = new IntegerTerm(0);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("nothing");
    static SymbolTerm s9 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s11 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si12 = new IntegerTerm(1);
    static IntegerTerm si13 = new IntegerTerm(9);
    static IntegerTerm si14 = new IntegerTerm(8);
    static IntegerTerm si15 = new IntegerTerm(7);
    static IntegerTerm si16 = new IntegerTerm(6);
    static IntegerTerm si17 = new IntegerTerm(5);
    static IntegerTerm si18 = new IntegerTerm(4);
    static IntegerTerm si19 = new IntegerTerm(3);
    static IntegerTerm si20 = new IntegerTerm(2);
    static ListTerm s21 = new ListTerm(si12, s3);
    static ListTerm s22 = new ListTerm(si20, s21);
    static ListTerm s23 = new ListTerm(si19, s22);
    static ListTerm s24 = new ListTerm(si18, s23);
    static ListTerm s25 = new ListTerm(si17, s24);
    static ListTerm s26 = new ListTerm(si16, s25);
    static ListTerm s27 = new ListTerm(si15, s26);
    static ListTerm s28 = new ListTerm(si14, s27);
    static ListTerm s29 = new ListTerm(si13, s28);
    static ListTerm s30 = new ListTerm(si1, s29);

    public PRED_test_unfoldr_fn_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_unfoldr_fn_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_unfoldr_fn";
    }

    public Predicate exec(Prolog engine) {
    // test_unfoldr_fn:-unfoldr_fn(10,fn([A,B,C],(A=0->B=nothing;B=A,C is A-1)),[10,9,8,7,6,5,4,3,2,1])
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
    // test_unfoldr_fn:-[unfoldr_fn(10,fn([A,B,C],(A=0->B=nothing;B=A,C is A-1)),[10,9,8,7,6,5,4,3,2,1])]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        a3 = new VariableTerm(engine);
        a4 = new ListTerm(a3, s3);
        a5 = new ListTerm(a2, a4);
        a6 = new ListTerm(a1, a5);
        Term[] y1 = {a1, si7};
        a7 = new StructureTerm(s6, y1);
        Term[] y2 = {a2, s8};
        a8 = new StructureTerm(s6, y2);
        Term[] y3 = {a7, a8};
        a9 = new StructureTerm(s5, y3);
        Term[] y4 = {a2, a1};
        a10 = new StructureTerm(s6, y4);
        Term[] y5 = {a1, si12};
        a11 = new StructureTerm(s11, y5);
        Term[] y6 = {a3, a11};
        a12 = new StructureTerm(s10, y6);
        Term[] y7 = {a10, a12};
        a13 = new StructureTerm(s9, y7);
        Term[] y8 = {a9, a13};
        a14 = new StructureTerm(s4, y8);
        Term[] y9 = {a6, a14};
        a15 = new StructureTerm(s2, y9);
        return new PRED_unfoldr_fn_3(si1, a15, s30, cont);
    }
}
