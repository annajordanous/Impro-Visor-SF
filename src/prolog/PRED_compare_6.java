import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>compare/6</code> defined in longuet_higgins.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_compare_6 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static IntegerTerm si3 = new IntegerTerm(1);
    static Predicate _compare_6_top = new PRED_compare_6_top();
    static Predicate _compare_6_sub_1 = new PRED_compare_6_sub_1();
    static Predicate _compare_6_sub_2 = new PRED_compare_6_sub_2();
    static Predicate _compare_6_sub_3 = new PRED_compare_6_sub_3();
    static Predicate _compare_6_sub_4 = new PRED_compare_6_sub_4();
    static Predicate _compare_6_sub_5 = new PRED_compare_6_sub_5();
    static Predicate _compare_6_1 = new PRED_compare_6_1();
    static Predicate _compare_6_2 = new PRED_compare_6_2();
    static Predicate _compare_6_3 = new PRED_compare_6_3();
    static Predicate _compare_6_4 = new PRED_compare_6_4();
    static Predicate _compare_6_5 = new PRED_compare_6_5();
    static Predicate _compare_6_6 = new PRED_compare_6_6();

    public Term arg1, arg2, arg3, arg4, arg5, arg6;

    public PRED_compare_6(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        this.cont = cont;
    }

    public PRED_compare_6(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        this.cont = cont;
    }

    public int arity() { return 6; }

    public String toString() {
        return "compare(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.cont = cont;
        return _compare_6_top;
    }
}

class PRED_compare_6_top extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_compare_6_1, _compare_6_sub_1);
    }
}

class PRED_compare_6_sub_1 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_compare_6_2, _compare_6_sub_2);
    }
}

class PRED_compare_6_sub_2 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_compare_6_3, _compare_6_sub_3);
    }
}

class PRED_compare_6_sub_3 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_compare_6_4, _compare_6_sub_4);
    }
}

class PRED_compare_6_sub_4 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_compare_6_5, _compare_6_sub_5);
    }
}

class PRED_compare_6_sub_5 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_compare_6_6);
    }
}

class PRED_compare_6_1 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[],[],B,C,0):-true
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[],[],B,C,0):-[]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isInteger()){
            if (((IntegerTerm) a6).intValue() != 0)
                return engine.fail();
        } else if (a6.isVariable()){
            ((VariableTerm) a6).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_compare_6_2 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[],[B|C],D,1,0):-true
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[],[B|C],D,1,0):-[]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(new ListTerm(new VariableTerm(engine), new VariableTerm(engine)), engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isInteger()){
            if (((IntegerTerm) a5).intValue() != 1)
                return engine.fail();
        } else if (a5.isVariable()){
            ((VariableTerm) a5).bind(si3, engine.trail);
        } else {
            return engine.fail();
        }
        a6 = a6.dereference();
        if (a6.isInteger()){
            if (((IntegerTerm) a6).intValue() != 0)
                return engine.fail();
        } else if (a6.isVariable()){
            ((VariableTerm) a6).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_compare_6_3 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[],[B|C],D,E,F):-E=0,metric_value(A,D,G),metric_value(A,B,H),'$dummy_0_longuet_higgins.pro'(I,G,H,J),compare(A,[],C,D,I,K),F is J+K
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[],[B|C],D,E,F):-['$unify'(E,0),metric_value(A,D,G),metric_value(A,B,H),'$dummy_0_longuet_higgins.pro'(I,G,H,J),compare(A,[],C,D,I,K),'$plus'(J,K,F)]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a3.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $unify(a(5),si(2))
        if (! a5.unify(si2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        a13 = new VariableTerm(engine);
        p1 = new PRED_$plus_3(a12, a13, a6, cont);
        p2 = new PRED_compare_6(a1, s1, a8, a4, a11, a13, p1);
        p3 = new PRED_$dummy_0_longuet_higgins$002Epro_4(a11, a9, a10, a12, p2);
        p4 = new PRED_metric_value_3(a1, a7, a10, p3);
        return new PRED_metric_value_3(a1, a4, a9, p4);
    }
}

class PRED_compare_6_4 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[B|C],[D|E],F,G,H):-B=D,compare(A,C,E,B,0,H)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[B|C],[D|E],F,G,H):-['$unify'(B,D),compare(A,C,E,B,0,H)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a9 = args[0];
            a10 = args[1];
        } else if (a3.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a9, a10), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $unify(a(7),a(9))
        if (! a7.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        engine.aregs[1] = a1;
        engine.aregs[2] = a8;
        engine.aregs[3] = a10;
        engine.aregs[4] = a7;
        engine.aregs[5] = si2;
        engine.aregs[6] = a6;
        engine.cont = cont;
        return _compare_6_top;
    }
}

class PRED_compare_6_5 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[B|C],[D|E],F,G,H):-B\=D,G=0,metric_value(A,F,I),metric_value(A,D,J),'$dummy_1_longuet_higgins.pro'(K,I,L,J),compare(A,[B|C],E,F,L,M),H is K+M
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[B|C],[D|E],F,G,H):-['$not_unifiable'(B,D),'$unify'(G,0),metric_value(A,F,I),metric_value(A,D,J),'$dummy_1_longuet_higgins.pro'(K,I,L,J),compare(A,[B|C],E,F,L,M),'$plus'(K,M,H)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a9 = args[0];
            a10 = args[1];
        } else if (a3.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a9, a10), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $not_unifiable(a(7),a(9))
        if (a7.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(5),si(2))
        if (! a5.unify(si2, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        a13 = new VariableTerm(engine);
        a14 = new VariableTerm(engine);
        a15 = new ListTerm(a7, a8);
        a16 = new VariableTerm(engine);
        p1 = new PRED_$plus_3(a13, a16, a6, cont);
        p2 = new PRED_compare_6(a1, a15, a10, a4, a14, a16, p1);
        p3 = new PRED_$dummy_1_longuet_higgins$002Epro_4(a13, a11, a14, a12, p2);
        p4 = new PRED_metric_value_3(a1, a9, a12, p3);
        return new PRED_metric_value_3(a1, a4, a11, p4);
    }
}

class PRED_compare_6_6 extends PRED_compare_6 {
    public Predicate exec(Prolog engine) {
    // compare(A,[B|C],[D|E],F,G,H):-B\=D,G=1,compare(A,[B|C],E,F,G,H)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        cont = engine.cont;
    // compare(A,[B|C],[D|E],F,G,H):-['$not_unifiable'(B,D),'$unify'(G,1),compare(A,[B|C],E,F,G,H)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a2.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a9 = args[0];
            a10 = args[1];
        } else if (a3.isVariable()){
            a9 = new VariableTerm(engine);
            a10 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a9, a10), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $not_unifiable(a(7),a(9))
        if (a7.unify(a9, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(5),si(3))
        if (! a5.unify(si3, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a11 = new ListTerm(a7, a8);
        engine.aregs[1] = a1;
        engine.aregs[2] = a11;
        engine.aregs[3] = a10;
        engine.aregs[4] = a4;
        engine.aregs[5] = a5;
        engine.aregs[6] = a6;
        engine.cont = cont;
        return _compare_6_top;
    }
}
