import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_match/0</code> defined in random_helpers.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_match_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(2);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si4 = new IntegerTerm(234);
    static SymbolTerm s5 = SymbolTerm.makeSymbol("rule", 5);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("p", 1);
    static IntegerTerm si7 = new IntegerTerm(480);
    static Term[] s8 = {si7};
    static StructureTerm s9 = new StructureTerm(s6, s8);
    static SymbolTerm s10 = SymbolTerm.makeSymbol("seg1");
    static DoubleTerm sf11 = new DoubleTerm(1.0);
    static SymbolTerm s12 = SymbolTerm.makeSymbol(",", 2);
    static SymbolTerm s13 = SymbolTerm.makeSymbol("is", 2);
    static SymbolTerm s14 = SymbolTerm.makeSymbol("-", 2);
    static IntegerTerm si15 = new IntegerTerm(120);
    static SymbolTerm s16 = SymbolTerm.makeSymbol(">=", 2);
    static IntegerTerm si17 = new IntegerTerm(0);
    static SymbolTerm s18 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s19 = SymbolTerm.makeSymbol("user");
    static IntegerTerm si20 = new IntegerTerm(360);

    public PRED_test_match_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_match_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_match";
    }

    public Predicate exec(Prolog engine) {
    // test_match:-match(A,[1,2,B]),third(A,234),var(B),match(rule(p(480),C,D,E,F),rule(p(G),[seg1,p(H)],[],1.0,(H is G-120,H>=0))),var(G),var(H),C=[seg1,p(I)],call(F),nonvar(I),I=360
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24;
        Predicate p1, p2, p3, p4, p5, p6, p7, p8, p9;
    // test_match:-[match(A,[1,2,B]),third(A,234),var(B),match(rule(p(480),C,D,E,F),rule(p(G),[seg1,p(H)],[],1.0,(H is G-120,H>=0))),var(G),var(H),'$unify'(C,[seg1,p(I)]),call(user:F),nonvar(I),'$unify'(I,360)]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        a3 = new ListTerm(a2, s3);
        a4 = new ListTerm(si2, a3);
        a5 = new ListTerm(si1, a4);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        Term[] y1 = {s9, a6, new VariableTerm(engine), new VariableTerm(engine), a7};
        a8 = new StructureTerm(s5, y1);
        a9 = new VariableTerm(engine);
        Term[] y2 = {a9};
        a10 = new StructureTerm(s6, y2);
        a11 = new VariableTerm(engine);
        Term[] y3 = {a11};
        a12 = new StructureTerm(s6, y3);
        a13 = new ListTerm(a12, s3);
        a14 = new ListTerm(s10, a13);
        Term[] y4 = {a9, si15};
        a15 = new StructureTerm(s14, y4);
        Term[] y5 = {a11, a15};
        a16 = new StructureTerm(s13, y5);
        Term[] y6 = {a11, si17};
        a17 = new StructureTerm(s16, y6);
        Term[] y7 = {a16, a17};
        a18 = new StructureTerm(s12, y7);
        Term[] y8 = {a10, a14, s3, sf11, a18};
        a19 = new StructureTerm(s5, y8);
        a20 = new VariableTerm(engine);
        Term[] y9 = {a20};
        a21 = new StructureTerm(s6, y9);
        a22 = new ListTerm(a21, s3);
        a23 = new ListTerm(s10, a22);
        Term[] y10 = {s19, a7};
        a24 = new StructureTerm(s18, y10);
        p1 = new PRED_$unify_2(a20, si20, cont);
        p2 = new PRED_nonvar_1(a20, p1);
        p3 = new PRED_call_1(a24, p2);
        p4 = new PRED_$unify_2(a6, a23, p3);
        p5 = new PRED_var_1(a11, p4);
        p6 = new PRED_var_1(a9, p5);
        p7 = new PRED_match_2(a8, a19, p6);
        p8 = new PRED_var_1(a2, p7);
        p9 = new PRED_third_2(a1, si4, p8);
        return new PRED_match_2(a1, a5, p9);
    }
}
