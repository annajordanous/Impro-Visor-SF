import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>syncopation_measure_lh/5</code> defined in longuet_higgins.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_syncopation_measure_lh_5 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static Predicate _syncopation_measure_lh_5_sub_1 = new PRED_syncopation_measure_lh_5_sub_1();
    static Predicate _syncopation_measure_lh_5_sub_2 = new PRED_syncopation_measure_lh_5_sub_2();
    static Predicate _syncopation_measure_lh_5_1 = new PRED_syncopation_measure_lh_5_1();
    static Predicate _syncopation_measure_lh_5_2 = new PRED_syncopation_measure_lh_5_2();
    static Predicate _syncopation_measure_lh_5_3 = new PRED_syncopation_measure_lh_5_3();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_syncopation_measure_lh_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_syncopation_measure_lh_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "syncopation_measure_lh(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_syncopation_measure_lh_5_1, _syncopation_measure_lh_5_sub_1);
    }
}

class PRED_syncopation_measure_lh_5_sub_1 extends PRED_syncopation_measure_lh_5 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_syncopation_measure_lh_5_2, _syncopation_measure_lh_5_sub_2);
    }
}

class PRED_syncopation_measure_lh_5_sub_2 extends PRED_syncopation_measure_lh_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_syncopation_measure_lh_5_3);
    }
}

class PRED_syncopation_measure_lh_5_1 extends PRED_syncopation_measure_lh_5 {
    public Predicate exec(Prolog engine) {
    // syncopation_measure_lh(A,[],[],B,0):-true
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // syncopation_measure_lh(A,[],[],B,0):-[]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a5 = a5.dereference();
        if (a5.isInteger()){
            if (((IntegerTerm) a5).intValue() != 0)
                return engine.fail();
        } else if (a5.isVariable()){
            ((VariableTerm) a5).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_syncopation_measure_lh_5_2 extends PRED_syncopation_measure_lh_5 {
    public Predicate exec(Prolog engine) {
    // syncopation_measure_lh(A,B,[],C,D):-range(0,A,C,E),compare(A,B,E,0,0,D)
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // syncopation_measure_lh(A,B,[],C,D):-[range(0,A,C,E),compare(A,B,E,0,0,D)]
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        p1 = new PRED_compare_6(a1, a2, a6, si2, si2, a5, cont);
        return new PRED_range_4(si2, a1, a4, a6, p1);
    }
}

class PRED_syncopation_measure_lh_5_3 extends PRED_syncopation_measure_lh_5 {
    public Predicate exec(Prolog engine) {
    // syncopation_measure_lh(A,B,C,D,E):-range(0,A,D,F),compare(A,B,F,0,0,G),[H|I]=C,syncopation_measure_lh(A,H,I,D,J),E is G+J
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // syncopation_measure_lh(A,B,C,D,E):-[range(0,A,D,F),compare(A,B,F,0,0,G),'$unify'([H|I],C),syncopation_measure_lh(A,H,I,D,J),'$plus'(G,J,E)]
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        a10 = new ListTerm(a8, a9);
        a11 = new VariableTerm(engine);
        p1 = new PRED_$plus_3(a7, a11, a5, cont);
        p2 = new PRED_syncopation_measure_lh_5(a1, a8, a9, a4, a11, p1);
        p3 = new PRED_$unify_2(a10, a3, p2);
        p4 = new PRED_compare_6(a1, a2, a6, si2, si2, a7, p3);
        return new PRED_range_4(si2, a1, a4, a6, p4);
    }
}
