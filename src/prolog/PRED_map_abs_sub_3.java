package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>map_abs_sub/3</code> defined in statistics.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_map_abs_sub_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("-", 2);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _map_abs_sub_3_var = new PRED_map_abs_sub_3_var();
    static Predicate _map_abs_sub_3_var_1 = new PRED_map_abs_sub_3_var_1();
    static Predicate _map_abs_sub_3_1 = new PRED_map_abs_sub_3_1();
    static Predicate _map_abs_sub_3_2 = new PRED_map_abs_sub_3_2();

    public Term arg1, arg2, arg3;

    public PRED_map_abs_sub_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_map_abs_sub_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "map_abs_sub(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_map_abs_sub_3_var, _fail_0, _fail_0, _map_abs_sub_3_1, _fail_0, _map_abs_sub_3_2);
    }
}

class PRED_map_abs_sub_3_var extends PRED_map_abs_sub_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_map_abs_sub_3_1, _map_abs_sub_3_var_1);
    }
}

class PRED_map_abs_sub_3_var_1 extends PRED_map_abs_sub_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_map_abs_sub_3_2);
    }
}

class PRED_map_abs_sub_3_1 extends PRED_map_abs_sub_3 {
    public Predicate exec(Prolog engine) {
    // map_abs_sub([],A,[]):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // map_abs_sub([],A,[]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_map_abs_sub_3_2 extends PRED_map_abs_sub_3 {
    public Predicate exec(Prolog engine) {
    // map_abs_sub([A|B],C,[D|E]):-abs(A-C,D),map_abs_sub(B,C,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // map_abs_sub([A|B],C,[D|E]):-[abs(A-C,D),map_abs_sub(B,C,E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a3.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {a4, a2};
        a8 = new StructureTerm(s2, y1);
        p1 = new PRED_map_abs_sub_3(a5, a2, a7, cont);
        return new PRED_abs_2(a8, a6, p1);
    }
}
