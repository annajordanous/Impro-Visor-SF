package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_0_rule_expander.pro'/2</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_0_rule_expander$002Epro_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol(":", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("user");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("java_random_obj", 1);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("nextDouble");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("java.util.Random");
    static Predicate _$dummy_0_rule_expander$002Epro_2_sub_1 = new PRED_$dummy_0_rule_expander$002Epro_2_sub_1();
    static Predicate _$dummy_0_rule_expander$002Epro_2_1 = new PRED_$dummy_0_rule_expander$002Epro_2_1();
    static Predicate _$dummy_0_rule_expander$002Epro_2_2 = new PRED_$dummy_0_rule_expander$002Epro_2_2();

    public Term arg1, arg2;

    public PRED_$dummy_0_rule_expander$002Epro_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_$dummy_0_rule_expander$002Epro_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "$dummy_0_rule_expander.pro(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_0_rule_expander$002Epro_2_1, _$dummy_0_rule_expander$002Epro_2_sub_1);
    }
}

class PRED_$dummy_0_rule_expander$002Epro_2_sub_1 extends PRED_$dummy_0_rule_expander$002Epro_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_0_rule_expander$002Epro_2_2);
    }
}

class PRED_$dummy_0_rule_expander$002Epro_2_1 extends PRED_$dummy_0_rule_expander$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_0_rule_expander.pro'(A,B):-java_random_obj(A),!,java_method(A,nextDouble,B)
        Term a1, a2, a3, a4, a5;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_0_rule_expander.pro'(A,B):-['$get_level'(C),call(user:java_random_obj(A)),'$cut'(C),java_method(A,nextDouble,B)]
        a3 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(3))
        if (! a3.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a1};
        a4 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a4};
        a5 = new StructureTerm(s1, y2);
        p1 = new PRED_java_method_3(a1, s4, a2, cont);
        p2 = new PRED_$cut_1(a3, p1);
        return new PRED_call_1(a5, p2);
    }
}

class PRED_$dummy_0_rule_expander$002Epro_2_2 extends PRED_$dummy_0_rule_expander$002Epro_2 {
    public Predicate exec(Prolog engine) {
    // '$dummy_0_rule_expander.pro'(A,B):-java_constructor('java.util.Random',A),assert(java_random_obj(A)),java_method(A,nextDouble,B)
        Term a1, a2, a3, a4;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // '$dummy_0_rule_expander.pro'(A,B):-[java_constructor('java.util.Random',A),assert(user:java_random_obj(A)),java_method(A,nextDouble,B)]
        Term[] y1 = {a1};
        a3 = new StructureTerm(s3, y1);
        Term[] y2 = {s2, a3};
        a4 = new StructureTerm(s1, y2);
        p1 = new PRED_java_method_3(a1, s4, a2, cont);
        p2 = new PRED_assert_1(a4, p1);
        return new PRED_java_constructor_2(s5, a1, p2);
    }
}
