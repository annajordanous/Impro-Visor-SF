import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>expand_rand/3</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_expand_rand_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("slope", 3);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("functor_second");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("position");
    static IntegerTerm si5 = new IntegerTerm(-999);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("t", 2);
    static Predicate _expand_rand_3_sub_1 = new PRED_expand_rand_3_sub_1();
    static Predicate _expand_rand_3_sub_2 = new PRED_expand_rand_3_sub_2();
    static Predicate _expand_rand_3_1 = new PRED_expand_rand_3_1();
    static Predicate _expand_rand_3_2 = new PRED_expand_rand_3_2();
    static Predicate _expand_rand_3_3 = new PRED_expand_rand_3_3();

    public Term arg1, arg2, arg3;

    public PRED_expand_rand_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_expand_rand_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "expand_rand(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_expand_rand_3_1, _expand_rand_3_sub_1);
    }
}

class PRED_expand_rand_3_sub_1 extends PRED_expand_rand_3 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_expand_rand_3_2, _expand_rand_3_sub_2);
    }
}

class PRED_expand_rand_3_sub_2 extends PRED_expand_rand_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_expand_rand_3_3);
    }
}

class PRED_expand_rand_3_1 extends PRED_expand_rand_3 {
    public Predicate exec(Prolog engine) {
    // expand_rand(A,[A],B):-A=slope(C,D,E),map_fast(E,functor_second,F),sumlist(F,G),flag(position,H,-999),I is H+G,flag(position,J,I)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // expand_rand(A,[A],B):-['$unify'(A,slope(C,D,E)),map_fast(E,functor_second,F),sumlist(F,G),flag(position,H,-999),'$plus'(H,G,I),flag(position,J,I)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(new ListTerm(a1, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine), a4};
        a5 = new StructureTerm(s2, y1);
        //START inline expansion of $unify(a(1),a(5))
        if (! a1.unify(a5, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        p1 = new PRED_flag_3(s4, new VariableTerm(engine), a9, cont);
        p2 = new PRED_$plus_3(a8, a7, a9, p1);
        p3 = new PRED_flag_3(s4, a8, si5, p2);
        p4 = new PRED_sumlist_2(a6, a7, p3);
        return new PRED_map_fast_3(a4, s3, a6, p4);
    }
}

class PRED_expand_rand_3_2 extends PRED_expand_rand_3 {
    public Predicate exec(Prolog engine) {
    // expand_rand(A,[A],B):-A=t(C,D),valid_note_type(C),flag(position,E,-999),F is E+D,flag(position,G,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // expand_rand(A,[A],B):-['$unify'(A,t(C,D)),valid_note_type(C),flag(position,E,-999),'$plus'(E,D,F),flag(position,G,F)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(new ListTerm(a1, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        Term[] y1 = {a4, a5};
        a6 = new StructureTerm(s6, y1);
        //START inline expansion of $unify(a(1),a(6))
        if (! a1.unify(a6, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        p1 = new PRED_flag_3(s4, new VariableTerm(engine), a8, cont);
        p2 = new PRED_$plus_3(a7, a5, a8, p1);
        p3 = new PRED_flag_3(s4, a7, si5, p2);
        return new PRED_valid_note_type_1(a4, p3);
    }
}

class PRED_expand_rand_3_3 extends PRED_expand_rand_3 {
    public Predicate exec(Prolog engine) {
    // expand_rand(A,B,C):-bag_expand_one_level(A,D,E,C),pick_random(E,D,F),map_expand_rand(F,G,C),append(G,B)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // expand_rand(A,B,C):-[bag_expand_one_level(A,D,E,C),pick_random(E,D,F),map_expand_rand(F,G,C),append(G,B)]
        a4 = new VariableTerm(engine);
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        p1 = new PRED_append_2(a7, a2, cont);
        p2 = new PRED_map_expand_rand_3(a6, a7, a3, p1);
        p3 = new PRED_pick_random_3(a5, a4, a6, p2);
        return new PRED_bag_expand_one_level_4(a1, a4, a5, a3, p3);
    }
}
