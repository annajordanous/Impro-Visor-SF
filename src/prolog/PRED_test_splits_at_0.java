import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_splits_at/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_splits_at_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(2);
    static IntegerTerm si2 = new IntegerTerm(1);
    static IntegerTerm si3 = new IntegerTerm(3);
    static IntegerTerm si4 = new IntegerTerm(4);
    static IntegerTerm si5 = new IntegerTerm(5);
    static IntegerTerm si6 = new IntegerTerm(6);
    static SymbolTerm s7 = SymbolTerm.makeSymbol("[]");
    static ListTerm s8 = new ListTerm(si6, s7);
    static ListTerm s9 = new ListTerm(si5, s8);
    static ListTerm s10 = new ListTerm(si4, s9);
    static ListTerm s11 = new ListTerm(si3, s10);
    static ListTerm s12 = new ListTerm(si1, s11);
    static ListTerm s13 = new ListTerm(si2, s12);
    static ListTerm s14 = new ListTerm(si1, s7);
    static ListTerm s15 = new ListTerm(si2, s14);
    static ListTerm s16 = new ListTerm(si4, s7);
    static ListTerm s17 = new ListTerm(si3, s16);
    static ListTerm s18 = new ListTerm(s9, s7);
    static ListTerm s19 = new ListTerm(s17, s18);
    static ListTerm s20 = new ListTerm(s15, s19);
    static ListTerm s21 = new ListTerm(si5, s7);
    static ListTerm s22 = new ListTerm(si4, s21);
    static ListTerm s23 = new ListTerm(si3, s22);
    static ListTerm s24 = new ListTerm(si1, s23);
    static ListTerm s25 = new ListTerm(si2, s24);
    static ListTerm s26 = new ListTerm(s21, s7);
    static ListTerm s27 = new ListTerm(s17, s26);
    static ListTerm s28 = new ListTerm(s15, s27);

    public PRED_test_splits_at_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_splits_at_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_splits_at";
    }

    public Predicate exec(Prolog engine) {
    // test_splits_at:-splits_at(2,[1,2,3,4,5,6],[[1,2],[3,4],[5,6]]),splits_at(2,[1,2,3,4,5],[[1,2],[3,4],[5]])
        engine.setB0();
        Predicate p1;
    // test_splits_at:-[splits_at(2,[1,2,3,4,5,6],[[1,2],[3,4],[5,6]]),splits_at(2,[1,2,3,4,5],[[1,2],[3,4],[5]])]
        p1 = new PRED_splits_at_3(si1, s25, s28, cont);
        return new PRED_splits_at_3(si1, s13, s20, p1);
    }
}
