package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>divide_list_by/3</code> defined in statistics.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_divide_list_by_3 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _divide_list_by_3_top = new PRED_divide_list_by_3_top();
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _divide_list_by_3_var = new PRED_divide_list_by_3_var();
    static Predicate _divide_list_by_3_var_1 = new PRED_divide_list_by_3_var_1();
    static Predicate _divide_list_by_3_1 = new PRED_divide_list_by_3_1();
    static Predicate _divide_list_by_3_2 = new PRED_divide_list_by_3_2();

    public Term arg1, arg2, arg3;

    public PRED_divide_list_by_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_divide_list_by_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "divide_list_by(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        return _divide_list_by_3_top;
    }
}

class PRED_divide_list_by_3_top extends PRED_divide_list_by_3 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.switch_on_term(_divide_list_by_3_var, _fail_0, _fail_0, _divide_list_by_3_1, _fail_0, _divide_list_by_3_2);
    }
}

class PRED_divide_list_by_3_var extends PRED_divide_list_by_3 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_divide_list_by_3_1, _divide_list_by_3_var_1);
    }
}

class PRED_divide_list_by_3_var_1 extends PRED_divide_list_by_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_divide_list_by_3_2);
    }
}

class PRED_divide_list_by_3_1 extends PRED_divide_list_by_3 {
    public Predicate exec(Prolog engine) {
    // divide_list_by([],A,[]):-true
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // divide_list_by([],A,[]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_divide_list_by_3_2 extends PRED_divide_list_by_3 {
    public Predicate exec(Prolog engine) {
    // divide_list_by([A|B],C,[D|E]):-D is A/C,divide_list_by(B,C,E)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // divide_list_by([A|B],C,[D|E]):-['$float_quotient'(A,C,D),divide_list_by(B,C,E)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a4 = args[0];
            a5 = args[1];
        } else if (a1.isVariable()){
            a4 = new VariableTerm(engine);
            a5 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a4, a5), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a3.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $float_quotient(a(4),a(2),a(6))
        try {
            if (! a6.unify(Arithmetic.evaluate(a4).divide(Arithmetic.evaluate(a2)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        engine.aregs[1] = a5;
        engine.aregs[2] = a2;
        engine.aregs[3] = a7;
        engine.cont = cont;
        return _divide_list_by_3_top;
    }
}
