package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_rand_float/0</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_rand_float_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(0);
    static IntegerTerm si2 = new IntegerTerm(1);

    public PRED_test_rand_float_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_rand_float_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_rand_float";
    }

    public Predicate exec(Prolog engine) {
    // test_rand_float:-rand_float(A),rand_float(B),A\=B,A>=0,B>=0,A<1,B<1
        engine.setB0();
        Term a1, a2;
        Predicate p1, p2, p3, p4, p5, p6;
    // test_rand_float:-[rand_float(A),rand_float(B),'$not_unifiable'(A,B),'$greater_or_equal'(A,0),'$greater_or_equal'(B,0),'$less_than'(A,1),'$less_than'(B,1)]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        p1 = new PRED_$less_than_2(a2, si2, cont);
        p2 = new PRED_$less_than_2(a1, si2, p1);
        p3 = new PRED_$greater_or_equal_2(a2, si1, p2);
        p4 = new PRED_$greater_or_equal_2(a1, si1, p3);
        p5 = new PRED_$not_unifiable_2(a1, a2, p4);
        p6 = new PRED_rand_float_1(a2, p5);
        return new PRED_rand_float_1(a1, p6);
    }
}
