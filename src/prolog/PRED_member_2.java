package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>member/2</code> defined in plcafe_defs.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_member_2 extends Predicate {
    static Predicate _member_2_top = new PRED_member_2_top();
    static Predicate _member_2_sub_1 = new PRED_member_2_sub_1();
    static Predicate _member_2_1 = new PRED_member_2_1();
    static Predicate _member_2_2 = new PRED_member_2_2();

    public Term arg1, arg2;

    public PRED_member_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_member_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "member(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        return _member_2_top;
    }
}

class PRED_member_2_top extends PRED_member_2 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_member_2_1, _member_2_sub_1);
    }
}

class PRED_member_2_sub_1 extends PRED_member_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_member_2_2);
    }
}

class PRED_member_2_1 extends PRED_member_2 {
    public Predicate exec(Prolog engine) {
    // member(A,[A|B]):-true
        Term a1, a2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // member(A,[A|B]):-[]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(new ListTerm(a1, new VariableTerm(engine)), engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_member_2_2 extends PRED_member_2 {
    public Predicate exec(Prolog engine) {
    // member(A,[B|C]):-member(A,C)
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // member(A,[B|C]):-[member(A,C)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a3 = args[1];
        } else if (a2.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(new VariableTerm(engine), a3), engine.trail);
        } else {
            return engine.fail();
        }
        engine.aregs[1] = a1;
        engine.aregs[2] = a3;
        engine.cont = cont;
        return _member_2_top;
    }
}
