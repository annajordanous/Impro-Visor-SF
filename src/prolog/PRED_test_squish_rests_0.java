import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_squish_rests/0</code> defined in squish_rests.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_squish_rests_0 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("c");
    static IntegerTerm si3 = new IntegerTerm(40);
    static Term[] s4 = {s2, si3};
    static StructureTerm s5 = new StructureTerm(s1, s4);
    static SymbolTerm s6 = SymbolTerm.makeSymbol("[]");
    static ListTerm s7 = new ListTerm(s5, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("r");
    static Term[] s9 = {s8, si3};
    static StructureTerm s10 = new StructureTerm(s1, s9);
    static ListTerm s11 = new ListTerm(s10, s6);
    static IntegerTerm si12 = new IntegerTerm(20);
    static Term[] s13 = {s8, si12};
    static StructureTerm s14 = new StructureTerm(s1, s13);
    static ListTerm s15 = new ListTerm(s14, s6);
    static ListTerm s16 = new ListTerm(s14, s15);
    static IntegerTerm si17 = new IntegerTerm(160);
    static Term[] s18 = {s8, si17};
    static StructureTerm s19 = new StructureTerm(s1, s18);
    static ListTerm s20 = new ListTerm(s5, s11);
    static ListTerm s21 = new ListTerm(s19, s20);
    static IntegerTerm si22 = new IntegerTerm(80);
    static Term[] s23 = {s2, si22};
    static StructureTerm s24 = new StructureTerm(s1, s23);
    static ListTerm s25 = new ListTerm(s24, s6);
    static ListTerm s26 = new ListTerm(s19, s25);
    static ListTerm s27 = new ListTerm(s10, s20);
    static ListTerm s28 = new ListTerm(s5, s27);
    static ListTerm s29 = new ListTerm(s24, s25);
    static ListTerm s30 = new ListTerm(s5, s7);

    public PRED_test_squish_rests_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_squish_rests_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_squish_rests";
    }

    public Predicate exec(Prolog engine) {
    // test_squish_rests:-squish_rests([t(c,40)],[t(c,40)]),squish_rests([t(r,40)],[t(r,40)]),squish_rests([t(r,20),t(r,20)],[t(r,40)]),squish_rests([t(r,160),t(c,40),t(r,40)],[t(r,160),t(c,80)]),squish_rests([t(c,40),t(r,40),t(c,40),t(r,40)],[t(c,80),t(c,80)]),squish_rests([t(c,40),t(c,40)],[t(c,40),t(c,40)])
        engine.setB0();
        Predicate p1, p2, p3, p4, p5;
    // test_squish_rests:-[squish_rests([t(c,40)],[t(c,40)]),squish_rests([t(r,40)],[t(r,40)]),squish_rests([t(r,20),t(r,20)],[t(r,40)]),squish_rests([t(r,160),t(c,40),t(r,40)],[t(r,160),t(c,80)]),squish_rests([t(c,40),t(r,40),t(c,40),t(r,40)],[t(c,80),t(c,80)]),squish_rests([t(c,40),t(c,40)],[t(c,40),t(c,40)])]
        p1 = new PRED_squish_rests_2(s30, s30, cont);
        p2 = new PRED_squish_rests_2(s28, s29, p1);
        p3 = new PRED_squish_rests_2(s21, s26, p2);
        p4 = new PRED_squish_rests_2(s16, s11, p3);
        p5 = new PRED_squish_rests_2(s11, s11, p4);
        return new PRED_squish_rests_2(s7, s7, p5);
    }
}
