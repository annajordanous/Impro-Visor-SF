import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>attr_helper/4</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_attr_helper_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("density");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("variety");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("consonance");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _attr_helper_4_var = new PRED_attr_helper_4_var();
    static Predicate _attr_helper_4_var_1 = new PRED_attr_helper_4_var_1();
    static Predicate _attr_helper_4_var_2 = new PRED_attr_helper_4_var_2();
    static Predicate _attr_helper_4_con = new PRED_attr_helper_4_con();
    static Predicate _attr_helper_4_con_1 = new PRED_attr_helper_4_con_1();
    static Predicate _attr_helper_4_1 = new PRED_attr_helper_4_1();
    static Predicate _attr_helper_4_2 = new PRED_attr_helper_4_2();
    static Predicate _attr_helper_4_3 = new PRED_attr_helper_4_3();

    public Term arg1, arg2, arg3, arg4;

    public PRED_attr_helper_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_attr_helper_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "attr_helper(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_attr_helper_4_var, _fail_0, _fail_0, _attr_helper_4_con, _fail_0, _attr_helper_4_1);
    }
}

class PRED_attr_helper_4_var extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_attr_helper_4_1, _attr_helper_4_var_1);
    }
}

class PRED_attr_helper_4_var_1 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_attr_helper_4_2, _attr_helper_4_var_2);
    }
}

class PRED_attr_helper_4_var_2 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_attr_helper_4_3);
    }
}

class PRED_attr_helper_4_con extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_attr_helper_4_2, _attr_helper_4_con_1);
    }
}

class PRED_attr_helper_4_con_1 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_attr_helper_4_3);
    }
}

class PRED_attr_helper_4_1 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
    // attr_helper([A|B],C,D,E):-'$dummy_4_attributes.pro'(E,A,F,G,H,I,J,B,C,D,K)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // attr_helper([A|B],C,D,E):-['$dummy_4_attributes.pro'(E,A,F,G,H,I,J,B,C,D,K)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a1.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        return new PRED_$dummy_4_attributes$002Epro_11(a4, a5, new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine), a6, a2, a3, new VariableTerm(engine), cont);
    }
}

class PRED_attr_helper_4_2 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
    // attr_helper([],[],A,[]):-true
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // attr_helper([],[],A,[]):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s1))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_attr_helper_4_3 extends PRED_attr_helper_4 {
    public Predicate exec(Prolog engine) {
    // attr_helper([],A,B,C):-density(B,A,D),variety(B,A,E),consonance(B,A,F),C=[[density,D],[variety,E],[consonance,F]]
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // attr_helper([],A,B,C):-[density(B,A,D),variety(B,A,E),consonance(B,A,F),'$unify'(C,[[density,D],[variety,E],[consonance,F]])]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new ListTerm(a5, s1);
        a9 = new ListTerm(s2, a8);
        a10 = new ListTerm(a6, s1);
        a11 = new ListTerm(s3, a10);
        a12 = new ListTerm(a7, s1);
        a13 = new ListTerm(s4, a12);
        a14 = new ListTerm(a13, s1);
        a15 = new ListTerm(a11, a14);
        a16 = new ListTerm(a9, a15);
        p1 = new PRED_$unify_2(a4, a16, cont);
        p2 = new PRED_consonance_3(a3, a2, a7, p1);
        p3 = new PRED_variety_3(a3, a2, a6, p2);
        return new PRED_density_3(a3, a2, a5, p3);
    }
}
