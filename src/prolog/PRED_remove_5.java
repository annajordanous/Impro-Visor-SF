package prolog;


import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>remove/5</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_remove_5 extends Predicate {
    static Predicate _remove_5_top = new PRED_remove_5_top();
    static Predicate _remove_5_sub_1 = new PRED_remove_5_sub_1();
    static Predicate _remove_5_1 = new PRED_remove_5_1();
    static Predicate _remove_5_2 = new PRED_remove_5_2();

    public Term arg1, arg2, arg3, arg4, arg5;

    public PRED_remove_5(Term a1, Term a2, Term a3, Term a4, Term a5, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        this.cont = cont;
    }

    public PRED_remove_5(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        this.cont = cont;
    }

    public int arity() { return 5; }

    public String toString() {
        return "remove(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.cont = cont;
        return _remove_5_top;
    }
}

class PRED_remove_5_top extends PRED_remove_5 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_remove_5_1, _remove_5_sub_1);
    }
}

class PRED_remove_5_sub_1 extends PRED_remove_5 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_remove_5_2);
    }
}

class PRED_remove_5_1 extends PRED_remove_5 {
    public Predicate exec(Prolog engine) {
    // remove(A,[A|B],[C|D],B,D):-!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // remove(A,[A|B],[C|D],B,D):-['$neck_cut']
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            a6 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a1, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a7 = args[1];
        } else if (a3.isVariable()){
            a7 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(new VariableTerm(engine), a7), engine.trail);
        } else {
            return engine.fail();
        }
        if (! a6.unify(a4, engine.trail))
            return engine.fail();
        if (! a7.unify(a5, engine.trail))
            return engine.fail();
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_remove_5_2 extends PRED_remove_5 {
    public Predicate exec(Prolog engine) {
    // remove(A,[B|C],[D|E],F,G):-F=[B|H],G=[D|I],remove(A,C,E,H,I)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        cont = engine.cont;
    // remove(A,[B|C],[D|E],F,G):-['$unify'(F,[B|H]),'$unify'(G,[D|I]),remove(A,C,E,H,I)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a6 = args[0];
            a7 = args[1];
        } else if (a2.isVariable()){
            a6 = new VariableTerm(engine);
            a7 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a6, a7), engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a8 = args[0];
            a9 = args[1];
        } else if (a3.isVariable()){
            a8 = new VariableTerm(engine);
            a9 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a8, a9), engine.trail);
        } else {
            return engine.fail();
        }
        a10 = new VariableTerm(engine);
        a11 = new ListTerm(a6, a10);
        //START inline expansion of $unify(a(4),a(11))
        if (! a4.unify(a11, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a12 = new VariableTerm(engine);
        a13 = new ListTerm(a8, a12);
        //START inline expansion of $unify(a(5),a(13))
        if (! a5.unify(a13, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        engine.aregs[1] = a1;
        engine.aregs[2] = a7;
        engine.aregs[3] = a9;
        engine.aregs[4] = a10;
        engine.aregs[5] = a12;
        engine.cont = cont;
        return _remove_5_top;
    }
}
