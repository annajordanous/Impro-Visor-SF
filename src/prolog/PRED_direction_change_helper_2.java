import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>direction_change_helper/2</code> defined in attributes.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_direction_change_helper_2 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static IntegerTerm si2 = new IntegerTerm(0);
    static SymbolTerm s3 = SymbolTerm.makeSymbol("slope", 3);
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _direction_change_helper_2_var = new PRED_direction_change_helper_2_var();
    static Predicate _direction_change_helper_2_var_1 = new PRED_direction_change_helper_2_var_1();
    static Predicate _direction_change_helper_2_1 = new PRED_direction_change_helper_2_1();
    static Predicate _direction_change_helper_2_2 = new PRED_direction_change_helper_2_2();

    public Term arg1, arg2;

    public PRED_direction_change_helper_2(Term a1, Term a2, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        this.cont = cont;
    }

    public PRED_direction_change_helper_2(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        this.cont = cont;
    }

    public int arity() { return 2; }

    public String toString() {
        return "direction_change_helper(" + arg1 + "," + arg2 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_direction_change_helper_2_var, _fail_0, _fail_0, _fail_0, _fail_0, _direction_change_helper_2_var);
    }
}

class PRED_direction_change_helper_2_var extends PRED_direction_change_helper_2 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_direction_change_helper_2_1, _direction_change_helper_2_var_1);
    }
}

class PRED_direction_change_helper_2_var_1 extends PRED_direction_change_helper_2 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_direction_change_helper_2_2);
    }
}

class PRED_direction_change_helper_2_1 extends PRED_direction_change_helper_2 {
    public Predicate exec(Prolog engine) {
    // direction_change_helper([A],0):-A=slope(B,C,D),!
        Term a1, a2, a3, a4, a5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // direction_change_helper([A],0):-['$get_level'(B),'$unify'(A,slope(C,D,E)),'$cut'(B)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a2 = a2.dereference();
        if (a2.isInteger()){
            if (((IntegerTerm) a2).intValue() != 0)
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {new VariableTerm(engine), new VariableTerm(engine), new VariableTerm(engine)};
        a5 = new StructureTerm(s3, y1);
        //START inline expansion of $unify(a(3),a(5))
        if (! a3.unify(a5, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_direction_change_helper_2_2 extends PRED_direction_change_helper_2 {
    public Predicate exec(Prolog engine) {
    // direction_change_helper([A,B|C],D):-E=[B|C],slope_direction_change(A,B,F),direction_change_helper(E,G),D is F+G
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        cont = engine.cont;
    // direction_change_helper([A,B|C],D):-['$unify'(E,[B|C]),slope_direction_change(A,B,F),direction_change_helper(E,G),'$plus'(F,G,D)]
        a1 = a1.dereference();
        if (a1.isList()){
            Term[] args = {((ListTerm)a1).car(), ((ListTerm)a1).cdr()};
            a3 = args[0];
            a4 = args[1];
        } else if (a1.isVariable()){
            a3 = new VariableTerm(engine);
            a4 = new VariableTerm(engine);
            ((VariableTerm) a1).bind(new ListTerm(a3, a4), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        a8 = new ListTerm(a5, a6);
        //START inline expansion of $unify(a(7),a(8))
        if (! a7.unify(a8, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a9 = new VariableTerm(engine);
        a10 = new VariableTerm(engine);
        p1 = new PRED_$plus_3(a9, a10, a2, cont);
        p2 = new PRED_direction_change_helper_2(a7, a10, p1);
        return new PRED_slope_direction_change_3(a3, a5, a9, p2);
    }
}
