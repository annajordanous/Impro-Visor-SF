package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>split_with/4</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_split_with_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("\\+", 1);
    static Predicate _split_with_4_var = new PRED_split_with_4_var();
    static Predicate _split_with_4_var_1 = new PRED_split_with_4_var_1();
    static Predicate _split_with_4_var_2 = new PRED_split_with_4_var_2();
    static Predicate _split_with_4_var_3 = new PRED_split_with_4_var_3();
    static Predicate _split_with_4_var_4 = new PRED_split_with_4_var_4();
    static Predicate _split_with_4_int = new PRED_split_with_4_int();
    static Predicate _split_with_4_int_1 = new PRED_split_with_4_int_1();
    static Predicate _split_with_4_int_2 = new PRED_split_with_4_int_2();
    static Predicate _split_with_4_int_3 = new PRED_split_with_4_int_3();
    static Predicate _split_with_4_1 = new PRED_split_with_4_1();
    static Predicate _split_with_4_2 = new PRED_split_with_4_2();
    static Predicate _split_with_4_3 = new PRED_split_with_4_3();
    static Predicate _split_with_4_4 = new PRED_split_with_4_4();
    static Predicate _split_with_4_5 = new PRED_split_with_4_5();

    public Term arg1, arg2, arg3, arg4;

    public PRED_split_with_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_split_with_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "split_with(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_split_with_4_var, _split_with_4_int, _split_with_4_int, _split_with_4_var, _split_with_4_int, _split_with_4_int);
    }
}

class PRED_split_with_4_var extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_split_with_4_1, _split_with_4_var_1);
    }
}

class PRED_split_with_4_var_1 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_split_with_4_2, _split_with_4_var_2);
    }
}

class PRED_split_with_4_var_2 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_split_with_4_3, _split_with_4_var_3);
    }
}

class PRED_split_with_4_var_3 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_split_with_4_4, _split_with_4_var_4);
    }
}

class PRED_split_with_4_var_4 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_split_with_4_5);
    }
}

class PRED_split_with_4_int extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_split_with_4_2, _split_with_4_int_1);
    }
}

class PRED_split_with_4_int_1 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_split_with_4_3, _split_with_4_int_2);
    }
}

class PRED_split_with_4_int_2 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_split_with_4_4, _split_with_4_int_3);
    }
}

class PRED_split_with_4_int_3 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_split_with_4_5);
    }
}

class PRED_split_with_4_1 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
    // split_with([],A,[],[]):-!
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_with([],A,[],[]):-['$neck_cut']
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $neck_cut
        engine.neckCut();
        //END inline expansion
        return cont;
    }
}

class PRED_split_with_4_2 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
    // split_with(A,B,[C],[]):-take_while(A,\+B,C,[]),!
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_with(A,B,[C],[]):-['$get_level'(D),take_while(A,\+B,C,[]),'$cut'(D)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a5 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a3.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a2};
        a7 = new StructureTerm(s2, y1);
        p1 = new PRED_$cut_1(a6, cont);
        return new PRED_take_while_4(a1, a7, a5, s1, p1);
    }
}

class PRED_split_with_4_3 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
    // split_with(A,B,[],[C]):-take_while(A,B,C,[]),!
        Term a1, a2, a3, a4, a5, a6;
        Predicate p1;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_with(A,B,[],[C]):-['$get_level'(D),take_while(A,B,C,[]),'$cut'(D)]
        a3 = a3.dereference();
        if (a3.isSymbol()){
            if (! a3.equals(s1))
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a5 = args[0];
            if (! s1.unify(args[1], engine.trail))
                return engine.fail();
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a5, s1), engine.trail);
        } else {
            return engine.fail();
        }
        a6 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(6))
        if (! a6.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        p1 = new PRED_$cut_1(a6, cont);
        return new PRED_take_while_4(a1, a2, a5, s1, p1);
    }
}

class PRED_split_with_4_4 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
    // split_with(A,B,[C|D],[E|F]):-take_while(A,\+B,C,G),!,take_while(G,B,E,H),split_with(H,B,D,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12;
        Predicate p1, p2, p3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_with(A,B,[C|D],[E|F]):-['$get_level'(G),take_while(A,\+B,C,H),'$cut'(G),take_while(H,B,E,I),split_with(I,B,D,F)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a3.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a4.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(9))
        if (! a9.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y1 = {a2};
        a10 = new StructureTerm(s2, y1);
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        p1 = new PRED_split_with_4(a12, a2, a6, a8, cont);
        p2 = new PRED_take_while_4(a11, a2, a7, a12, p1);
        p3 = new PRED_$cut_1(a9, p2);
        return new PRED_take_while_4(a1, a10, a5, a11, p3);
    }
}

class PRED_split_with_4_5 extends PRED_split_with_4 {
    public Predicate exec(Prolog engine) {
    // split_with(A,B,[C|D],[E|F]):-take_while(A,B,E,G),take_while(G,\+B,C,H),split_with(H,B,D,F)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // split_with(A,B,[C|D],[E|F]):-[take_while(A,B,E,G),take_while(G,\+B,C,H),split_with(H,B,D,F)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a3.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            a7 = args[0];
            a8 = args[1];
        } else if (a4.isVariable()){
            a7 = new VariableTerm(engine);
            a8 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a7, a8), engine.trail);
        } else {
            return engine.fail();
        }
        a9 = new VariableTerm(engine);
        Term[] y1 = {a2};
        a10 = new StructureTerm(s2, y1);
        a11 = new VariableTerm(engine);
        p1 = new PRED_split_with_4(a11, a2, a6, a8, cont);
        p2 = new PRED_take_while_4(a9, a10, a5, a11, p1);
        return new PRED_take_while_4(a1, a2, a7, a9, p2);
    }
}
