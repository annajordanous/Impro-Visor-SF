import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_2_rule_expander.pro'/7</code> defined in rule_expander.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_2_rule_expander$002Epro_7 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _$dummy_2_rule_expander$002Epro_7_sub_1 = new PRED_$dummy_2_rule_expander$002Epro_7_sub_1();
    static Predicate _$dummy_2_rule_expander$002Epro_7_1 = new PRED_$dummy_2_rule_expander$002Epro_7_1();
    static Predicate _$dummy_2_rule_expander$002Epro_7_2 = new PRED_$dummy_2_rule_expander$002Epro_7_2();

    public Term arg1, arg2, arg3, arg4, arg5, arg6, arg7;

    public PRED_$dummy_2_rule_expander$002Epro_7(Term a1, Term a2, Term a3, Term a4, Term a5, Term a6, Term a7, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        arg5 = a5;
        arg6 = a6;
        arg7 = a7;
        this.cont = cont;
    }

    public PRED_$dummy_2_rule_expander$002Epro_7(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        arg5 = args[4];
        arg6 = args[5];
        arg7 = args[6];
        this.cont = cont;
    }

    public int arity() { return 7; }

    public String toString() {
        return "$dummy_2_rule_expander.pro(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + "," + arg5 + "," + arg6 + "," + arg7 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.aregs[5] = arg5;
        engine.aregs[6] = arg6;
        engine.aregs[7] = arg7;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_2_rule_expander$002Epro_7_1, _$dummy_2_rule_expander$002Epro_7_sub_1);
    }
}

class PRED_$dummy_2_rule_expander$002Epro_7_sub_1 extends PRED_$dummy_2_rule_expander$002Epro_7 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_2_rule_expander$002Epro_7_2);
    }
}

class PRED_$dummy_2_rule_expander$002Epro_7_1 extends PRED_$dummy_2_rule_expander$002Epro_7 {
    public Predicate exec(Prolog engine) {
    // '$dummy_2_rule_expander.pro'(A,B,C,D,E,F,G):-G=[],!,E=C
        Term a1, a2, a3, a4, a5, a6, a7, a8;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        cont = engine.cont;
    // '$dummy_2_rule_expander.pro'(A,B,C,D,E,F,G):-['$get_level'(H),'$unify'(G,[]),'$cut'(H),'$unify'(E,C)]
        a8 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(8))
        if (! a8.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $unify(a(7),s(1))
        if (! a7.unify(s1, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $cut(a(8))
        a8 = a8.dereference();
        if (! a8.isInteger()) {
            throw new IllegalTypeException("integer", a8);
        } else {
            engine.cut(((IntegerTerm) a8).intValue());
        }
        //END inline expansion
        //START inline expansion of $unify(a(5),a(3))
        if (! a5.unify(a3, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dummy_2_rule_expander$002Epro_7_2 extends PRED_$dummy_2_rule_expander$002Epro_7 {
    public Predicate exec(Prolog engine) {
    // '$dummy_2_rule_expander.pro'(A,B,C,D,E,F,G):-'$dummy_3_rule_expander.pro'(G,C,B,F,E,A,D)
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        a5 = engine.aregs[5];
        a6 = engine.aregs[6];
        a7 = engine.aregs[7];
        cont = engine.cont;
    // '$dummy_2_rule_expander.pro'(A,B,C,D,E,F,G):-['$dummy_3_rule_expander.pro'(G,C,B,F,E,A,D)]
        return new PRED_$dummy_3_rule_expander$002Epro_7(a7, a3, a2, a6, a5, a1, a4, cont);
    }
}
