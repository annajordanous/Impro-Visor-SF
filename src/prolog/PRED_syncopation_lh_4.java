package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>syncopation_lh/4</code> defined in longuet_higgins.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_syncopation_lh_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("t", 2);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("r");
    static Predicate _syncopation_lh_4_sub_1 = new PRED_syncopation_lh_4_sub_1();
    static Predicate _syncopation_lh_4_1 = new PRED_syncopation_lh_4_1();
    static Predicate _syncopation_lh_4_2 = new PRED_syncopation_lh_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_syncopation_lh_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_syncopation_lh_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "syncopation_lh(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_syncopation_lh_4_1, _syncopation_lh_4_sub_1);
    }
}

class PRED_syncopation_lh_4_sub_1 extends PRED_syncopation_lh_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_syncopation_lh_4_2);
    }
}

class PRED_syncopation_lh_4_1 extends PRED_syncopation_lh_4 {
    public Predicate exec(Prolog engine) {
    // syncopation_lh(A,B,[C|D],E):-C=t(r,F),G is F+A,onset_list([t(r,G)|D],H,I),split_onsets(I,B,J,K),syncopation_measure_lh(B,J,K,H,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // syncopation_lh(A,B,[C|D],E):-['$unify'(C,t(r,F)),'$plus'(F,A,G),onset_list([t(r,G)|D],H,I),split_onsets(I,B,J,K),syncopation_measure_lh(B,J,K,H,E)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a3.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        Term[] y1 = {s2, a7};
        a8 = new StructureTerm(s1, y1);
        //START inline expansion of $unify(a(5),a(8))
        if (! a5.unify(a8, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        a9 = new VariableTerm(engine);
        //START inline expansion of $plus(a(7),a(1),a(9))
        try {
            if (! a9.unify(Arithmetic.evaluate(a7).add(Arithmetic.evaluate(a1)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        Term[] y2 = {s2, a9};
        a10 = new StructureTerm(s1, y2);
        a11 = new ListTerm(a10, a6);
        a12 = new VariableTerm(engine);
        a13 = new VariableTerm(engine);
        a14 = new VariableTerm(engine);
        a15 = new VariableTerm(engine);
        p1 = new PRED_syncopation_measure_lh_5(a2, a14, a15, a12, a4, cont);
        p2 = new PRED_split_onsets_4(a13, a2, a14, a15, p1);
        return new PRED_onset_list_3(a11, a12, a13, p2);
    }
}

class PRED_syncopation_lh_4_2 extends PRED_syncopation_lh_4 {
    public Predicate exec(Prolog engine) {
    // syncopation_lh(A,B,[C|D],E):-C\=t(r,F),onset_list([t(r,A),C|D],G,H),split_onsets(H,B,I,J),syncopation_measure_lh(B,I,J,G,E)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14;
        Predicate p1, p2;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // syncopation_lh(A,B,[C|D],E):-['$not_unifiable'(C,t(r,F)),onset_list([t(r,A),C|D],G,H),split_onsets(H,B,I,J),syncopation_measure_lh(B,I,J,G,E)]
        a3 = a3.dereference();
        if (a3.isList()){
            Term[] args = {((ListTerm)a3).car(), ((ListTerm)a3).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a3.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a3).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        Term[] y1 = {s2, new VariableTerm(engine)};
        a7 = new StructureTerm(s1, y1);
        //START inline expansion of $not_unifiable(a(5),a(7))
        if (a5.unify(a7, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        Term[] y2 = {s2, a1};
        a8 = new StructureTerm(s1, y2);
        a9 = new ListTerm(a5, a6);
        a10 = new ListTerm(a8, a9);
        a11 = new VariableTerm(engine);
        a12 = new VariableTerm(engine);
        a13 = new VariableTerm(engine);
        a14 = new VariableTerm(engine);
        p1 = new PRED_syncopation_measure_lh_5(a2, a13, a14, a11, a4, cont);
        p2 = new PRED_split_onsets_4(a12, a2, a13, a14, p1);
        return new PRED_onset_list_3(a10, a11, a12, p2);
    }
}
