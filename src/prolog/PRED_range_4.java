package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>range/4</code> defined in longuet_higgins.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_range_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");
    static Predicate _range_4_top = new PRED_range_4_top();
    static Predicate _range_4_sub_1 = new PRED_range_4_sub_1();
    static Predicate _range_4_1 = new PRED_range_4_1();
    static Predicate _range_4_2 = new PRED_range_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_range_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_range_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "range(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        return _range_4_top;
    }
}

class PRED_range_4_top extends PRED_range_4 {
    public Predicate exec(Prolog engine) {
        engine.setB0();
        return engine.jtry(_range_4_1, _range_4_sub_1);
    }
}

class PRED_range_4_sub_1 extends PRED_range_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_range_4_2);
    }
}

class PRED_range_4_1 extends PRED_range_4 {
    public Predicate exec(Prolog engine) {
    // range(A,A,B,[]):-true
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // range(A,A,B,[]):-[]
        if (! a1.unify(a2, engine.trail))
            return engine.fail();
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s1))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_range_4_2 extends PRED_range_4 {
    public Predicate exec(Prolog engine) {
    // range(A,B,C,[A|D]):-A<B,E is A+C,range(E,B,C,D)
        Term a1, a2, a3, a4, a5, a6;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // range(A,B,C,[A|D]):-['$less_than'(A,B),'$plus'(A,C,E),range(E,B,C,D)]
        a4 = a4.dereference();
        if (a4.isList()){
            Term[] args = {((ListTerm)a4).car(), ((ListTerm)a4).cdr()};
            if (! a1.unify(args[0], engine.trail))
                return engine.fail();
            a5 = args[1];
        } else if (a4.isVariable()){
            a5 = new VariableTerm(engine);
            ((VariableTerm) a4).bind(new ListTerm(a1, a5), engine.trail);
        } else {
            return engine.fail();
        }
        //START inline expansion of $less_than(a(1),a(2))
        try {
            if (Arithmetic.evaluate(a1).arithCompareTo(Arithmetic.evaluate(a2)) >= 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        a6 = new VariableTerm(engine);
        //START inline expansion of $plus(a(1),a(3),a(6))
        try {
            if (! a6.unify(Arithmetic.evaluate(a1).add(Arithmetic.evaluate(a3)), engine.trail)) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        engine.aregs[1] = a6;
        engine.aregs[2] = a2;
        engine.aregs[3] = a3;
        engine.aregs[4] = a5;
        engine.cont = cont;
        return _range_4_top;
    }
}
