package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>assoc_and_pop/4</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_assoc_and_pop_4 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("[]");

    public Term arg1, arg2, arg3, arg4;

    public PRED_assoc_and_pop_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_assoc_and_pop_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "assoc_and_pop(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
    // assoc_and_pop(A,[B|C],D,E):-B=[F,G],'$dummy_10_functional.pro'(H,B,E,D,G,C,A,F)
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9, a10;
        a1 = arg1;
        a2 = arg2;
        a3 = arg3;
        a4 = arg4;
    // assoc_and_pop(A,[B|C],D,E):-['$unify'(B,[F,G]),'$dummy_10_functional.pro'(H,B,E,D,G,C,A,F)]
        a2 = a2.dereference();
        if (a2.isList()){
            Term[] args = {((ListTerm)a2).car(), ((ListTerm)a2).cdr()};
            a5 = args[0];
            a6 = args[1];
        } else if (a2.isVariable()){
            a5 = new VariableTerm(engine);
            a6 = new VariableTerm(engine);
            ((VariableTerm) a2).bind(new ListTerm(a5, a6), engine.trail);
        } else {
            return engine.fail();
        }
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new ListTerm(a8, s1);
        a10 = new ListTerm(a7, a9);
        //START inline expansion of $unify(a(5),a(10))
        if (! a5.unify(a10, engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        return new PRED_$dummy_10_functional$002Epro_8(new VariableTerm(engine), a5, a4, a3, a8, a6, a1, a7, cont);
    }
}
