import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>'$dummy_2_functional.pro'/3</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_$dummy_2_functional$002Epro_3 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(0);
    static IntegerTerm si3 = new IntegerTerm(4);
    static Predicate _$dummy_2_functional$002Epro_3_sub_1 = new PRED_$dummy_2_functional$002Epro_3_sub_1();
    static Predicate _$dummy_2_functional$002Epro_3_1 = new PRED_$dummy_2_functional$002Epro_3_1();
    static Predicate _$dummy_2_functional$002Epro_3_2 = new PRED_$dummy_2_functional$002Epro_3_2();

    public Term arg1, arg2, arg3;

    public PRED_$dummy_2_functional$002Epro_3(Term a1, Term a2, Term a3, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        this.cont = cont;
    }

    public PRED_$dummy_2_functional$002Epro_3(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        this.cont = cont;
    }

    public int arity() { return 3; }

    public String toString() {
        return "$dummy_2_functional.pro(" + arg1 + "," + arg2 + "," + arg3 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_$dummy_2_functional$002Epro_3_1, _$dummy_2_functional$002Epro_3_sub_1);
    }
}

class PRED_$dummy_2_functional$002Epro_3_sub_1 extends PRED_$dummy_2_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_$dummy_2_functional$002Epro_3_2);
    }
}

class PRED_$dummy_2_functional$002Epro_3_1 extends PRED_$dummy_2_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_2_functional.pro'(A,1,0):-A>4,!,0 is 0,1 is 1
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_2_functional.pro'(A,1,0):-['$get_level'(B),'$greater_than'(A,4),'$cut'(B)]
        a2 = a2.dereference();
        if (a2.isInteger()){
            if (((IntegerTerm) a2).intValue() != 1)
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isInteger()){
            if (((IntegerTerm) a3).intValue() != 0)
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        a4 = new VariableTerm(engine);
        //START inline expansion of $get_level(a(4))
        if (! a4.unify(new IntegerTerm(engine.B0), engine.trail)) {
            return engine.fail();
        }
        //END inline expansion
        //START inline expansion of $greater_than(a(1),si(3))
        try {
            if (Arithmetic.evaluate(a1).arithCompareTo(si3) <= 0) {
                return engine.fail();
            }
        } catch (BuiltinException e) {
            e.goal = this;
            throw e;
        }
        //END inline expansion
        //START inline expansion of $cut(a(4))
        a4 = a4.dereference();
        if (! a4.isInteger()) {
            throw new IllegalTypeException("integer", a4);
        } else {
            engine.cut(((IntegerTerm) a4).intValue());
        }
        //END inline expansion
        return cont;
    }
}

class PRED_$dummy_2_functional$002Epro_3_2 extends PRED_$dummy_2_functional$002Epro_3 {
    public Predicate exec(Prolog engine) {
    // '$dummy_2_functional.pro'(A,0,1):-1 is 1,0 is 0
        Term a1, a2, a3;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        cont = engine.cont;
    // '$dummy_2_functional.pro'(A,0,1):-[]
        a2 = a2.dereference();
        if (a2.isInteger()){
            if (((IntegerTerm) a2).intValue() != 0)
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(si2, engine.trail);
        } else {
            return engine.fail();
        }
        a3 = a3.dereference();
        if (a3.isInteger()){
            if (((IntegerTerm) a3).intValue() != 1)
                return engine.fail();
        } else if (a3.isVariable()){
            ((VariableTerm) a3).bind(si1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
