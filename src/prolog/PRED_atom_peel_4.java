package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>atom_peel/4</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_atom_peel_4 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(0);
    static SymbolTerm s2 = SymbolTerm.makeSymbol("");
    static Predicate _atom_peel_4_sub_1 = new PRED_atom_peel_4_sub_1();
    static Predicate _atom_peel_4_1 = new PRED_atom_peel_4_1();
    static Predicate _atom_peel_4_2 = new PRED_atom_peel_4_2();

    public Term arg1, arg2, arg3, arg4;

    public PRED_atom_peel_4(Term a1, Term a2, Term a3, Term a4, Predicate cont) {
        arg1 = a1;
        arg2 = a2;
        arg3 = a3;
        arg4 = a4;
        this.cont = cont;
    }

    public PRED_atom_peel_4(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        arg2 = args[1];
        arg3 = args[2];
        arg4 = args[3];
        this.cont = cont;
    }

    public int arity() { return 4; }

    public String toString() {
        return "atom_peel(" + arg1 + "," + arg2 + "," + arg3 + "," + arg4 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.aregs[2] = arg2;
        engine.aregs[3] = arg3;
        engine.aregs[4] = arg4;
        engine.cont = cont;
        engine.setB0();
        return engine.jtry(_atom_peel_4_1, _atom_peel_4_sub_1);
    }
}

class PRED_atom_peel_4_sub_1 extends PRED_atom_peel_4 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_atom_peel_4_2);
    }
}

class PRED_atom_peel_4_1 extends PRED_atom_peel_4 {
    public Predicate exec(Prolog engine) {
    // atom_peel(A,B,C,D):-atom_length(B,E),sub_atom(A,F,G,H,B),sub_atom(A,0,F,I,C),J is I-E,K is F+E,sub_atom(A,K,J,L,D)
        Term a1, a2, a3, a4, a5, a6, a7, a8, a9;
        Predicate p1, p2, p3, p4, p5;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // atom_peel(A,B,C,D):-[atom_length(B,E),sub_atom(A,F,G,H,B),sub_atom(A,0,F,I,C),'$minus'(I,E,J),'$plus'(F,E,K),sub_atom(A,K,J,L,D)]
        a5 = new VariableTerm(engine);
        a6 = new VariableTerm(engine);
        a7 = new VariableTerm(engine);
        a8 = new VariableTerm(engine);
        a9 = new VariableTerm(engine);
        p1 = new PRED_sub_atom_5(a1, a9, a8, new VariableTerm(engine), a4, cont);
        p2 = new PRED_$plus_3(a6, a5, a9, p1);
        p3 = new PRED_$minus_3(a7, a5, a8, p2);
        p4 = new PRED_sub_atom_5(a1, si1, a6, a7, a3, p3);
        p5 = new PRED_sub_atom_5(a1, a6, new VariableTerm(engine), new VariableTerm(engine), a2, p4);
        return new PRED_atom_length_2(a2, a5, p5);
    }
}

class PRED_atom_peel_4_2 extends PRED_atom_peel_4 {
    public Predicate exec(Prolog engine) {
    // atom_peel(A,'',A,''):-true
        Term a1, a2, a3, a4;
        Predicate cont;
        a1 = engine.aregs[1];
        a2 = engine.aregs[2];
        a3 = engine.aregs[3];
        a4 = engine.aregs[4];
        cont = engine.cont;
    // atom_peel(A,'',A,''):-[]
        a2 = a2.dereference();
        if (a2.isSymbol()){
            if (! a2.equals(s2))
                return engine.fail();
        } else if (a2.isVariable()){
            ((VariableTerm) a2).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        if (! a1.unify(a3, engine.trail))
            return engine.fail();
        a4 = a4.dereference();
        if (a4.isSymbol()){
            if (! a4.equals(s2))
                return engine.fail();
        } else if (a4.isVariable()){
            ((VariableTerm) a4).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
