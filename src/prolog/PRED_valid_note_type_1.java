package prolog;

import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>valid_note_type/1</code> defined in rule_initialize.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_valid_note_type_1 extends Predicate {
    static SymbolTerm s1 = SymbolTerm.makeSymbol("c");
    static SymbolTerm s2 = SymbolTerm.makeSymbol("l");
    static SymbolTerm s3 = SymbolTerm.makeSymbol("h");
    static SymbolTerm s4 = SymbolTerm.makeSymbol("s");
    static SymbolTerm s5 = SymbolTerm.makeSymbol("a");
    static SymbolTerm s6 = SymbolTerm.makeSymbol("x");
    static SymbolTerm s7 = SymbolTerm.makeSymbol("r");
    static Predicate _fail_0 = new PRED_fail_0();
    static Predicate _valid_note_type_1_var = new PRED_valid_note_type_1_var();
    static Predicate _valid_note_type_1_var_1 = new PRED_valid_note_type_1_var_1();
    static Predicate _valid_note_type_1_var_2 = new PRED_valid_note_type_1_var_2();
    static Predicate _valid_note_type_1_var_3 = new PRED_valid_note_type_1_var_3();
    static Predicate _valid_note_type_1_var_4 = new PRED_valid_note_type_1_var_4();
    static Predicate _valid_note_type_1_var_5 = new PRED_valid_note_type_1_var_5();
    static Predicate _valid_note_type_1_var_6 = new PRED_valid_note_type_1_var_6();
    static Predicate _valid_note_type_1_con = new PRED_valid_note_type_1_con();
    static Predicate _valid_note_type_1_1 = new PRED_valid_note_type_1_1();
    static Predicate _valid_note_type_1_2 = new PRED_valid_note_type_1_2();
    static Predicate _valid_note_type_1_3 = new PRED_valid_note_type_1_3();
    static Predicate _valid_note_type_1_4 = new PRED_valid_note_type_1_4();
    static Predicate _valid_note_type_1_5 = new PRED_valid_note_type_1_5();
    static Predicate _valid_note_type_1_6 = new PRED_valid_note_type_1_6();
    static Predicate _valid_note_type_1_7 = new PRED_valid_note_type_1_7();
    static java.util.Hashtable<Term, Predicate> con = new java.util.Hashtable<Term, Predicate>(7);
    static {
        con.put(s1, _valid_note_type_1_1);
        con.put(s2, _valid_note_type_1_2);
        con.put(s3, _valid_note_type_1_3);
        con.put(s4, _valid_note_type_1_4);
        con.put(s5, _valid_note_type_1_5);
        con.put(s6, _valid_note_type_1_6);
        con.put(s7, _valid_note_type_1_7);
    }

    public Term arg1;

    public PRED_valid_note_type_1(Term a1, Predicate cont) {
        arg1 = a1;
        this.cont = cont;
    }

    public PRED_valid_note_type_1(){}

    public void setArgument(Term[] args, Predicate cont) {
        arg1 = args[0];
        this.cont = cont;
    }

    public int arity() { return 1; }

    public String toString() {
        return "valid_note_type(" + arg1 + ")";
    }

    public Predicate exec(Prolog engine) {
        engine.aregs[1] = arg1;
        engine.cont = cont;
        engine.setB0();
        return engine.switch_on_term(_valid_note_type_1_var, _fail_0, _fail_0, _valid_note_type_1_con, _fail_0, _fail_0);
    }
}

class PRED_valid_note_type_1_var extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.jtry(_valid_note_type_1_1, _valid_note_type_1_var_1);
    }
}

class PRED_valid_note_type_1_var_1 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_valid_note_type_1_2, _valid_note_type_1_var_2);
    }
}

class PRED_valid_note_type_1_var_2 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_valid_note_type_1_3, _valid_note_type_1_var_3);
    }
}

class PRED_valid_note_type_1_var_3 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_valid_note_type_1_4, _valid_note_type_1_var_4);
    }
}

class PRED_valid_note_type_1_var_4 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_valid_note_type_1_5, _valid_note_type_1_var_5);
    }
}

class PRED_valid_note_type_1_var_5 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.retry(_valid_note_type_1_6, _valid_note_type_1_var_6);
    }
}

class PRED_valid_note_type_1_var_6 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.trust(_valid_note_type_1_7);
    }
}

class PRED_valid_note_type_1_con extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
        return engine.switch_on_hash(con, _fail_0);
    }
}

class PRED_valid_note_type_1_1 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(c):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(c):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s1))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s1, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_2 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(l):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(l):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s2))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s2, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_3 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(h):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(h):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s3))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s3, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_4 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(s):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(s):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s4))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s4, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_5 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(a):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(a):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s5))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s5, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_6 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(x):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(x):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s6))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s6, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}

class PRED_valid_note_type_1_7 extends PRED_valid_note_type_1 {
    public Predicate exec(Prolog engine) {
    // valid_note_type(r):-true
        Term a1;
        Predicate cont;
        a1 = engine.aregs[1];
        cont = engine.cont;
    // valid_note_type(r):-[]
        a1 = a1.dereference();
        if (a1.isSymbol()){
            if (! a1.equals(s7))
                return engine.fail();
        } else if (a1.isVariable()){
            ((VariableTerm) a1).bind(s7, engine.trail);
        } else {
            return engine.fail();
        }
        return cont;
    }
}
