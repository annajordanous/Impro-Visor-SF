import jp.ac.kobe_u.cs.prolog.lang.*;
import jp.ac.kobe_u.cs.prolog.builtin.*;
/*
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
/**
 <code>test_map_fn/0</code> defined in functional.pro<br>
 @author Mutsunori Banbara (banbara@kobe-u.ac.jp)
 @author Naoyuki Tamura (tamura@kobe-u.ac.jp)
 @version 1.0
*/
public class PRED_test_map_fn_0 extends Predicate {
    static IntegerTerm si1 = new IntegerTerm(1);
    static IntegerTerm si2 = new IntegerTerm(2);
    static IntegerTerm si3 = new IntegerTerm(3);
    static SymbolTerm s4 = SymbolTerm.makeSymbol("[]");
    static ListTerm s5 = new ListTerm(si3, s4);
    static ListTerm s6 = new ListTerm(si2, s5);
    static ListTerm s7 = new ListTerm(si1, s6);
    static SymbolTerm s8 = SymbolTerm.makeSymbol("fn", 2);
    static SymbolTerm s9 = SymbolTerm.makeSymbol("plus", 3);
    static IntegerTerm si10 = new IntegerTerm(4);
    static IntegerTerm si11 = new IntegerTerm(5);
    static IntegerTerm si12 = new IntegerTerm(6);
    static ListTerm s13 = new ListTerm(si12, s4);
    static ListTerm s14 = new ListTerm(si11, s13);
    static ListTerm s15 = new ListTerm(si10, s14);

    public PRED_test_map_fn_0(Predicate cont) {
        this.cont = cont;
    }

    public PRED_test_map_fn_0(){}

    public void setArgument(Term[] args, Predicate cont) {
        this.cont = cont;
    }

    public int arity() { return 0; }

    public String toString() {
        return "test_map_fn";
    }

    public Predicate exec(Prolog engine) {
    // test_map_fn:-map_fn([1,2,3],fn([A,B],plus(A,3,B)),C),C=[4,5,6]
        engine.setB0();
        Term a1, a2, a3, a4, a5, a6, a7;
        Predicate p1;
    // test_map_fn:-[map_fn([1,2,3],fn([A,B],plus(A,3,B)),C),'$unify'(C,[4,5,6])]
        a1 = new VariableTerm(engine);
        a2 = new VariableTerm(engine);
        a3 = new ListTerm(a2, s4);
        a4 = new ListTerm(a1, a3);
        Term[] y1 = {a1, si3, a2};
        a5 = new StructureTerm(s9, y1);
        Term[] y2 = {a4, a5};
        a6 = new StructureTerm(s8, y2);
        a7 = new VariableTerm(engine);
        p1 = new PRED_$unify_2(a7, s15, cont);
        return new PRED_map_fn_3(s7, a6, a7, p1);
    }
}
